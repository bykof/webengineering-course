{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Webengineering Lectures For JavaScript Fundamentals and Web APIs, we'll start here: https://javascript.info","title":"Webengineering Lectures"},{"location":"#webengineering-lectures","text":"For JavaScript Fundamentals and Web APIs, we'll start here: https://javascript.info","title":"Webengineering Lectures"},{"location":"exercises/","text":"","title":"Index"},{"location":"exercises/01_javascript/","text":"JavaScript Create a Web Shop with JavaScript Fundamentals. Use functions, classes, arrays, objects, alert, prompt and so on. Menu The interface consists only of prompts and alerts. No console.logs! The menu is: 1. Liste aller Produkte 2. Liste aller Kunden 3. Liste aller K\u00e4ufe 4. Produkt hinzuf\u00fcgen 5. Kunde hinzuf\u00fcgen 6. Kauf hinzuf\u00fcgen 7. Produkt zum Kauf hinzuf\u00fcgen 8. Produkt \u00e4ndern 9. Kunde \u00e4ndern 10. Kaufdetails 1. Liste aller Produkte lists all created products in the form: #id name formattedPrice EUR . As example: #1 iPhone 14 1399.99 EUR 2. Liste aller Kunden lists all created customers in the form: #id firstName lastName . As example: #1 Michael Tester 3. Liste aller K\u00e4ufe lists all created orders in the form: #id createdDate formattedPrice EUR firstName lastName . As example: #1 - 15.10.2022 13:17:53 369 EUR Michael Tester 4. Produkt hinzuf\u00fcgen creates a new product. First the programm should ask for the product name. Then the programm asks for the price in cents. The price must be an integer, float values are not allowed! After the price was set the new product with a new product id was created. If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again. 5. Kunde hinzuf\u00fcgen creates a new customer. First the programm should ask for the first name, then the last name. After the last namewas set the new customer with a new customer id was created. If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again. 6. Kauf hinzuf\u00fcgen creates a new order. First the programm asks for a customer id. If the customer could not be found, the programm prints a hint and asks again for the customer id. After the customer was selected the order with a new order id is created. If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again. 7. Produkt zum Kauf hinzuf\u00fcgen adds a product with a specific amount to the order. First the programm asks for an order id. If the order could not be found, the programm prints a hint and asks again for the order id. Then the programm asks for a customer id. If the product could not be found, the programm prints a hint and asks again for the customer id. Then the amount is asked. Only integers are allowed. After the amount was entered, the product is added with the specific amount to the order. If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again. 8. Produkt \u00e4ndern changes a product. The programm first asks for the product id. If the product could not be found, the programm prints a hint and asks again for the product id. When the product was found, it prompts the current product name, so it can be changed. When the product name was set it prompts the current price, so it can be changed (again only integers!). After everything was set, the product gets saved. Warning If products change, products in orders SHOULD NOT be changed too! So for example the price of products in order should not be changed! If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again. 9. Kunde \u00e4ndern changes a customer. The programm first asks for the customer id. If the customer could not be found, the programm prints a hint and asks again for the customer id. When the customer was found, it prompts the current customer first name, so it can be changed. Then it prompts the current customer last name, so it can be changed. After everything was set, the customer gets saved. Warning If customers change, customers in orders SHOULD NOT be changed too! So for example the first name of the customer in an order should not be changed! If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again. 10. Kaufdetails prints a detailed version of an order. The programm first asks for the order id. If the order could not be found, the programm prints a hint and asks again for the order id. When the order was found, it prints the following order information. The format is: Kunde: #1 - Michael Bykovski Produkte: - 3x #1 - Test (1.23 EUR) = 3.69 EUR - 4x #2 - Noch ein Test (3.21 EUR) = 12.84 EUR ------------------- Bestellt am: 17.10.2022 16:59:38 Summe: 16.53 EUR If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again. Customers Customers have only the fields: first name and last name. Products Products have the field name and price. The price is saved in cents. So if the price is: 100 that's 100 Cents which are 1 EUR . Orders Orders save the current customer, BUT they make a copy of the customer, because the customer can change and we want to store the customer values to the moment, where the customer bought the products. Also products are copied , because the price of a product can change afterwards.","title":"JavaScript"},{"location":"exercises/01_javascript/#javascript","text":"Create a Web Shop with JavaScript Fundamentals. Use functions, classes, arrays, objects, alert, prompt and so on.","title":"JavaScript"},{"location":"exercises/01_javascript/#menu","text":"The interface consists only of prompts and alerts. No console.logs! The menu is: 1. Liste aller Produkte 2. Liste aller Kunden 3. Liste aller K\u00e4ufe 4. Produkt hinzuf\u00fcgen 5. Kunde hinzuf\u00fcgen 6. Kauf hinzuf\u00fcgen 7. Produkt zum Kauf hinzuf\u00fcgen 8. Produkt \u00e4ndern 9. Kunde \u00e4ndern 10. Kaufdetails","title":"Menu"},{"location":"exercises/01_javascript/#1-liste-aller-produkte","text":"lists all created products in the form: #id name formattedPrice EUR . As example: #1 iPhone 14 1399.99 EUR","title":"1. Liste aller Produkte"},{"location":"exercises/01_javascript/#2-liste-aller-kunden","text":"lists all created customers in the form: #id firstName lastName . As example: #1 Michael Tester","title":"2. Liste aller Kunden"},{"location":"exercises/01_javascript/#3-liste-aller-kaufe","text":"lists all created orders in the form: #id createdDate formattedPrice EUR firstName lastName . As example: #1 - 15.10.2022 13:17:53 369 EUR Michael Tester","title":"3. Liste aller K\u00e4ufe"},{"location":"exercises/01_javascript/#4-produkt-hinzufugen","text":"creates a new product. First the programm should ask for the product name. Then the programm asks for the price in cents. The price must be an integer, float values are not allowed! After the price was set the new product with a new product id was created. If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again.","title":"4. Produkt hinzuf\u00fcgen"},{"location":"exercises/01_javascript/#5-kunde-hinzufugen","text":"creates a new customer. First the programm should ask for the first name, then the last name. After the last namewas set the new customer with a new customer id was created. If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again.","title":"5. Kunde hinzuf\u00fcgen"},{"location":"exercises/01_javascript/#6-kauf-hinzufugen","text":"creates a new order. First the programm asks for a customer id. If the customer could not be found, the programm prints a hint and asks again for the customer id. After the customer was selected the order with a new order id is created. If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again.","title":"6. Kauf hinzuf\u00fcgen"},{"location":"exercises/01_javascript/#7-produkt-zum-kauf-hinzufugen","text":"adds a product with a specific amount to the order. First the programm asks for an order id. If the order could not be found, the programm prints a hint and asks again for the order id. Then the programm asks for a customer id. If the product could not be found, the programm prints a hint and asks again for the customer id. Then the amount is asked. Only integers are allowed. After the amount was entered, the product is added with the specific amount to the order. If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again.","title":"7. Produkt zum Kauf hinzuf\u00fcgen"},{"location":"exercises/01_javascript/#8-produkt-andern","text":"changes a product. The programm first asks for the product id. If the product could not be found, the programm prints a hint and asks again for the product id. When the product was found, it prompts the current product name, so it can be changed. When the product name was set it prompts the current price, so it can be changed (again only integers!). After everything was set, the product gets saved. Warning If products change, products in orders SHOULD NOT be changed too! So for example the price of products in order should not be changed! If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again.","title":"8. Produkt \u00e4ndern"},{"location":"exercises/01_javascript/#9-kunde-andern","text":"changes a customer. The programm first asks for the customer id. If the customer could not be found, the programm prints a hint and asks again for the customer id. When the customer was found, it prompts the current customer first name, so it can be changed. Then it prompts the current customer last name, so it can be changed. After everything was set, the customer gets saved. Warning If customers change, customers in orders SHOULD NOT be changed too! So for example the first name of the customer in an order should not be changed! If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again.","title":"9. Kunde \u00e4ndern"},{"location":"exercises/01_javascript/#10-kaufdetails","text":"prints a detailed version of an order. The programm first asks for the order id. If the order could not be found, the programm prints a hint and asks again for the order id. When the order was found, it prints the following order information. The format is: Kunde: #1 - Michael Bykovski Produkte: - 3x #1 - Test (1.23 EUR) = 3.69 EUR - 4x #2 - Noch ein Test (3.21 EUR) = 12.84 EUR ------------------- Bestellt am: 17.10.2022 16:59:38 Summe: 16.53 EUR If the user clicks on \"Cancel\" or \"Abbrechen\", you redirect to the menu again.","title":"10. Kaufdetails"},{"location":"exercises/01_javascript/#customers","text":"Customers have only the fields: first name and last name.","title":"Customers"},{"location":"exercises/01_javascript/#products","text":"Products have the field name and price. The price is saved in cents. So if the price is: 100 that's 100 Cents which are 1 EUR .","title":"Products"},{"location":"exercises/01_javascript/#orders","text":"Orders save the current customer, BUT they make a copy of the customer, because the customer can change and we want to store the customer values to the moment, where the customer bought the products. Also products are copied , because the price of a product can change afterwards.","title":"Orders"},{"location":"exercises/02_web_ui/","text":"","title":"Index"},{"location":"react/chakra-ui/","text":"Chakra UI TBD","title":"Chakra UI"},{"location":"react/chakra-ui/#chakra-ui","text":"TBD","title":"Chakra UI"},{"location":"react/component_lifecycles/","text":"Component Lifecycles Here are the component lifecycles listed. Let's talk about that a little bit deeper: import * as ReactDOM from \"react-dom/client\" ; function Component ({ prop }) { const [ state , setState ] = useState (); React . useEffect (() => { console . log ( \"this runs only on component mount\" ); return () => { console . log ( \"this run when the component unmounts\" ); }; }, []); React . useEffect (() => { console . log ( \"this runs on every update of prop or state\" ); }, [ prop , state ]); return < div >< /div>; } const root = createRoot ( < Component /> ); root . render ( document . getElementById ( \"app\" )); // <-- first time render","title":"Component Lifecycles"},{"location":"react/component_lifecycles/#component-lifecycles","text":"Here are the component lifecycles listed. Let's talk about that a little bit deeper: import * as ReactDOM from \"react-dom/client\" ; function Component ({ prop }) { const [ state , setState ] = useState (); React . useEffect (() => { console . log ( \"this runs only on component mount\" ); return () => { console . log ( \"this run when the component unmounts\" ); }; }, []); React . useEffect (() => { console . log ( \"this runs on every update of prop or state\" ); }, [ prop , state ]); return < div >< /div>; } const root = createRoot ( < Component /> ); root . render ( document . getElementById ( \"app\" )); // <-- first time render","title":"Component Lifecycles"},{"location":"react/components/","text":"Components A React component is a small, reusable code, which is responsible for one part of the application UI. A React application is an aggregation of components. React can help us to build reusable components. The following diagram shows different components. All the components have different border colors. In React we assemble different components together to create an application. We use JavaScript functions or classes to make components. If we use a function, the component will be a functional component, but if we use a class, the component will be a class-based component. Components can be: Functional Component / Presentational Component / Stateless Component / Dumb Component Class Component / Container Component / Stateful Component / Smart Component The classification of components above does not work for the latest version of React, but it is good to know the former definition and how the previous versions work. So, let us change all the JSX to components. Components in React are JavaScript functions, that return a JSX. Component name must start with an uppercase, and if the name is two words, it should be CamelCase - a camel with two humps. In general class components will fade away in the future, therefore use only functional components ! Big picture of components In the previous section we agreed, that a website or an application is made of buttons, forms, texts, media objects, header, section, article and footer. If we have a million-dollar button, we can use this button all the time, instead of recreating it all over again, whenever we need a button. The same goes for input fields, forms, header or footer. That is where the power of the component comes. In the following diagram, the header, main and footer are components. Inside the main there is also a user card component and a text section component. All the different colors represent different components. How many colors do you see? Each color represent a single component. We have four components in this diagram, but they are reused multiple times. Creating React Components Using a JavaScript function, we can make a functional React component. function ComponentName () { return < p > Content < /p>; } The following expressions are a JSX element. function Header () { const title = \"Getting Started React\" ; const author = { firstName : \"Michael\" , lastName : \"Bykovski\" , }; const content = ( < header > < div > < h1 > Welcome to Webengineering < /h1> < h2 > { title } < /h2> < p > Instructor : { author . firstName } { author . lastName } < /p> < /div> < /header> ); return content ; } function Header () { return ( < header > < div > < h1 > Welcome to Webengineering < /h1> < h2 > Getting Started React < /h2> < p > Instructor : Michael Bykovski < /p> < /div> < /header> ); } Rendering components Now, lets change all the JSX elements we had to components. When we call JSX element we use curly brackets and when we call components we do as follows <ComponentName /> . If we pass an attribute, when we call the component name, we call it props <ComponentName propsName={'propsValue'} /> . Let's render first the Header component. index.js import React from \"react\" ; import ReactDOM from \"react-dom\" ; function Header () ( < header > < div > < h1 > Welcome to Web Engineering < /h1> < /div> < /header> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode >< Header />< /React.StrictMode>); Now, let's create an App component, that will wrap the Header, Main and Footer. Then the App component will be render on the DOM. index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; const author = { firstName : \"Michael\" , lastName : \"Bykovski\" , }; function Header () { const welcome = \"Welcome to Webengineering\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const date = \"18. August 2022\" ; return ( < header > < div > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); } function Main () { const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1994 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { author . firstName } { author . lastName } is { age } years old < /p> ); const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); return ( < main > < div > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); } function Footer () { const copyRight = \"Copyright 2022\" ; return ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); } function App () { return ( < div > < Header /> < Main /> < Footer /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Injecting data to JSX in React Component So far, we used static data on the JSX elements. Now let's pass different data types as dynamic data. The dynamic data could be strings, numbers, booleans, arrays or objects. Let us see each of the data types step by step. To inject data to a JSX we use the {} bracket. In this section we inject only strings import React from \"react\" ; import ReactDOM from \"react-dom\" ; const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const firstName = \"Asabeneh\" ; const lastName = \"Yetayeh\" ; const date = \"Oct 3, 2020\" ; // JSX element, header const header = () => { return ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { firstName } { lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); }; const rootElement = document . getElementById ( \"root\" ); // we render the App component using the ReactDOM package ReactDOM . render ( < Header /> , rootElement ); Further on Functional components Let's create more components. What is the smallest size of a component? A component that returns only a single HTML as JSX is considered as a small component. A button component or an alert box component, or just an input field component. const Button = () => < button > action < /button>; The Button component is made of a single HTML button element. Let's style this button using JavaScript style object. All CSS properties should be camelCase to make a JavaScript CSS object. If we pass a number without unit as CSS value, it is considered as px. See the example below. const buttonStyles = { padding : \"10px 20px\" , background : \"rgb(0, 255, 0\" , border : \"none\" , borderRadius : 5 , }; const Button = () => < button style = { buttonStyles } > action < /button>; The Button component is a dumb component, because it does not take any parameters and we cannot change the action text dynamically. We need to pass props to the button, to change the value dynamically. We will see props in the next section. Before we close today's lesson let's make another, more functional component, which displays a random hexadecimal number. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; // Hexadecimal color generator const hexaColor = () => { let str = \"0123456789abcdef\" ; let color = \"\" ; for ( let i = 0 ; i < 6 ; i ++ ) { let index = Math . floor ( Math . random () * str . length ); color += str [ index ]; } return \"#\" + color ; }; const HexaColor = () => < div > { hexaColor ()} < /div>; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < HexaColor /> < /React.StrictMode> );","title":"Components"},{"location":"react/components/#components","text":"A React component is a small, reusable code, which is responsible for one part of the application UI. A React application is an aggregation of components. React can help us to build reusable components. The following diagram shows different components. All the components have different border colors. In React we assemble different components together to create an application. We use JavaScript functions or classes to make components. If we use a function, the component will be a functional component, but if we use a class, the component will be a class-based component. Components can be: Functional Component / Presentational Component / Stateless Component / Dumb Component Class Component / Container Component / Stateful Component / Smart Component The classification of components above does not work for the latest version of React, but it is good to know the former definition and how the previous versions work. So, let us change all the JSX to components. Components in React are JavaScript functions, that return a JSX. Component name must start with an uppercase, and if the name is two words, it should be CamelCase - a camel with two humps. In general class components will fade away in the future, therefore use only functional components !","title":"Components"},{"location":"react/components/#big-picture-of-components","text":"In the previous section we agreed, that a website or an application is made of buttons, forms, texts, media objects, header, section, article and footer. If we have a million-dollar button, we can use this button all the time, instead of recreating it all over again, whenever we need a button. The same goes for input fields, forms, header or footer. That is where the power of the component comes. In the following diagram, the header, main and footer are components. Inside the main there is also a user card component and a text section component. All the different colors represent different components. How many colors do you see? Each color represent a single component. We have four components in this diagram, but they are reused multiple times.","title":"Big picture of components"},{"location":"react/components/#creating-react-components","text":"Using a JavaScript function, we can make a functional React component. function ComponentName () { return < p > Content < /p>; } The following expressions are a JSX element. function Header () { const title = \"Getting Started React\" ; const author = { firstName : \"Michael\" , lastName : \"Bykovski\" , }; const content = ( < header > < div > < h1 > Welcome to Webengineering < /h1> < h2 > { title } < /h2> < p > Instructor : { author . firstName } { author . lastName } < /p> < /div> < /header> ); return content ; } function Header () { return ( < header > < div > < h1 > Welcome to Webengineering < /h1> < h2 > Getting Started React < /h2> < p > Instructor : Michael Bykovski < /p> < /div> < /header> ); }","title":"Creating React Components"},{"location":"react/components/#rendering-components","text":"Now, lets change all the JSX elements we had to components. When we call JSX element we use curly brackets and when we call components we do as follows <ComponentName /> . If we pass an attribute, when we call the component name, we call it props <ComponentName propsName={'propsValue'} /> . Let's render first the Header component. index.js import React from \"react\" ; import ReactDOM from \"react-dom\" ; function Header () ( < header > < div > < h1 > Welcome to Web Engineering < /h1> < /div> < /header> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode >< Header />< /React.StrictMode>); Now, let's create an App component, that will wrap the Header, Main and Footer. Then the App component will be render on the DOM. index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; const author = { firstName : \"Michael\" , lastName : \"Bykovski\" , }; function Header () { const welcome = \"Welcome to Webengineering\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const date = \"18. August 2022\" ; return ( < header > < div > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); } function Main () { const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1994 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { author . firstName } { author . lastName } is { age } years old < /p> ); const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); return ( < main > < div > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); } function Footer () { const copyRight = \"Copyright 2022\" ; return ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); } function App () { return ( < div > < Header /> < Main /> < Footer /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Rendering components"},{"location":"react/components/#injecting-data-to-jsx-in-react-component","text":"So far, we used static data on the JSX elements. Now let's pass different data types as dynamic data. The dynamic data could be strings, numbers, booleans, arrays or objects. Let us see each of the data types step by step. To inject data to a JSX we use the {} bracket. In this section we inject only strings import React from \"react\" ; import ReactDOM from \"react-dom\" ; const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const firstName = \"Asabeneh\" ; const lastName = \"Yetayeh\" ; const date = \"Oct 3, 2020\" ; // JSX element, header const header = () => { return ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { firstName } { lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); }; const rootElement = document . getElementById ( \"root\" ); // we render the App component using the ReactDOM package ReactDOM . render ( < Header /> , rootElement );","title":"Injecting data to JSX in React Component"},{"location":"react/components/#further-on-functional-components","text":"Let's create more components. What is the smallest size of a component? A component that returns only a single HTML as JSX is considered as a small component. A button component or an alert box component, or just an input field component. const Button = () => < button > action < /button>; The Button component is made of a single HTML button element. Let's style this button using JavaScript style object. All CSS properties should be camelCase to make a JavaScript CSS object. If we pass a number without unit as CSS value, it is considered as px. See the example below. const buttonStyles = { padding : \"10px 20px\" , background : \"rgb(0, 255, 0\" , border : \"none\" , borderRadius : 5 , }; const Button = () => < button style = { buttonStyles } > action < /button>; The Button component is a dumb component, because it does not take any parameters and we cannot change the action text dynamically. We need to pass props to the button, to change the value dynamically. We will see props in the next section. Before we close today's lesson let's make another, more functional component, which displays a random hexadecimal number. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; // Hexadecimal color generator const hexaColor = () => { let str = \"0123456789abcdef\" ; let color = \"\" ; for ( let i = 0 ; i < 6 ; i ++ ) { let index = Math . floor ( Math . random () * str . length ); color += str [ index ]; } return \"#\" + color ; }; const HexaColor = () => < div > { hexaColor ()} < /div>; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < HexaColor /> < /React.StrictMode> );","title":"Further on Functional components"},{"location":"react/conditional_rendering/","text":"Conditional Rendering As we can understand from the term, conditional rendering is a way to render different JSX or component at different condition. We can implement conditional rendering using regular if and else statement, ternary operator and &&. Let's implement a different conditional rendering. Conditional Rendering using If and Else statement Exercises Exercises: Level 1 What is conditional rendering? How do you implement conditional rendering? Which method of conditional rendering do you prefer to use? Exercises: Level 2 Make a single page application which changes the body of the background based on the season of the year(Autumn, Winter, Spring, Summer) Make a single page application which change the body of the background based on the time of the day(Morning, Noon, Evening, Night) Exercises: Level 3","title":"Conditional Rendering"},{"location":"react/conditional_rendering/#conditional-rendering","text":"As we can understand from the term, conditional rendering is a way to render different JSX or component at different condition. We can implement conditional rendering using regular if and else statement, ternary operator and &&. Let's implement a different conditional rendering.","title":"Conditional Rendering"},{"location":"react/conditional_rendering/#conditional-rendering-using-if-and-else-statement","text":"","title":"Conditional Rendering using If and Else statement"},{"location":"react/conditional_rendering/#exercises","text":"","title":"Exercises"},{"location":"react/conditional_rendering/#exercises-level-1","text":"What is conditional rendering? How do you implement conditional rendering? Which method of conditional rendering do you prefer to use?","title":"Exercises: Level 1"},{"location":"react/conditional_rendering/#exercises-level-2","text":"Make a single page application which changes the body of the background based on the season of the year(Autumn, Winter, Spring, Summer) Make a single page application which change the body of the background based on the time of the day(Morning, Noon, Evening, Night)","title":"Exercises: Level 2"},{"location":"react/conditional_rendering/#exercises-level-3","text":"","title":"Exercises: Level 3"},{"location":"react/context/","text":"Context Context is a very important tool to pass states and props to underlying components.","title":"Context"},{"location":"react/context/#context","text":"Context is a very important tool to pass states and props to underlying components.","title":"Context"},{"location":"react/controlled_versus_uncontrolled/","text":"Controlled vs. Uncontrolled If a React component has an element which changes by itself, it's called uncontrolled. If you handle the rendering with React it's called controlled. Examples Controlled You influence controlled inputs by using state and props. Uncontrolled You can influence uncontrolled inputs by using ref and manipulating the DOM element directly. Pitfalls It often happens, when you define a state with an empty default value and use this state as value for your input field. Then you set this state via the onChange method of the input field. What happens then is that a value is being set from undefined -> string . If a prop is undefined it's not defined and there it won't be considered in the DOM element. If you then set the prop the element changes from an uncontrolled to a controlled element. React warns you about this problem. Enter text in the following textfield and check the console.","title":"Controlled vs. Uncontrolled"},{"location":"react/controlled_versus_uncontrolled/#controlled-vs-uncontrolled","text":"If a React component has an element which changes by itself, it's called uncontrolled. If you handle the rendering with React it's called controlled.","title":"Controlled vs. Uncontrolled"},{"location":"react/controlled_versus_uncontrolled/#examples","text":"","title":"Examples"},{"location":"react/controlled_versus_uncontrolled/#controlled","text":"You influence controlled inputs by using state and props.","title":"Controlled"},{"location":"react/controlled_versus_uncontrolled/#uncontrolled","text":"You can influence uncontrolled inputs by using ref and manipulating the DOM element directly.","title":"Uncontrolled"},{"location":"react/controlled_versus_uncontrolled/#pitfalls","text":"It often happens, when you define a state with an empty default value and use this state as value for your input field. Then you set this state via the onChange method of the input field. What happens then is that a value is being set from undefined -> string . If a prop is undefined it's not defined and there it won't be considered in the DOM element. If you then set the prop the element changes from an uncontrolled to a controlled element. React warns you about this problem. Enter text in the following textfield and check the console.","title":"Pitfalls"},{"location":"react/custom_hooks/","text":"Custom Hooks Lets image you want to have a scroll tracker in a lot of components, but you don't want to implement it in every component. Therefore you can implement a custom hook to outsource the logic and have a \"reactive\" hook.","title":"Custom Hooks"},{"location":"react/custom_hooks/#custom-hooks","text":"Lets image you want to have a scroll tracker in a lot of components, but you don't want to implement it in every component. Therefore you can implement a custom hook to outsource the logic and have a \"reactive\" hook.","title":"Custom Hooks"},{"location":"react/events/","text":"Events What is an event? An event is an action or occurrence recognized by a software. To make an event more clear let's use the daily activities we do when we use a computer such as clicking on a button, hover on an image, pressing a keyboard, scrolling the mouse wheel and etc. The react documentation has already a detail note about events . Handling events in React is very similar to handling elements on DOM elements using pure JavaScript. Some of the syntax difference between handling event in React and pure JavaScript: React events are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string. Let's see some examples to understand event handling. Event handling in HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> </ head > < body > < button > onclick=\"greetPeople()\">Greet People </ button > < script > const greetPeople = () => { alert ( \"Welcome\" ); }; </ script > </ body > </ html > In React, it is slightly different import React from \"react\" ; // if it is functional components const App = () => { const greetPeople = ( event ) => { alert ( \"Welcome\" ); }; return < button onClick = { greetPeople } > Welcome < /button>; }; Another difference between HTML and React event is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. For example, with plain HTML, to prevent the default link behavior of opening a new page, you can write: Plain HTML < a href = \"#\" onclick = \"console.log('The link was clicked.'); return false\" > Click me </ a > However, in React it could be as follows:","title":"Events"},{"location":"react/events/#events","text":"","title":"Events"},{"location":"react/events/#what-is-an-event","text":"An event is an action or occurrence recognized by a software. To make an event more clear let's use the daily activities we do when we use a computer such as clicking on a button, hover on an image, pressing a keyboard, scrolling the mouse wheel and etc. The react documentation has already a detail note about events . Handling events in React is very similar to handling elements on DOM elements using pure JavaScript. Some of the syntax difference between handling event in React and pure JavaScript: React events are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string. Let's see some examples to understand event handling. Event handling in HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> </ head > < body > < button > onclick=\"greetPeople()\">Greet People </ button > < script > const greetPeople = () => { alert ( \"Welcome\" ); }; </ script > </ body > </ html > In React, it is slightly different import React from \"react\" ; // if it is functional components const App = () => { const greetPeople = ( event ) => { alert ( \"Welcome\" ); }; return < button onClick = { greetPeople } > Welcome < /button>; }; Another difference between HTML and React event is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. For example, with plain HTML, to prevent the default link behavior of opening a new page, you can write: Plain HTML < a href = \"#\" onclick = \"console.log('The link was clicked.'); return false\" > Click me </ a > However, in React it could be as follows:","title":"What is an event?"},{"location":"react/fetch_and_useQuery/","text":"Requests and Responses To retrieve data from a server, you can use HTTP. The browser has already a pretty \"okayish\" request client called fetch . Fetch React Query Let's build it from scratch! Installation","title":"Requests and Responses"},{"location":"react/fetch_and_useQuery/#requests-and-responses","text":"To retrieve data from a server, you can use HTTP. The browser has already a pretty \"okayish\" request client called fetch .","title":"Requests and Responses"},{"location":"react/fetch_and_useQuery/#fetch","text":"","title":"Fetch"},{"location":"react/fetch_and_useQuery/#react-query","text":"Let's build it from scratch! Installation","title":"React Query"},{"location":"react/forms/","text":"Forms Forms are important to save input from a user and JavaScript was introduced back in the late 90s, to validate input data. Let's first check an example: React Hook Forms React Hook Forms is the goto library for React forms Link . It brings a lot of nice functionality like error handling, states and watches.","title":"Forms"},{"location":"react/forms/#forms","text":"Forms are important to save input from a user and JavaScript was introduced back in the late 90s, to validate input data. Let's first check an example:","title":"Forms"},{"location":"react/forms/#react-hook-forms","text":"React Hook Forms is the goto library for React forms Link . It brings a lot of nice functionality like error handling, states and watches.","title":"React Hook Forms"},{"location":"react/getting_started/","text":"Getting Started This section covers prerequisites to get started with React. You should have a good understanding of the following technologies: HTML CSS JavaScript If you have the skills mentioned above, you will enjoy doing React. The 30 Days Of React challenge contains everything you need to know about react. In every section, it has some exercises and mini-projects, and it is recommended to work on them. This 30 Days Of React challenge will help you learn the latest version of React and the old version, step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples and many hands-on exercises. This challenge is designed for beginners and professionals who want to build a web application using React and JavaScript. Once in a while you may need different dummy data to work with React. You can use the following dummy data generator to generate different data. 1. What is React? React is a JavaScript library for building a reusable user interface(UI). It was initially released on May 29, 2013. The current version is 18.x.x and it is stable. React was created by Facebook. React makes creating UI components very easy. The official React documentation can be found here . When we work with React we do not interact directly with the DOM. React has its own way to handle the DOM(Document Object Model) manipulation. React uses its virtual DOM to make new changes and it updates only the element, that needs changing. Do not directly interact with DOM when you build a React Application and leave the DOM manipulation job for the React virtual DOM. A web application, or a website, is made of buttons, links, forms with different input fields, header, footer, sections, articles, texts, images, audios, videos and boxes with different shapes. We use react to make a reusable UI components of a website. To summarize: React was released in May 2013 React was created by Facebook React is a JavaScript library for building user interfaces React is used to build single page applications - An application which has only one HTML page. React allows us to create reusable UI components React latest release is 18.x.x React versions React official documentation can be found here 2. Why React? React is one of the most popular JavaScript libraries. Many developers and companies have been using it for the last couple of years. Its popularity has been growing fast and it has a huge community. How do we measure popularity? One measure of popularity could be GitHub repository stars, watchers and forks. Let us compare the popularity of React and Vue . As of today, the popularity between the two most popular JavaScript looks like as shown on the diagram. From the diagram, you can speculate the most popular JavaScript library. You may look at the number of watchers, stars and forks for both React and Vue. These alone will not be a very good measure of popularity, but still it tells a little bit about the popularity of the two technologies. If I have to recommend another JavaScript library next to React, it would be Vue.js. React vs Vue popularity in October 2020 React Official GitHub Repository Vue Official GitHub Repository Angular Official GitHub Repository Why we choose to use React ? We use it because of the following reasons: fast modular scalable flexible big community and popular open source High job opportunity 3. JSX JSX stands for JavaScript XML. JSX allows us to write HTML elements with JavaScript code. An HTML element has an opening and closing tags, content, and attribute in the opening tag. However, some HTML elements may not have content and a closing tag - they are self closing elements. To create HTML elements in React we do not use the createElement() instead we just use JSX elements. Therefore, JSX makes it easier to write and add HTML elements in React. JSX will be converted to JavaScript on browser using a transpiler - babel.js . Babel is a library which transpiles JSX to pure JavaScript and latest JavaScript to older version. See the JSX code below. // JSX syntax // we don't need to use quotes with JSX const jsxElement = < h1 > I am a JSX element < /h1>; const welcome = < h1 > Welcome to 30 Days of React Challenge < /h1>; const data = < small > Oct 2 , 2020 < /small>; The above strange looking code seems like JavaScript and it seems like , but it is not JavaScript and it seems like HTML but not completely an HTML element. It is a mix of JavaScript and an HTML elements. JSX can allow us to use HTML in JavaScript. The HTML element in the JSX above is h1 and small . JSX Element As you have seen in the example above, JSX has a JavaScript and HTML like syntax. JSX element could be a single HTML element or many HTML elements wrapped in a parent HTML element. This JSX element has only one HTML element which is h1 . const jsxElement = < h1 > I am a JSX element < /h1>; / / JS with HTML Let's make more JSX elements by declaring a new variable named title and content inside h2 . const title = < h2 > Getting Started React < /h2>; Let us add a subtitles and other contents to this JSX element by adding additional HTML elements. Every HTML element should be wrapped by an outer HTML element to create a valid JSX element. The name title variable also should be changed to header because our JSX element is containing almost all of the header of the application. const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < /header> ); Let us keep adding more elements. Additional HTML elements to display the author name and year. const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); As you can see the header element is a parent element for all the inner HTML elements and JSX must be wrapped by an outer parent element. Without the header HTML element or other parent HTML element the above JSX is invalid. Commenting a JSX element We comment codes for different reasons and it is also good to know how to comment out JSX elements in React. { /* <header> <h1>Welcome to 30 Days Of React</h1> <h2>Getting Started React</h2> <h3>JavaScript Library</h3> <p>Asabeneh Yetayeh</p> <small>Oct 2, 2020</small> </header> */ } Rendering a JSX Element To render a JSX element to HTML document, we should first create an index HTML. The index.html is the only HTML file you will have in any React Application. That is why we say that every React Application is a single page application. Let us create an index.html file. We can get started with React in two ways - either by using CDN or create-react-app. The create-react-app creates a React project boilerplate outbox and because of that, many people do have a hard time to understand how React works. In order to make things clear for absolute beginners I would like to start with a CDN. We use CDN only in this section and we will use the create-reap-app in the rest of the challenge and I also recommend you to use only create-react-app all the time. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script ></ script > </ body > </ html > As you can see from the above index.html, we have one div with a class root and script. The root div is the gateway to connect all react components to the index.html. In the script tag we will write our JavaScript, but the script type will be babel . Babel will transpile the react JSX to pure JavaScript on the browser. Let us add babel to the script. Inside the babel, we can write any pure JavaScript, JSX and in general any React code. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // our code goes here </ script > </ body > </ html > The babel library is linked to our document and now we can make use of it. The next step is importing React and ReactDOM using CDN or link. In order to link React and ReactDOM, we attach both packages from CDN to the body of index.html. To test if React is linked to the index.html, try to check it by doing console.log(React). Open the browser console and you should get an object. If you see an object containing React methods then you managed to link your project with React CDN and you are ready to use React. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > console . log ( React ); </ script > </ body > </ html > Now the index.html has everything we need to write React code. Let us get the root element using document.querySelect('.root') and assign it to a variable name rootElement. The is the only place we directly interact with DOM. Now, you knew JSX and JSX element. Let us render the JSX element on the browser, in order to do so we need the React and ReactDOM library. In addition to the React and ReactDOM we need babel to transpile the JSX to JavaScript code. The ReactDOM package has a method render. The render method takes two arguments:a JSX element or a component and the root document. See the code below. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element const jsxElement = < h1 > I am a JSX element < /h1>; // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two arguments ReactDOM . render ( jsxElement , rootElement ); </ script > </ body > </ html > Let us render more content. To render more content, the JSX element should have more HTML elements. For instance, we can create a header of a website and header may have a title, subtitle, author or date etc. Remember, we can render only one JSX element at a time. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two arguments ReactDOM . render ( header , rootElement ); </ script > </ body > </ html > We have created a JSX element for the header of the website. How about the main and the footer for the website? Similar to the header, let us create a JSX element for the main and the footer. JSX element for the main part of the website. // JSX element const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); JSX element for the footer part of the website. // JSX element const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); Now, we have three JSX elements: the header, main and footer. The best way to render all of the three JSX elements is by wrapping them all in a parent JSX element or putting them in an array. To include JSX element inside another JSX element we use the curly bracket, {} and call the name of the JSX inside the curly bracket. // JSX element for the header part of the website const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // JSX element for the main part of the website const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); // JSX element for the footer part of the website const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); // JSX element which contain all, it is a container or parent const app = ( < div > { header } { main } { footer } < /div> ); Now, let us put everything together and render it to the browser. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // JSX element, main const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); // JSX element, footer const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); // JSX element, app, a container or a parent const app = ( < div > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two argument ReactDOM . render ( app , rootElement ); // or // ReactDOM.render([header, main, footer], rootElement) </ script > </ body > </ html > Let us apply some style to our JSX elements and see the result. . Now, lets us apply style the header part only Live on code pen . Style and className in JSX So far, we did not apply any style in the JSX elements. Now, let us add style to our JSX elements. Inline style became very popular after the emergence of react. Let us add border to the header JSX element. To add style to a JSX element we use inline style or className. We inject the style object using {}. Every CSS property becomes a key and every CSS property value becomes a value for the the object. For instance, in the example below, border is a key and '2px solid orange' is a value, color is a key and 'black' is a value, fontSize is a key and '18px' is a value. All two word CSS properties will change to camelCase when we use them as key in the CSS object in React or JavaScript. Live on code pen . const header = ( < header style = {{ border : \"2px solid orange\" , color : \"black\" , fontSize : \"18px\" }} > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // or we can write it this way const style = { border : \"2px solid orange\" , color : \"black\" , fontSize : \"18px\" }; const header = ( < header style = { style } > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); It is good practice to open the browser console while you are developing your application to know, if everything goes well. Let us keep styling all the JSX elements we have created: the header, main and the footer. We can also use regular internal styling to style our application. Using regular style, to target an HTML element we use tag name, id, class, an attribute and other methods. It is very common in the React developer community - people use classes quite a lot instead of id. In this material, I will use only class instead of id. In JSX element we write className instead of class because class is a reserved word in JavaScript. Similar to className, htmlFor instead of for in label tag. See the example below. const title = < h1 className = \"title\" > Getting Started React < /h1>; const inputField = ( < div > < label htmlFor = \"firstname\" > First Name < /label> < input type = \"text\" id = \"firstname\" placeholder = \"First Name\" /> < /div> ); The id used in the input element is not for styling purpose, instead to refer the label to the input field. If class is used instead of className or for instead of htmlFor you will see such kind of warning. Now, you know how to use the inline style and how to use className. Let us style all the JSX elements. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // style const headerStyles = { backgroundColor : \"#61DBFB\" , fontFamily : \"Helvetica Neue\" , padding : 25 , lineHeight : 1.5 , }; // JSX element, header const header = ( < header style = { headerStyles } > < div className = \"header-wrapper\" > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /div> < /header> ); // JSX element, main const mainStyles = { backgroundColor : \"#F3F0F5\" , }; const main = ( < main style = { mainStyles } > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); const footerStyles = { backgroundColor : \"#61DBFB\" , }; // JSX element, footer const footer = ( < footer style = { footerStyles } > < p > Copyright 2020 < /p> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Instead of style object using regular styling method is more easy than the one above. Now, let us use internal style to style all the JSX. It is also possible to use external styling method. Live on code pen <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px ; padding-bottom : 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Instructor : Asabeneh Yetayeh < /p> < small > Date : Oct 1 , 2020 < /small> < /div> < /header> ); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /div> < /main> ); // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > Copyright 2020 < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Injecting data to a JSX Element So far, we used static data on the JSX elements, but we can also pass different data types as a dynamic data. The dynamic data could be string, number, boolean, array or object. Let us see each of the data types step by step. To inject data to a JSX we use the {} bracket. const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const authorFirstName = \"Asabeneh\" ; const authorLastName = \"Yetayeh\" ; const date = \"Oct 1, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { authorFirstName } { authorLastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); Similar to the header JSX element, we can implement data injection to main and footer JSX elements. Injecting a string to a JSX Element In this section we inject only strings const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const firstName = \"Asabeneh\" ; const lastName = \"Yetayeh\" ; const date = \"Oct 2, 2020\" ; // JSX element, header // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { firstName } { lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); Injecting a number to a JSX Element const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = < p > { age } < /p>; As you can see in the example above, it is possible to do some arithmetic calculations and ternary operations. Injecting an array to a JSX Element To give an example for an array, let us change the HTML, CSS, JavaScript to an array and inject it to the main JSX element below. We will cover more in much detail later, in rendering lists section. const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techs } < /ul> < /div> < /main> ); Injecting an object to a JSX Element We can inject string, number, boolean, array data to JSX but we cannot directly inject an object. We should extract object values first or destructure the content of the object before we inject the data to the JSX element. For instance, let us write firstName and lastName inside an object and extract them to use them inside JSX. Now, let us put everything together. Here, in the example below, the data is injected dynamically to the JSX. Live on code pen <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px 10 px 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techs } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > As you can see the lists are all in one line. Therefore, we should format the list the way we want, before we inject it to JSX. In order to format the list, we should modify the array before we will inject it to JSX. We can modify the array using map . As a react developer you should have a very good understanding of functional programming(map, filter, reduce, find, some, every). If you don't have good understanding of functional programming, check out day 1. const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); In the following code example, the list is now containing list elements and it is formatted properly. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px 10 px 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React Challenge\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Rendering lists As you can see above, now the lists are formatted properly, but there is a warning on the console, which says each list child should have a unique key. In the array, we do not have id, but it is common to pass id as a unique value, when you have id in your data. Now, let us just pass each item with a unique key to remove the warning. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px ; padding-bottom : 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React Challenge\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = 2020 ; const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li key = { tech } > { tech } < /li>); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html >","title":"Getting Started"},{"location":"react/getting_started/#getting-started","text":"This section covers prerequisites to get started with React. You should have a good understanding of the following technologies: HTML CSS JavaScript If you have the skills mentioned above, you will enjoy doing React. The 30 Days Of React challenge contains everything you need to know about react. In every section, it has some exercises and mini-projects, and it is recommended to work on them. This 30 Days Of React challenge will help you learn the latest version of React and the old version, step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples and many hands-on exercises. This challenge is designed for beginners and professionals who want to build a web application using React and JavaScript. Once in a while you may need different dummy data to work with React. You can use the following dummy data generator to generate different data.","title":"Getting Started"},{"location":"react/getting_started/#1-what-is-react","text":"React is a JavaScript library for building a reusable user interface(UI). It was initially released on May 29, 2013. The current version is 18.x.x and it is stable. React was created by Facebook. React makes creating UI components very easy. The official React documentation can be found here . When we work with React we do not interact directly with the DOM. React has its own way to handle the DOM(Document Object Model) manipulation. React uses its virtual DOM to make new changes and it updates only the element, that needs changing. Do not directly interact with DOM when you build a React Application and leave the DOM manipulation job for the React virtual DOM. A web application, or a website, is made of buttons, links, forms with different input fields, header, footer, sections, articles, texts, images, audios, videos and boxes with different shapes. We use react to make a reusable UI components of a website. To summarize: React was released in May 2013 React was created by Facebook React is a JavaScript library for building user interfaces React is used to build single page applications - An application which has only one HTML page. React allows us to create reusable UI components React latest release is 18.x.x React versions React official documentation can be found here","title":"1. What is React?"},{"location":"react/getting_started/#2-why-react","text":"React is one of the most popular JavaScript libraries. Many developers and companies have been using it for the last couple of years. Its popularity has been growing fast and it has a huge community. How do we measure popularity? One measure of popularity could be GitHub repository stars, watchers and forks. Let us compare the popularity of React and Vue . As of today, the popularity between the two most popular JavaScript looks like as shown on the diagram. From the diagram, you can speculate the most popular JavaScript library. You may look at the number of watchers, stars and forks for both React and Vue. These alone will not be a very good measure of popularity, but still it tells a little bit about the popularity of the two technologies. If I have to recommend another JavaScript library next to React, it would be Vue.js.","title":"2. Why React?"},{"location":"react/getting_started/#react-vs-vue-popularity-in-october-2020","text":"React Official GitHub Repository Vue Official GitHub Repository Angular Official GitHub Repository Why we choose to use React ? We use it because of the following reasons: fast modular scalable flexible big community and popular open source High job opportunity","title":"React vs Vue popularity in October 2020"},{"location":"react/getting_started/#3-jsx","text":"JSX stands for JavaScript XML. JSX allows us to write HTML elements with JavaScript code. An HTML element has an opening and closing tags, content, and attribute in the opening tag. However, some HTML elements may not have content and a closing tag - they are self closing elements. To create HTML elements in React we do not use the createElement() instead we just use JSX elements. Therefore, JSX makes it easier to write and add HTML elements in React. JSX will be converted to JavaScript on browser using a transpiler - babel.js . Babel is a library which transpiles JSX to pure JavaScript and latest JavaScript to older version. See the JSX code below. // JSX syntax // we don't need to use quotes with JSX const jsxElement = < h1 > I am a JSX element < /h1>; const welcome = < h1 > Welcome to 30 Days of React Challenge < /h1>; const data = < small > Oct 2 , 2020 < /small>; The above strange looking code seems like JavaScript and it seems like , but it is not JavaScript and it seems like HTML but not completely an HTML element. It is a mix of JavaScript and an HTML elements. JSX can allow us to use HTML in JavaScript. The HTML element in the JSX above is h1 and small .","title":"3. JSX"},{"location":"react/getting_started/#jsx-element","text":"As you have seen in the example above, JSX has a JavaScript and HTML like syntax. JSX element could be a single HTML element or many HTML elements wrapped in a parent HTML element. This JSX element has only one HTML element which is h1 . const jsxElement = < h1 > I am a JSX element < /h1>; / / JS with HTML Let's make more JSX elements by declaring a new variable named title and content inside h2 . const title = < h2 > Getting Started React < /h2>; Let us add a subtitles and other contents to this JSX element by adding additional HTML elements. Every HTML element should be wrapped by an outer HTML element to create a valid JSX element. The name title variable also should be changed to header because our JSX element is containing almost all of the header of the application. const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < /header> ); Let us keep adding more elements. Additional HTML elements to display the author name and year. const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); As you can see the header element is a parent element for all the inner HTML elements and JSX must be wrapped by an outer parent element. Without the header HTML element or other parent HTML element the above JSX is invalid.","title":"JSX Element"},{"location":"react/getting_started/#commenting-a-jsx-element","text":"We comment codes for different reasons and it is also good to know how to comment out JSX elements in React. { /* <header> <h1>Welcome to 30 Days Of React</h1> <h2>Getting Started React</h2> <h3>JavaScript Library</h3> <p>Asabeneh Yetayeh</p> <small>Oct 2, 2020</small> </header> */ }","title":"Commenting a JSX element"},{"location":"react/getting_started/#rendering-a-jsx-element","text":"To render a JSX element to HTML document, we should first create an index HTML. The index.html is the only HTML file you will have in any React Application. That is why we say that every React Application is a single page application. Let us create an index.html file. We can get started with React in two ways - either by using CDN or create-react-app. The create-react-app creates a React project boilerplate outbox and because of that, many people do have a hard time to understand how React works. In order to make things clear for absolute beginners I would like to start with a CDN. We use CDN only in this section and we will use the create-reap-app in the rest of the challenge and I also recommend you to use only create-react-app all the time. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script ></ script > </ body > </ html > As you can see from the above index.html, we have one div with a class root and script. The root div is the gateway to connect all react components to the index.html. In the script tag we will write our JavaScript, but the script type will be babel . Babel will transpile the react JSX to pure JavaScript on the browser. Let us add babel to the script. Inside the babel, we can write any pure JavaScript, JSX and in general any React code. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // our code goes here </ script > </ body > </ html > The babel library is linked to our document and now we can make use of it. The next step is importing React and ReactDOM using CDN or link. In order to link React and ReactDOM, we attach both packages from CDN to the body of index.html. To test if React is linked to the index.html, try to check it by doing console.log(React). Open the browser console and you should get an object. If you see an object containing React methods then you managed to link your project with React CDN and you are ready to use React. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > console . log ( React ); </ script > </ body > </ html > Now the index.html has everything we need to write React code. Let us get the root element using document.querySelect('.root') and assign it to a variable name rootElement. The is the only place we directly interact with DOM. Now, you knew JSX and JSX element. Let us render the JSX element on the browser, in order to do so we need the React and ReactDOM library. In addition to the React and ReactDOM we need babel to transpile the JSX to JavaScript code. The ReactDOM package has a method render. The render method takes two arguments:a JSX element or a component and the root document. See the code below. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element const jsxElement = < h1 > I am a JSX element < /h1>; // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two arguments ReactDOM . render ( jsxElement , rootElement ); </ script > </ body > </ html > Let us render more content. To render more content, the JSX element should have more HTML elements. For instance, we can create a header of a website and header may have a title, subtitle, author or date etc. Remember, we can render only one JSX element at a time. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two arguments ReactDOM . render ( header , rootElement ); </ script > </ body > </ html > We have created a JSX element for the header of the website. How about the main and the footer for the website? Similar to the header, let us create a JSX element for the main and the footer. JSX element for the main part of the website. // JSX element const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); JSX element for the footer part of the website. // JSX element const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); Now, we have three JSX elements: the header, main and footer. The best way to render all of the three JSX elements is by wrapping them all in a parent JSX element or putting them in an array. To include JSX element inside another JSX element we use the curly bracket, {} and call the name of the JSX inside the curly bracket. // JSX element for the header part of the website const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // JSX element for the main part of the website const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); // JSX element for the footer part of the website const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); // JSX element which contain all, it is a container or parent const app = ( < div > { header } { main } { footer } < /div> ); Now, let us put everything together and render it to the browser. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // JSX element, main const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); // JSX element, footer const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); // JSX element, app, a container or a parent const app = ( < div > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two argument ReactDOM . render ( app , rootElement ); // or // ReactDOM.render([header, main, footer], rootElement) </ script > </ body > </ html > Let us apply some style to our JSX elements and see the result. . Now, lets us apply style the header part only Live on code pen .","title":"Rendering a JSX Element"},{"location":"react/getting_started/#style-and-classname-in-jsx","text":"So far, we did not apply any style in the JSX elements. Now, let us add style to our JSX elements. Inline style became very popular after the emergence of react. Let us add border to the header JSX element. To add style to a JSX element we use inline style or className. We inject the style object using {}. Every CSS property becomes a key and every CSS property value becomes a value for the the object. For instance, in the example below, border is a key and '2px solid orange' is a value, color is a key and 'black' is a value, fontSize is a key and '18px' is a value. All two word CSS properties will change to camelCase when we use them as key in the CSS object in React or JavaScript. Live on code pen . const header = ( < header style = {{ border : \"2px solid orange\" , color : \"black\" , fontSize : \"18px\" }} > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // or we can write it this way const style = { border : \"2px solid orange\" , color : \"black\" , fontSize : \"18px\" }; const header = ( < header style = { style } > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); It is good practice to open the browser console while you are developing your application to know, if everything goes well. Let us keep styling all the JSX elements we have created: the header, main and the footer. We can also use regular internal styling to style our application. Using regular style, to target an HTML element we use tag name, id, class, an attribute and other methods. It is very common in the React developer community - people use classes quite a lot instead of id. In this material, I will use only class instead of id. In JSX element we write className instead of class because class is a reserved word in JavaScript. Similar to className, htmlFor instead of for in label tag. See the example below. const title = < h1 className = \"title\" > Getting Started React < /h1>; const inputField = ( < div > < label htmlFor = \"firstname\" > First Name < /label> < input type = \"text\" id = \"firstname\" placeholder = \"First Name\" /> < /div> ); The id used in the input element is not for styling purpose, instead to refer the label to the input field. If class is used instead of className or for instead of htmlFor you will see such kind of warning. Now, you know how to use the inline style and how to use className. Let us style all the JSX elements. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // style const headerStyles = { backgroundColor : \"#61DBFB\" , fontFamily : \"Helvetica Neue\" , padding : 25 , lineHeight : 1.5 , }; // JSX element, header const header = ( < header style = { headerStyles } > < div className = \"header-wrapper\" > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /div> < /header> ); // JSX element, main const mainStyles = { backgroundColor : \"#F3F0F5\" , }; const main = ( < main style = { mainStyles } > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); const footerStyles = { backgroundColor : \"#61DBFB\" , }; // JSX element, footer const footer = ( < footer style = { footerStyles } > < p > Copyright 2020 < /p> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Instead of style object using regular styling method is more easy than the one above. Now, let us use internal style to style all the JSX. It is also possible to use external styling method. Live on code pen <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px ; padding-bottom : 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Instructor : Asabeneh Yetayeh < /p> < small > Date : Oct 1 , 2020 < /small> < /div> < /header> ); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /div> < /main> ); // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > Copyright 2020 < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html >","title":"Style and className in JSX"},{"location":"react/getting_started/#injecting-data-to-a-jsx-element","text":"So far, we used static data on the JSX elements, but we can also pass different data types as a dynamic data. The dynamic data could be string, number, boolean, array or object. Let us see each of the data types step by step. To inject data to a JSX we use the {} bracket. const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const authorFirstName = \"Asabeneh\" ; const authorLastName = \"Yetayeh\" ; const date = \"Oct 1, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { authorFirstName } { authorLastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); Similar to the header JSX element, we can implement data injection to main and footer JSX elements.","title":"Injecting data to a JSX Element"},{"location":"react/getting_started/#injecting-a-string-to-a-jsx-element","text":"In this section we inject only strings const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const firstName = \"Asabeneh\" ; const lastName = \"Yetayeh\" ; const date = \"Oct 2, 2020\" ; // JSX element, header // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { firstName } { lastName } < /p> < small > Date : { date } < /small> < /div> < /header> );","title":"Injecting a string to a JSX Element"},{"location":"react/getting_started/#injecting-a-number-to-a-jsx-element","text":"const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = < p > { age } < /p>; As you can see in the example above, it is possible to do some arithmetic calculations and ternary operations.","title":"Injecting a number to a JSX Element"},{"location":"react/getting_started/#injecting-an-array-to-a-jsx-element","text":"To give an example for an array, let us change the HTML, CSS, JavaScript to an array and inject it to the main JSX element below. We will cover more in much detail later, in rendering lists section. const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techs } < /ul> < /div> < /main> );","title":"Injecting an array to a JSX Element"},{"location":"react/getting_started/#injecting-an-object-to-a-jsx-element","text":"We can inject string, number, boolean, array data to JSX but we cannot directly inject an object. We should extract object values first or destructure the content of the object before we inject the data to the JSX element. For instance, let us write firstName and lastName inside an object and extract them to use them inside JSX. Now, let us put everything together. Here, in the example below, the data is injected dynamically to the JSX. Live on code pen <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px 10 px 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techs } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > As you can see the lists are all in one line. Therefore, we should format the list the way we want, before we inject it to JSX. In order to format the list, we should modify the array before we will inject it to JSX. We can modify the array using map . As a react developer you should have a very good understanding of functional programming(map, filter, reduce, find, some, every). If you don't have good understanding of functional programming, check out day 1. const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); In the following code example, the list is now containing list elements and it is formatted properly. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px 10 px 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React Challenge\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Rendering lists As you can see above, now the lists are formatted properly, but there is a warning on the console, which says each list child should have a unique key. In the array, we do not have id, but it is common to pass id as a unique value, when you have id in your data. Now, let us just pass each item with a unique key to remove the warning. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px ; padding-bottom : 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React Challenge\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = 2020 ; const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li key = { tech } > { tech } < /li>); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html >","title":"Injecting an object to a JSX Element"},{"location":"react/hooks/","text":"React Hooks Hooks are a new addition in React 16.8. They allow you use state, life cycle methods and other React features without writing a class component. If we are using hooks we can have only a functional component in the entire application. For more detail explanation you check React documentation . Different hooks have been introduced to React: Basic hooks and additional hooks Basic Hooks The basic hooks are: useState useEffect useContext State Hook Using hooks we can access state. To use hooks, first we should import the useState hooks from react. The useState is a function which takes one argument (the initial value) and returns an array of the current state and a function that lets you update it. State with Data Types If you use useState with primitive data types, there is no problem by using operators to set the state with the current value, like in our example above. But if you use non-primitive data types you can't just change the value and set it, you have to create a \"new\" object or copy the old one and set it: Here is a bad example, which won't work: Here is the fixed example: The same happens to arrays: Here is the fixed examle: When a state changes, React will check if the state is used somewhere and update the element . Effect Hook Effects happen, when a state or a prop changes. To watch for changes and do a sideeffect (not computing a value or not preparing a callback) you can use useEffect . Context useContext will be discussed later in the Context chapter. Additional Hooks Additional Hooks can be used to express specific statements or to speed up your code. useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue useDeferredValue useTransition useId Reducer Reducer are handy if you have multiple actions for the same state. For example, if you work on the same state with different functions, then a reducer can be used to define the actions on a state in one place: Callbacks Callbacks are important to pass a behaviour into a component from an outer scope. Let's check this example first: You see that an update of our states results in an update for our buttons. Let's improve the code by using useCallback to listen for specific changes: Now the buttons does not update if the other button gets clicked. This can lead to massive performance improvements. Memo If you have some operations, which take a lot of computing time, useMemo . Actually I would say, use always useMemo if you calculate something depending on a state or prop. Here is a bad example: Here we use useMemo , additionally we define the dependency: Ref What if you need to access to the actual html element in the dom, to call a function on the element? You can useRef for that: Imperative Handle Layout Effect useLayoutEffect works the same way useEffect works. The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint. Debug Value useDebugValue shows a value in React DevTools. function useFriendStatus ( friendID ) { const [ isOnline , setIsOnline ] = useState ( null ); // Show a label in DevTools next to this Hook // e.g. \"FriendStatus: Online\" useDebugValue ( isOnline ? \"Online\" : \"Offline\" ); return isOnline ; } Deferred Value useDeferredValue receives a state variable and returns a new state variable, which will wait until all rendering finishes for the given state variable and then rerenders the deferred value. function Typeahead () { const query = useSearchQuery ( \"\" ); const deferredQuery = useDeferredValue ( query ); // Memoizing tells React to only re-render when deferredQuery changes, // not when query changes. const suggestions = useMemo ( () => < SearchSuggestions query = { deferredQuery } /> , [ deferredQuery ] ); return ( <> < SearchInput query = { query } /> < Suspense fallback = \"Loading results...\" > { suggestions } < /Suspense> < /> ); } Transition useTransition can handle loading states. ID useId is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches. Warning useId is not for generating keys in a list. Keys should be generated from your data. function Checkbox () { const id = useId (); return ( <> < label htmlFor = { id } > Do you like React ?< /label> < input id = { id } type = \"checkbox\" name = \"react\" /> < /> ); }","title":"React Hooks"},{"location":"react/hooks/#react-hooks","text":"Hooks are a new addition in React 16.8. They allow you use state, life cycle methods and other React features without writing a class component. If we are using hooks we can have only a functional component in the entire application. For more detail explanation you check React documentation . Different hooks have been introduced to React: Basic hooks and additional hooks","title":"React Hooks"},{"location":"react/hooks/#basic-hooks","text":"The basic hooks are: useState useEffect useContext","title":"Basic Hooks"},{"location":"react/hooks/#state-hook","text":"Using hooks we can access state. To use hooks, first we should import the useState hooks from react. The useState is a function which takes one argument (the initial value) and returns an array of the current state and a function that lets you update it.","title":"State Hook"},{"location":"react/hooks/#state-with-data-types","text":"If you use useState with primitive data types, there is no problem by using operators to set the state with the current value, like in our example above. But if you use non-primitive data types you can't just change the value and set it, you have to create a \"new\" object or copy the old one and set it: Here is a bad example, which won't work: Here is the fixed example: The same happens to arrays: Here is the fixed examle: When a state changes, React will check if the state is used somewhere and update the element .","title":"State with Data Types"},{"location":"react/hooks/#effect-hook","text":"Effects happen, when a state or a prop changes. To watch for changes and do a sideeffect (not computing a value or not preparing a callback) you can use useEffect .","title":"Effect Hook"},{"location":"react/hooks/#context","text":"useContext will be discussed later in the Context chapter.","title":"Context"},{"location":"react/hooks/#additional-hooks","text":"Additional Hooks can be used to express specific statements or to speed up your code. useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue useDeferredValue useTransition useId","title":"Additional Hooks"},{"location":"react/hooks/#reducer","text":"Reducer are handy if you have multiple actions for the same state. For example, if you work on the same state with different functions, then a reducer can be used to define the actions on a state in one place:","title":"Reducer"},{"location":"react/hooks/#callbacks","text":"Callbacks are important to pass a behaviour into a component from an outer scope. Let's check this example first: You see that an update of our states results in an update for our buttons. Let's improve the code by using useCallback to listen for specific changes: Now the buttons does not update if the other button gets clicked. This can lead to massive performance improvements.","title":"Callbacks"},{"location":"react/hooks/#memo","text":"If you have some operations, which take a lot of computing time, useMemo . Actually I would say, use always useMemo if you calculate something depending on a state or prop. Here is a bad example: Here we use useMemo , additionally we define the dependency:","title":"Memo"},{"location":"react/hooks/#ref","text":"What if you need to access to the actual html element in the dom, to call a function on the element? You can useRef for that:","title":"Ref"},{"location":"react/hooks/#imperative-handle","text":"","title":"Imperative Handle"},{"location":"react/hooks/#layout-effect","text":"useLayoutEffect works the same way useEffect works. The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.","title":"Layout Effect"},{"location":"react/hooks/#debug-value","text":"useDebugValue shows a value in React DevTools. function useFriendStatus ( friendID ) { const [ isOnline , setIsOnline ] = useState ( null ); // Show a label in DevTools next to this Hook // e.g. \"FriendStatus: Online\" useDebugValue ( isOnline ? \"Online\" : \"Offline\" ); return isOnline ; }","title":"Debug Value"},{"location":"react/hooks/#deferred-value","text":"useDeferredValue receives a state variable and returns a new state variable, which will wait until all rendering finishes for the given state variable and then rerenders the deferred value. function Typeahead () { const query = useSearchQuery ( \"\" ); const deferredQuery = useDeferredValue ( query ); // Memoizing tells React to only re-render when deferredQuery changes, // not when query changes. const suggestions = useMemo ( () => < SearchSuggestions query = { deferredQuery } /> , [ deferredQuery ] ); return ( <> < SearchInput query = { query } /> < Suspense fallback = \"Loading results...\" > { suggestions } < /Suspense> < /> ); }","title":"Deferred Value"},{"location":"react/hooks/#transition","text":"useTransition can handle loading states.","title":"Transition"},{"location":"react/hooks/#id","text":"useId is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches. Warning useId is not for generating keys in a list. Keys should be generated from your data. function Checkbox () { const id = useId (); return ( <> < label htmlFor = { id } > Do you like React ?< /label> < input id = { id } type = \"checkbox\" name = \"react\" /> < /> ); }","title":"ID"},{"location":"react/map_list_keys/","text":"Mapping arrays An array is the most frequently used data structure to handle many kinds of problems. In React, we use map to modify an array to list of JSX by adding a certain HTML elements to each element of an array. Mapping and rendering arrays Most of the time data is in the form of an array or an array of objects. To render this array or array of objects most of the time we modify the data using .map() . In the previous section, we have rendered the techs list using a map method. In this section, we will see more examples. In the following examples, you will see how we render an array of numbers, an array of strings, an array of countries and an array of skills on the browser. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App () { return ( < div > < h1 > Numbers List < /h1> {[ 1 , 2 , 3 , 4 , 5 ]} < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); If you check the browser, you will see the numbers are attached together in one line. To avoid this, we modify the array and change the array elements to JSX element. See the example below, the array has been modified to a list of JSX elements. Mapping array of numbers import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Numbers ({ numbers }) { const list = numbers . map (( number ) => < li > { number } < /li>); return list ; } function App () { return ( < div > < h1 > Numbers List < /h1> < Numbers numbers = {[ 1 , 2 , 3 , 4 , 5 ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Mapping array of objects Rendering array of objects import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Country ({ country : { name , city } }) { return ( < div key = { name } > < h1 > { name } < /h1> < small > { city } < /small> < /div> ); } function Countries ({ countries }) { return ( < div > { countries . map (( country ) => ( < Country country = { country } /> ))} < /div> ); } function App () { return ( < div > < h1 > Countries List < /h1> < Countries countries = {[ { name : \"Finland\" , city : \"Helsinki\" }, { name : \"Sweden\" , city : \"Stockholm\" }, { name : \"Denmark\" , city : \"Copenhagen\" }, { name : \"Norway\" , city : \"Oslo\" }, { name : \"Iceland\" , city : \"Reykjav\u00edk\" }, ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Key in mapping arrays Keys help React to identify items which have changed, added, or removed. Keys should be given to the elements inside the array to give the elements a stable identity. The key should be unique. Mostly data will come with as an id and we can use id as key. If we do not pass key to React during mapping it raises a warning on the browser. If the data does not have an id we have to find a way to create a unique identifier for each element when we map it. See the following example: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Country ({ country : { name , city } }) { return ( < div key = { name } > < h1 > { name } < /h1> < small > { city } < /small> < /div> ); } function Countries ({ countries }) { return ( < div > { countries . map (( country ) => ( < Country key = { country . name } country = { country } /> ))} < /div> ); } function App () { return ( < div > < h1 > Countries List < /h1> < Countries countries = {[ { name : \"Finland\" , city : \"Helsinki\" }, { name : \"Sweden\" , city : \"Stockholm\" }, { name : \"Denmark\" , city : \"Copenhagen\" }, { name : \"Norway\" , city : \"Oslo\" }, { name : \"Iceland\" , city : \"Reykjav\u00edk\" }, ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Mapping arrays"},{"location":"react/map_list_keys/#mapping-arrays","text":"An array is the most frequently used data structure to handle many kinds of problems. In React, we use map to modify an array to list of JSX by adding a certain HTML elements to each element of an array.","title":"Mapping arrays"},{"location":"react/map_list_keys/#mapping-and-rendering-arrays","text":"Most of the time data is in the form of an array or an array of objects. To render this array or array of objects most of the time we modify the data using .map() . In the previous section, we have rendered the techs list using a map method. In this section, we will see more examples. In the following examples, you will see how we render an array of numbers, an array of strings, an array of countries and an array of skills on the browser. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App () { return ( < div > < h1 > Numbers List < /h1> {[ 1 , 2 , 3 , 4 , 5 ]} < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); If you check the browser, you will see the numbers are attached together in one line. To avoid this, we modify the array and change the array elements to JSX element. See the example below, the array has been modified to a list of JSX elements.","title":"Mapping and rendering arrays"},{"location":"react/map_list_keys/#mapping-array-of-numbers","text":"import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Numbers ({ numbers }) { const list = numbers . map (( number ) => < li > { number } < /li>); return list ; } function App () { return ( < div > < h1 > Numbers List < /h1> < Numbers numbers = {[ 1 , 2 , 3 , 4 , 5 ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Mapping array of numbers"},{"location":"react/map_list_keys/#mapping-array-of-objects","text":"Rendering array of objects import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Country ({ country : { name , city } }) { return ( < div key = { name } > < h1 > { name } < /h1> < small > { city } < /small> < /div> ); } function Countries ({ countries }) { return ( < div > { countries . map (( country ) => ( < Country country = { country } /> ))} < /div> ); } function App () { return ( < div > < h1 > Countries List < /h1> < Countries countries = {[ { name : \"Finland\" , city : \"Helsinki\" }, { name : \"Sweden\" , city : \"Stockholm\" }, { name : \"Denmark\" , city : \"Copenhagen\" }, { name : \"Norway\" , city : \"Oslo\" }, { name : \"Iceland\" , city : \"Reykjav\u00edk\" }, ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Mapping array of objects"},{"location":"react/map_list_keys/#key-in-mapping-arrays","text":"Keys help React to identify items which have changed, added, or removed. Keys should be given to the elements inside the array to give the elements a stable identity. The key should be unique. Mostly data will come with as an id and we can use id as key. If we do not pass key to React during mapping it raises a warning on the browser. If the data does not have an id we have to find a way to create a unique identifier for each element when we map it. See the following example: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Country ({ country : { name , city } }) { return ( < div key = { name } > < h1 > { name } < /h1> < small > { city } < /small> < /div> ); } function Countries ({ countries }) { return ( < div > { countries . map (( country ) => ( < Country key = { country . name } country = { country } /> ))} < /div> ); } function App () { return ( < div > < h1 > Countries List < /h1> < Countries countries = {[ { name : \"Finland\" , city : \"Helsinki\" }, { name : \"Sweden\" , city : \"Stockholm\" }, { name : \"Denmark\" , city : \"Copenhagen\" }, { name : \"Norway\" , city : \"Oslo\" }, { name : \"Iceland\" , city : \"Reykjav\u00edk\" }, ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Key in mapping arrays"},{"location":"react/project_structure/","text":"Project Structure TBD","title":"Project Structure"},{"location":"react/project_structure/#project-structure","text":"TBD","title":"Project Structure"},{"location":"react/props/","text":"Props What is props? Props is a special keyword in React that stands for properties and is being used to pass data from one component to another and mostly from parent component to child component. We can say props is a data carrier or a means to transport data. I hope you are familiar with the JavaScript function. Most of the time, functions with parameters are smart and they can take dynamic data likewise props is a way we pass data or parameter to a component. Let's see the difference between a function and a component. // function syntax const getUserInfo = ( firstName , lastName , country ) => { return ` ${ firstName } ${ lastName } . Lives in ${ country } .` ; }; // calling a functons getUserInfo ( \"Asabeneh\" , \"Yeteyeh\" , \"Finland\" ); //component syntax // User component, component should start with an uppercase function User ( props ) { return ( < div > < h1 > { props . firstName } { props . lastName } < /h1> < small > { props . country } < /small> < /div> ); } // calling or instantiating a component, this component has three properties and we call them props:firstName, lastName, country < User firstName = { \"Asabeneh\" } lastName = { \"Yetayeh\" } country = { \"Finland\" } /> ; In the previous section, we injected data as follows and today we will change these data to props. const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 4, 2020\" ; // Header Component function Header () { return ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > { author . firstName } { author . lastName } < /p> < small > { date } < /small> < /div> < /header> ); } Instead of injecting data we can also pass the data as props. React props are similar to parameters in functions. Props object React props is an object which you get instantly when you create a React component. Before we pass properties to the component, let's check what do we get in the props object. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Header ( props ) { console . log ( props ); // empty object, {} return ( < header > < div > < h1 > {} < /h1> < h2 > {} < /h2> < h3 > {} < /h3> < p > {} {} < /p> < small > {} < /small> < /div> < /header> ); } function App () { return ( < div > < Header /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); In the above console.log(props), you would get an empty object({}). That means if you do not pass any attributes or properties when you instantiate the component, the props will be empty otherwise it will be populated with the data you passed as attributes and the proper name of these attributes are props. Let's start with a simple example. In the example below, the welcome string has been passed as props in the Header components. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Header ( props ) { console . log ( props ); // empty object, {} return ( < header > < div > < h1 > { props . welcome } < /h1> < p > { props . firstName } { props . lastName } < /p> < /div> < /header> ); } function App () { return ( < div > < Header welcome = { \"Welcome to Webengineering\" } author = {{ firstName : \"Michael\" , lastName : \"Bykovski\" }} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Now, when you do console.log(props) you should get the following object, that means the welcome property we passed to the Header component can be found inside the props object. { \"welcome\" : \"Welcome to Webengineering\" , \"author\" : { \"firstName\" : \"Michael\" , \"lastName\" : \"Bykovski\" } } As you can see in the above code, we passed only single props to Header component, the welcome props. A component can have one or many props. Props could be different data types. It could be a string, number, boolean, array, object or a function. We will cover different kind of props in the next sections. Different data type props String props type The data type of the props we pass an attribute to the component is a string. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . text } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App text = { \"Hello World!\" } /> < /React.StrictMode> ); Since you are a JavaScript ninja by now, you know what do do with this object. As you can see from the above example, the value of the props are written statically. However, if we want to apply some logic it is hard to implement with statically written data, so it will be better to use a variable as props. Let's see the following example: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . text } < /div>; } const text = \"Hello World\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App text = { text } /> < /React.StrictMode> ); Number props type Let's use a number props to a component import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . year } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App year = { 2022 } /> < /React.StrictMode> ); Boolean props type We can pass boolean data types to a React component. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . show ? \"Is shown\" : \"Not shown\" } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App show = { true } /> < /React.StrictMode> ); Array props type In programming arrays and objects are the most frequently used data structure to solve different problems and store data in a more structured way. Therefore, we encounter data in the form of an array quite often. Let's pass an array as props to a component import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . skills } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App skills = {[ \"HTML\" , \"CSS\" , \"JavaScript\" ]} /> < /React.StrictMode> ); If you see the result on the browser, the skills elements needs formatting. Therefore before we render, it should have some elements between each skill. To modify the array and to add a li element we can use map method. You should be very familiar with the functional programming map, filter and reduce to feel good at React if not please go back to day 1 JavaScript refresher. Let's apply map to modify the array. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return ( < ul > { props . skills . map (( skill ) => ( < li > { skill } < /li> ))} < /ul> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App skills = {[ \"HTML\" , \"CSS\" , \"JavaScript\" ]} /> < /React.StrictMode> ); We will go in-depth about list and map in other sections. Now, let's see an object as a props. Object props type We may pass an object as props to a React component. Let's see an example. We can change the previous Header props to object. For the time being let's change a few properties for better understanding. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return ( < div > { props . author . firstName } { props . author . age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); When we use an object as props we usually destructure the data to access the values. Destructuring makes our code easy to read. We will soon see the destructuring of props but before that let's see function as props for a React component. Function prop types We can pass a function as props type to a React component. Let's see some examples import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < button onClick = { props . onClick } > Click < /button>; } const sayHi = ( event ) => { console . log ( event ); console . log ( \"Hi\" ); }; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App onClick = { sayHi } /> < /React.StrictMode> ); Even we can write a function inside the curly bracket import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < button onClick = { props . onClick } > Click < /button>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App onClick = {( event ) => { console . log ( event ); console . log ( \"Hi\" ); }} /> < /React.StrictMode> ); Destructuring props By now, I believe you are a JavaScript ninja and you know about destructing arrays and objects. Destructuring code to some extent makes easy to read. Let us destructure the props in Header component. Everything we passed as props is stored in props object. Therefore, props is an object and we can destructure the properties. Let's destructure some of the props we wrote in object props example. We can destructure in many ways: Step by step destructuring import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { const { author : { firstName , age }, } = props ; return ( < div > { firstName } { age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); Destructuring in one line import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ({ author : { firstName , age } }) { return ( < div > { firstName } { age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); Default Props You can define default or optional props, by assigning values or defining undefined to them: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ({ author : { firstName = \"Default\" , age = null } }) { return ( < div > { firstName } { age === null ? \"No age defined\" : age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" }} /> < /React.StrictMode> );","title":"Props"},{"location":"react/props/#props","text":"","title":"Props"},{"location":"react/props/#what-is-props","text":"Props is a special keyword in React that stands for properties and is being used to pass data from one component to another and mostly from parent component to child component. We can say props is a data carrier or a means to transport data. I hope you are familiar with the JavaScript function. Most of the time, functions with parameters are smart and they can take dynamic data likewise props is a way we pass data or parameter to a component. Let's see the difference between a function and a component. // function syntax const getUserInfo = ( firstName , lastName , country ) => { return ` ${ firstName } ${ lastName } . Lives in ${ country } .` ; }; // calling a functons getUserInfo ( \"Asabeneh\" , \"Yeteyeh\" , \"Finland\" ); //component syntax // User component, component should start with an uppercase function User ( props ) { return ( < div > < h1 > { props . firstName } { props . lastName } < /h1> < small > { props . country } < /small> < /div> ); } // calling or instantiating a component, this component has three properties and we call them props:firstName, lastName, country < User firstName = { \"Asabeneh\" } lastName = { \"Yetayeh\" } country = { \"Finland\" } /> ; In the previous section, we injected data as follows and today we will change these data to props. const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 4, 2020\" ; // Header Component function Header () { return ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > { author . firstName } { author . lastName } < /p> < small > { date } < /small> < /div> < /header> ); } Instead of injecting data we can also pass the data as props. React props are similar to parameters in functions.","title":"What is props?"},{"location":"react/props/#props-object","text":"React props is an object which you get instantly when you create a React component. Before we pass properties to the component, let's check what do we get in the props object. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Header ( props ) { console . log ( props ); // empty object, {} return ( < header > < div > < h1 > {} < /h1> < h2 > {} < /h2> < h3 > {} < /h3> < p > {} {} < /p> < small > {} < /small> < /div> < /header> ); } function App () { return ( < div > < Header /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); In the above console.log(props), you would get an empty object({}). That means if you do not pass any attributes or properties when you instantiate the component, the props will be empty otherwise it will be populated with the data you passed as attributes and the proper name of these attributes are props. Let's start with a simple example. In the example below, the welcome string has been passed as props in the Header components. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Header ( props ) { console . log ( props ); // empty object, {} return ( < header > < div > < h1 > { props . welcome } < /h1> < p > { props . firstName } { props . lastName } < /p> < /div> < /header> ); } function App () { return ( < div > < Header welcome = { \"Welcome to Webengineering\" } author = {{ firstName : \"Michael\" , lastName : \"Bykovski\" }} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Now, when you do console.log(props) you should get the following object, that means the welcome property we passed to the Header component can be found inside the props object. { \"welcome\" : \"Welcome to Webengineering\" , \"author\" : { \"firstName\" : \"Michael\" , \"lastName\" : \"Bykovski\" } } As you can see in the above code, we passed only single props to Header component, the welcome props. A component can have one or many props. Props could be different data types. It could be a string, number, boolean, array, object or a function. We will cover different kind of props in the next sections.","title":"Props object"},{"location":"react/props/#different-data-type-props","text":"","title":"Different data type props"},{"location":"react/props/#string-props-type","text":"The data type of the props we pass an attribute to the component is a string. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . text } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App text = { \"Hello World!\" } /> < /React.StrictMode> ); Since you are a JavaScript ninja by now, you know what do do with this object. As you can see from the above example, the value of the props are written statically. However, if we want to apply some logic it is hard to implement with statically written data, so it will be better to use a variable as props. Let's see the following example: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . text } < /div>; } const text = \"Hello World\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App text = { text } /> < /React.StrictMode> );","title":"String props type"},{"location":"react/props/#number-props-type","text":"Let's use a number props to a component import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . year } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App year = { 2022 } /> < /React.StrictMode> );","title":"Number props type"},{"location":"react/props/#boolean-props-type","text":"We can pass boolean data types to a React component. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . show ? \"Is shown\" : \"Not shown\" } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App show = { true } /> < /React.StrictMode> );","title":"Boolean props type"},{"location":"react/props/#array-props-type","text":"In programming arrays and objects are the most frequently used data structure to solve different problems and store data in a more structured way. Therefore, we encounter data in the form of an array quite often. Let's pass an array as props to a component import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . skills } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App skills = {[ \"HTML\" , \"CSS\" , \"JavaScript\" ]} /> < /React.StrictMode> ); If you see the result on the browser, the skills elements needs formatting. Therefore before we render, it should have some elements between each skill. To modify the array and to add a li element we can use map method. You should be very familiar with the functional programming map, filter and reduce to feel good at React if not please go back to day 1 JavaScript refresher. Let's apply map to modify the array. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return ( < ul > { props . skills . map (( skill ) => ( < li > { skill } < /li> ))} < /ul> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App skills = {[ \"HTML\" , \"CSS\" , \"JavaScript\" ]} /> < /React.StrictMode> ); We will go in-depth about list and map in other sections. Now, let's see an object as a props.","title":"Array props type"},{"location":"react/props/#object-props-type","text":"We may pass an object as props to a React component. Let's see an example. We can change the previous Header props to object. For the time being let's change a few properties for better understanding. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return ( < div > { props . author . firstName } { props . author . age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); When we use an object as props we usually destructure the data to access the values. Destructuring makes our code easy to read. We will soon see the destructuring of props but before that let's see function as props for a React component.","title":"Object props type"},{"location":"react/props/#function-prop-types","text":"We can pass a function as props type to a React component. Let's see some examples import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < button onClick = { props . onClick } > Click < /button>; } const sayHi = ( event ) => { console . log ( event ); console . log ( \"Hi\" ); }; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App onClick = { sayHi } /> < /React.StrictMode> ); Even we can write a function inside the curly bracket import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < button onClick = { props . onClick } > Click < /button>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App onClick = {( event ) => { console . log ( event ); console . log ( \"Hi\" ); }} /> < /React.StrictMode> );","title":"Function prop types"},{"location":"react/props/#destructuring-props","text":"By now, I believe you are a JavaScript ninja and you know about destructing arrays and objects. Destructuring code to some extent makes easy to read. Let us destructure the props in Header component. Everything we passed as props is stored in props object. Therefore, props is an object and we can destructure the properties. Let's destructure some of the props we wrote in object props example. We can destructure in many ways: Step by step destructuring import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { const { author : { firstName , age }, } = props ; return ( < div > { firstName } { age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); Destructuring in one line import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ({ author : { firstName , age } }) { return ( < div > { firstName } { age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> );","title":"Destructuring props"},{"location":"react/props/#default-props","text":"You can define default or optional props, by assigning values or defining undefined to them: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ({ author : { firstName = \"Default\" , age = null } }) { return ( < div > { firstName } { age === null ? \"No age defined\" : age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" }} /> < /React.StrictMode> );","title":"Default Props"},{"location":"react/react-router/","text":"React Router Let's build it from scratch! https://reactrouter.com/en/main","title":"React Router"},{"location":"react/react-router/#react-router","text":"Let's build it from scratch! https://reactrouter.com/en/main","title":"React Router"},{"location":"react/setting_up/","text":"Setting Up In the previous section, we learned about JSX and we accessed the React and ReactDOM package using CDN. However, in real projects instead of CDN you will use the create-react-app package to generate a React project starter(boilerplate). The initial create-react-app was released on Jul 22, 2016. Before this time, developers used to configure webpack with a JavaScript module bundler, babel and all the necessary packages manually and this used to take half an hour or maybe more. Now, create-react-app will take care of everything and you will be in charge of only developing the product, instead of spending too much time configuring and setting up projects. Before we start using different tools, let's have a brief introduction to all the tools we are going to use in this challenge. You do not have to understand everything, but I will try to give a very short introduction to some of the tools and technologies that we use when we work with React. Create React App To create a react project you can use one of the following ways. Let's assume you installed node. Open the command line interface (CLI), git bash or terminal on Mac or Linux. Then run the following command. I am using git bash. $ npx create-react-app name-of-your-project If you do not like to write npx every time you create a project you may install create-react-app package globally in your computer using the following command. $ npm install -g create-react-app After you installed create-react-app, you create a React application as follows: $ create-react-app name-of-project Your first React App $ cd Desktop/ $ npx create-react-app react-app $ cd react-app $ yarn start Now your React app should run at localhost 3000. Go to the App.js and modify the content by writing some text, you will see the latest changes on the browser. To stop the server, press Ctr + C in the CLI. React Boilerplate Let's see the React boilerplate, which has been created by create-react-app. Whenever you create a new project, you run create-react-app and name of the project. In the following React boilerplate, there are three folders: node_modules, public and src. In addition, there are .gitignore, README.md, package.json and yarn.lock. Some of you, instead of yarn.lock, you may have package-lock.json. It is good to know these folders and files. node_modules - stores all the necessary node packages of the React applications. /public index.html - the only HTML file we have in the entire application favicon.ico - an icon file manifest.json - is used to make the application a progressive web app other images - open graph images(open graph images are images which are visible when a link share on social media) robots.txt - information, if the website allows web scraping /src App.css, index.css - are different CSS files index.js - a file which allows to connect all the components with index.html App.js - A file where we usually import most of the presentational components App.test.js - Tests with testing library and jest reportWebVitals.js: is useful to collect Web Vitals information setupTests.js - to write testing cases logo.svg - just a svg file package.json - List of packages the applications uses .gitignore - React boilerplate comes with git initiated, and the .gitingore allows files and folders not to be pushed to GitHub README.md - Markdown file to write documentation yarn.lock or package-lock.json - a means to lock the version of the package index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; import \"./index.css\" ; import App from \"./App\" ; import reportWebVitals from \"./reportWebVitals\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < link rel = \"icon\" href = \"%PUBLIC_URL%/favicon.ico\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < meta name = \"theme-color\" content = \"#000000\" /> < meta name = \"description\" content = \"Web site created using create-react-app\" /> < link rel = \"apple-touch-icon\" href = \"%PUBLIC_URL%/logo192.png\" /> <!-- manifest.json provides metadata used when your web app is installed on a user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/ --> < link rel = \"manifest\" href = \"%PUBLIC_URL%/manifest.json\" /> <!-- Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the `public` folder during the build. Only files inside the `public` folder can be referenced from the HTML. Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will work correctly both with client-side routing and a non-root public URL. Learn how to configure a non-root public URL by running `npm run build`. --> < title > React App </ title > </ head > < body > < noscript > You need to enable JavaScript to run this app. </ noscript > < div id = \"root\" ></ div > <!-- This HTML file is a template. If you open it directly in the browser, you will see an empty page. You can add webfonts, meta tags, or analytics to this file. The build step will place the bundled scripts into the <body> tag. To begin the development, run `npm start` or `yarn start`. To create a production bundle, use `npm run build` or `yarn build`. --> </ body > </ html > Injecting data to JSX elements index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; const welcome = \"Welcome to Webengineering\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Michael\" , lastName : \"Bykovski\" , }; const date = \"18. August 2022\" ; // JSX element, header const header = ( < header > < div > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1994 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); // JSX element, main const main = ( < main > < div > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2022\" ; // JSX element, footer const footer = ( < footer > < div > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div > { header } { main } { footer } < /div> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > { app } < /React.StrictMode>); Importing Media Objects in React How do we import images, video and audio in React? Let's see how we import images first. Create images folder in the src folder and save an image inside. For instance let's save react.jpg image and let's import this image to index.js. After importing we will inject it to a JSX expression, user. See the code below. // index.js import React from \"react\" ; import ReactDOM from \"react-dom\" ; import reactJPG from \"./images/react.jpg\" ; const app = ( < div > < img src = { reactJPG } alt = \"react\" /> < /div> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > { app } < /React.StrictMode>); See more possibilities in the documentation of create-react-app","title":"Setting Up"},{"location":"react/setting_up/#setting-up","text":"In the previous section, we learned about JSX and we accessed the React and ReactDOM package using CDN. However, in real projects instead of CDN you will use the create-react-app package to generate a React project starter(boilerplate). The initial create-react-app was released on Jul 22, 2016. Before this time, developers used to configure webpack with a JavaScript module bundler, babel and all the necessary packages manually and this used to take half an hour or maybe more. Now, create-react-app will take care of everything and you will be in charge of only developing the product, instead of spending too much time configuring and setting up projects. Before we start using different tools, let's have a brief introduction to all the tools we are going to use in this challenge. You do not have to understand everything, but I will try to give a very short introduction to some of the tools and technologies that we use when we work with React.","title":"Setting Up"},{"location":"react/setting_up/#create-react-app","text":"To create a react project you can use one of the following ways. Let's assume you installed node. Open the command line interface (CLI), git bash or terminal on Mac or Linux. Then run the following command. I am using git bash. $ npx create-react-app name-of-your-project If you do not like to write npx every time you create a project you may install create-react-app package globally in your computer using the following command. $ npm install -g create-react-app After you installed create-react-app, you create a React application as follows: $ create-react-app name-of-project","title":"Create React App"},{"location":"react/setting_up/#your-first-react-app","text":"$ cd Desktop/ $ npx create-react-app react-app $ cd react-app $ yarn start Now your React app should run at localhost 3000. Go to the App.js and modify the content by writing some text, you will see the latest changes on the browser. To stop the server, press Ctr + C in the CLI.","title":"Your first React App"},{"location":"react/setting_up/#react-boilerplate","text":"Let's see the React boilerplate, which has been created by create-react-app. Whenever you create a new project, you run create-react-app and name of the project. In the following React boilerplate, there are three folders: node_modules, public and src. In addition, there are .gitignore, README.md, package.json and yarn.lock. Some of you, instead of yarn.lock, you may have package-lock.json. It is good to know these folders and files. node_modules - stores all the necessary node packages of the React applications. /public index.html - the only HTML file we have in the entire application favicon.ico - an icon file manifest.json - is used to make the application a progressive web app other images - open graph images(open graph images are images which are visible when a link share on social media) robots.txt - information, if the website allows web scraping /src App.css, index.css - are different CSS files index.js - a file which allows to connect all the components with index.html App.js - A file where we usually import most of the presentational components App.test.js - Tests with testing library and jest reportWebVitals.js: is useful to collect Web Vitals information setupTests.js - to write testing cases logo.svg - just a svg file package.json - List of packages the applications uses .gitignore - React boilerplate comes with git initiated, and the .gitingore allows files and folders not to be pushed to GitHub README.md - Markdown file to write documentation yarn.lock or package-lock.json - a means to lock the version of the package index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; import \"./index.css\" ; import App from \"./App\" ; import reportWebVitals from \"./reportWebVitals\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < link rel = \"icon\" href = \"%PUBLIC_URL%/favicon.ico\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < meta name = \"theme-color\" content = \"#000000\" /> < meta name = \"description\" content = \"Web site created using create-react-app\" /> < link rel = \"apple-touch-icon\" href = \"%PUBLIC_URL%/logo192.png\" /> <!-- manifest.json provides metadata used when your web app is installed on a user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/ --> < link rel = \"manifest\" href = \"%PUBLIC_URL%/manifest.json\" /> <!-- Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the `public` folder during the build. Only files inside the `public` folder can be referenced from the HTML. Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will work correctly both with client-side routing and a non-root public URL. Learn how to configure a non-root public URL by running `npm run build`. --> < title > React App </ title > </ head > < body > < noscript > You need to enable JavaScript to run this app. </ noscript > < div id = \"root\" ></ div > <!-- This HTML file is a template. If you open it directly in the browser, you will see an empty page. You can add webfonts, meta tags, or analytics to this file. The build step will place the bundled scripts into the <body> tag. To begin the development, run `npm start` or `yarn start`. To create a production bundle, use `npm run build` or `yarn build`. --> </ body > </ html >","title":"React Boilerplate"},{"location":"react/setting_up/#injecting-data-to-jsx-elements","text":"index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; const welcome = \"Welcome to Webengineering\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Michael\" , lastName : \"Bykovski\" , }; const date = \"18. August 2022\" ; // JSX element, header const header = ( < header > < div > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1994 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); // JSX element, main const main = ( < main > < div > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2022\" ; // JSX element, footer const footer = ( < footer > < div > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div > { header } { main } { footer } < /div> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > { app } < /React.StrictMode>);","title":"Injecting data to JSX elements"},{"location":"react/setting_up/#importing-media-objects-in-react","text":"How do we import images, video and audio in React? Let's see how we import images first. Create images folder in the src folder and save an image inside. For instance let's save react.jpg image and let's import this image to index.js. After importing we will inject it to a JSX expression, user. See the code below. // index.js import React from \"react\" ; import ReactDOM from \"react-dom\" ; import reactJPG from \"./images/react.jpg\" ; const app = ( < div > < img src = { reactJPG } alt = \"react\" /> < /div> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > { app } < /React.StrictMode>); See more possibilities in the documentation of create-react-app","title":"Importing Media Objects in React"}]}