{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Webengineering Lectures","title":"Webengineering Lectures"},{"location":"#webengineering-lectures","text":"","title":"Webengineering Lectures"},{"location":"browser_api/","text":"Introduction Here we'll learn to manipulate a web-page using JavaScript. Let's start here: JavaScript Info Document","title":"Introduction"},{"location":"browser_api/#introduction","text":"Here we'll learn to manipulate a web-page using JavaScript. Let's start here: JavaScript Info Document","title":"Introduction"},{"location":"clean_code/","text":"Introduction This chapter gives a short overview about best practices and clean code patterns for JavaScript and React.","title":"Introduction"},{"location":"clean_code/#introduction","text":"This chapter gives a short overview about best practices and clean code patterns for JavaScript and React.","title":"Introduction"},{"location":"clean_code/javascript/","text":"Writing clean code Check out the repository: clean code javascript","title":"Writing clean code"},{"location":"clean_code/javascript/#writing-clean-code","text":"Check out the repository: clean code javascript","title":"Writing clean code"},{"location":"exercises/javascript_fundamentals/arrays/","text":"\ud83d\udcbb Exercise Exercise: Level 1 const countries = [ \"Albania\" , \"Bolivia\" , \"Canada\" , \"Denmark\" , \"Ethiopia\" , \"Finland\" , \"Germany\" , \"Hungary\" , \"Ireland\" , \"Japan\" , \"Kenya\" , ]; const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; Declare an empty array; Declare an array with more than 5 number of elements Find the length of your array Get the first item, the middle item and the last item of the array Declare an array called mixedDataTypes , put different data types in the array and find the length of the array. The array size should be greater than 5 Declare an array variable name itCompanies and assign initial values Facebook, Google, Microsoft, Apple, IBM, Oracle and Amazon Print the array using console.log() Print the number of companies in the array Print the first company, middle and last company Print out each company Change each company name to uppercase one by one and print them out Print the array like as a sentence: Facebook, Google, Microsoft, Apple, IBM,Oracle and Amazon are big IT companies. Check if a certain company exists in the itCompanies array. If it exist return the company else return a company is not found Filter out companies which have more than one 'o' without the filter method Sort the array using sort() method Reverse the array using reverse() method Slice out the first 3 companies from the array Slice out the last 3 companies from the array Slice out the middle IT company or companies from the array Remove the first IT company from the array Remove the middle IT company or companies from the array Remove the last IT company from the array Remove all IT companies Exercise: Level 2 Create a separate countries.js file and store the countries array into this file, create a separate file web_techs.js and store the webTechs array into this file. Access both file in main.js file First remove all the punctuations and change the string to array and count the number of words in the array let text = \"I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.\" ; console . log ( words ); console . log ( words . length ); [ \"I\" , \"love\" , \"teaching\" , \"and\" , \"empowering\" , \"people\" , \"I\" , \"teach\" , \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Python\" ] 13 In the following shopping cart add, remove, edit items const shoppingCart = [ \"Milk\" , \"Coffee\" , \"Tea\" , \"Honey\" ]; add 'Meat' in the beginning of your shopping cart if it has not been already added add Sugar at the end of you shopping cart if it has not been already added remove 'Honey' if you are allergic to honey modify Tea to 'Green Tea' In countries array check if 'Ethiopia' exists in the array if it exists print 'ETHIOPIA'. If it does not exist add to the countries list. In the webTechs array check if Sass exists in the array and if it exists print 'Sass is a CSS preprocess'. If it does not exist add Sass to the array and print the array. Concatenate the following two variables and store it in a fullStack variable. const frontEnd = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Redux\" ]; const backEnd = [ \"Node\" , \"Express\" , \"MongoDB\" ]; console . log ( fullStack ); [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Redux\" , \"Node\" , \"Express\" , \"MongoDB\" ] Exercise: Level 3 The following is an array of 10 students ages: js const ages = [19, 22, 19, 24, 20, 25, 26, 24, 25, 24] - Sort the array and find the min and max age - Find the median age(one middle item or two middle items divided by two) - Find the average age(all items divided by number of items) - Find the range of the ages(max minus min) - Compare the value of (min - average) and (max - average), use abs() method 1.Slice the first ten countries from the countries array Find the middle country(ies) in the countries array Divide the countries array into two equal arrays if it is even. If countries array is not even , one more country for the first half.","title":"Arrays"},{"location":"exercises/javascript_fundamentals/arrays/#exercise","text":"","title":"\ud83d\udcbb Exercise"},{"location":"exercises/javascript_fundamentals/arrays/#exercise-level-1","text":"const countries = [ \"Albania\" , \"Bolivia\" , \"Canada\" , \"Denmark\" , \"Ethiopia\" , \"Finland\" , \"Germany\" , \"Hungary\" , \"Ireland\" , \"Japan\" , \"Kenya\" , ]; const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; Declare an empty array; Declare an array with more than 5 number of elements Find the length of your array Get the first item, the middle item and the last item of the array Declare an array called mixedDataTypes , put different data types in the array and find the length of the array. The array size should be greater than 5 Declare an array variable name itCompanies and assign initial values Facebook, Google, Microsoft, Apple, IBM, Oracle and Amazon Print the array using console.log() Print the number of companies in the array Print the first company, middle and last company Print out each company Change each company name to uppercase one by one and print them out Print the array like as a sentence: Facebook, Google, Microsoft, Apple, IBM,Oracle and Amazon are big IT companies. Check if a certain company exists in the itCompanies array. If it exist return the company else return a company is not found Filter out companies which have more than one 'o' without the filter method Sort the array using sort() method Reverse the array using reverse() method Slice out the first 3 companies from the array Slice out the last 3 companies from the array Slice out the middle IT company or companies from the array Remove the first IT company from the array Remove the middle IT company or companies from the array Remove the last IT company from the array Remove all IT companies","title":"Exercise: Level 1"},{"location":"exercises/javascript_fundamentals/arrays/#exercise-level-2","text":"Create a separate countries.js file and store the countries array into this file, create a separate file web_techs.js and store the webTechs array into this file. Access both file in main.js file First remove all the punctuations and change the string to array and count the number of words in the array let text = \"I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.\" ; console . log ( words ); console . log ( words . length ); [ \"I\" , \"love\" , \"teaching\" , \"and\" , \"empowering\" , \"people\" , \"I\" , \"teach\" , \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Python\" ] 13 In the following shopping cart add, remove, edit items const shoppingCart = [ \"Milk\" , \"Coffee\" , \"Tea\" , \"Honey\" ]; add 'Meat' in the beginning of your shopping cart if it has not been already added add Sugar at the end of you shopping cart if it has not been already added remove 'Honey' if you are allergic to honey modify Tea to 'Green Tea' In countries array check if 'Ethiopia' exists in the array if it exists print 'ETHIOPIA'. If it does not exist add to the countries list. In the webTechs array check if Sass exists in the array and if it exists print 'Sass is a CSS preprocess'. If it does not exist add Sass to the array and print the array. Concatenate the following two variables and store it in a fullStack variable. const frontEnd = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Redux\" ]; const backEnd = [ \"Node\" , \"Express\" , \"MongoDB\" ]; console . log ( fullStack ); [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Redux\" , \"Node\" , \"Express\" , \"MongoDB\" ]","title":"Exercise: Level 2"},{"location":"exercises/javascript_fundamentals/arrays/#exercise-level-3","text":"The following is an array of 10 students ages: js const ages = [19, 22, 19, 24, 20, 25, 26, 24, 25, 24] - Sort the array and find the min and max age - Find the median age(one middle item or two middle items divided by two) - Find the average age(all items divided by number of items) - Find the range of the ages(max minus min) - Compare the value of (min - average) and (max - average), use abs() method 1.Slice the first ten countries from the countries array Find the middle country(ies) in the countries array Divide the countries array into two equal arrays if it is even. If countries array is not even , one more country for the first half.","title":"Exercise: Level 3"},{"location":"exercises/javascript_fundamentals/classes/","text":"Exercises Exercises Level 1 Create an Animal class. The class will have name, age, color, legs properties and create different methods Create a Dog and Cat child class from the Animal Class. Exercises Level 2 Override the method you create in Animal class Exercises Level 3 Let's try to develop a program which calculate measure of central tendency of a sample(mean, median, mode) and measure of variability(range, variance, standard deviation). In addition to those measures find the min, max, count, percentile, and frequency distribution of the sample. You can create a class called Statistics and create all the functions which do statistical calculations as method for the Statistics class. Check the output below. ages = [ 31 , 26 , 34 , 37 , 27 , 26 , 32 , 32 , 26 , 27 , 27 , 24 , 32 , 33 , 27 , 25 , 26 , 38 , 37 , 31 , 34 , 24 , 33 , 29 , 26 ] console . log ( 'Count:' , statistics . count ()) // 25 console . log ( 'Sum: ' , statistics . sum ()) // 744 console . log ( 'Min: ' , statistics . min ()) // 24 console . log ( 'Max: ' , statistics . max ()) // 38 console . log ( 'Range: ' , statistics . range () // 14 console . log ( 'Mean: ' , statistics . mean ()) // 30 console . log ( 'Median: ' , statistics . median ()) // 29 console . log ( 'Mode: ' , statistics . mode ()) // {'mode': 26, 'count': 5} console . log ( 'Variance: ' , statistics . var ()) // 17.5 console . log ( 'Standard Deviation: ' , statistics . std ()) // 4.2 console . log ( 'Variance: ' , statistics . var ()) // 17.5 console . log ( 'Frequency Distribution: ' , statistics . freqDist ()) // [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 34), (8.0, 33), (8.0, 31), (8.0, 24), (4.0, 38), (4.0, 29), (4.0, 25)] // you output should look like this console.log ( statistics.describe ()) Count: 25 Sum: 744 Min: 24 Max: 38 Range: 14 Mean: 30 Median: 29 Mode: ( 26 , 5 ) Variance: 17 .5 Standard Deviation: 4 .2 Frequency Distribution: [( 20 .0, 26 ) , ( 16 .0, 27 ) , ( 12 .0, 32 ) , ( 8 .0, 37 ) , ( 8 .0, 34 ) , ( 8 .0, 33 ) , ( 8 .0, 31 ) , ( 8 .0, 24 ) , ( 4 .0, 38 ) , ( 4 .0, 29 ) , ( 4 .0, 25 )]","title":"Classes"},{"location":"exercises/javascript_fundamentals/classes/#exercises","text":"","title":"Exercises"},{"location":"exercises/javascript_fundamentals/classes/#exercises-level-1","text":"Create an Animal class. The class will have name, age, color, legs properties and create different methods Create a Dog and Cat child class from the Animal Class.","title":"Exercises Level 1"},{"location":"exercises/javascript_fundamentals/classes/#exercises-level-2","text":"Override the method you create in Animal class","title":"Exercises Level 2"},{"location":"exercises/javascript_fundamentals/classes/#exercises-level-3","text":"Let's try to develop a program which calculate measure of central tendency of a sample(mean, median, mode) and measure of variability(range, variance, standard deviation). In addition to those measures find the min, max, count, percentile, and frequency distribution of the sample. You can create a class called Statistics and create all the functions which do statistical calculations as method for the Statistics class. Check the output below. ages = [ 31 , 26 , 34 , 37 , 27 , 26 , 32 , 32 , 26 , 27 , 27 , 24 , 32 , 33 , 27 , 25 , 26 , 38 , 37 , 31 , 34 , 24 , 33 , 29 , 26 ] console . log ( 'Count:' , statistics . count ()) // 25 console . log ( 'Sum: ' , statistics . sum ()) // 744 console . log ( 'Min: ' , statistics . min ()) // 24 console . log ( 'Max: ' , statistics . max ()) // 38 console . log ( 'Range: ' , statistics . range () // 14 console . log ( 'Mean: ' , statistics . mean ()) // 30 console . log ( 'Median: ' , statistics . median ()) // 29 console . log ( 'Mode: ' , statistics . mode ()) // {'mode': 26, 'count': 5} console . log ( 'Variance: ' , statistics . var ()) // 17.5 console . log ( 'Standard Deviation: ' , statistics . std ()) // 4.2 console . log ( 'Variance: ' , statistics . var ()) // 17.5 console . log ( 'Frequency Distribution: ' , statistics . freqDist ()) // [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 34), (8.0, 33), (8.0, 31), (8.0, 24), (4.0, 38), (4.0, 29), (4.0, 25)] // you output should look like this console.log ( statistics.describe ()) Count: 25 Sum: 744 Min: 24 Max: 38 Range: 14 Mean: 30 Median: 29 Mode: ( 26 , 5 ) Variance: 17 .5 Standard Deviation: 4 .2 Frequency Distribution: [( 20 .0, 26 ) , ( 16 .0, 27 ) , ( 12 .0, 32 ) , ( 8 .0, 37 ) , ( 8 .0, 34 ) , ( 8 .0, 33 ) , ( 8 .0, 31 ) , ( 8 .0, 24 ) , ( 4 .0, 38 ) , ( 4 .0, 29 ) , ( 4 .0, 25 )]","title":"Exercises Level 3"},{"location":"exercises/javascript_fundamentals/conditionals/","text":"\ud83d\udcbb Exercises Exercises: Level 1 Get user input using prompt(\u201cEnter your age:\u201d). If user is 18 or older, give feedback:'You are old enough to drive' but if not 18 give another feedback stating to wait for the number of years he needs to turn 18. Enter your age: 30 You are old enough to drive. Enter your age:15 You are left with 3 years to drive. Compare the values of myAge and yourAge using if \u2026 else. Based on the comparison and log the result to console stating who is older (me or you). Use prompt(\u201cEnter your age:\u201d) to get the age as input. Enter your age: 30 You are 5 years older than me. If a is greater than b return 'a is greater than b' else 'a is less than b'. Try to implement it in two ways using if else ternary operator. let a = 4 ; let b = 3 ; 4 is greater than 3 Even numbers are divisible by 2 and the remainder is zero. How do you check, if a number is even or not using JavaScript? Enter a number: 2 2 is an even number Enter a number: 9 9 is is an odd number. Exercises: Level 2 Write a code which can give grades to students according to theirs scores: 80-100, A 70-89, B 60-69, C 50-59, D 0-49, F Check if the season is Autumn, Winter, Spring or Summer. If the user input is : September, October or November, the season is Autumn. December, January or February, the season is Winter. March, April or May, the season is Spring June, July or August, the season is Summer Check if a day is weekend day or a working day. Your script will take day as an input. What is the day today? Saturday Saturday is a weekend. What is the day today? saturDaY Saturday is a weekend. What is the day today? Friday Friday is a working day. What is the day today? FrIDAy Friday is a working day. Exercises: Level 3 Write a program which tells the number of days in a month. Enter a month: January January has 31 days. Enter a month: JANUARY January has 31 day Enter a month: February February has 28 days. Enter a month: FEbruary February has 28 days. Write a program which tells the number of days in a month, now consider leap year.","title":"Conditionals"},{"location":"exercises/javascript_fundamentals/conditionals/#exercises","text":"","title":"\ud83d\udcbb Exercises"},{"location":"exercises/javascript_fundamentals/conditionals/#exercises-level-1","text":"Get user input using prompt(\u201cEnter your age:\u201d). If user is 18 or older, give feedback:'You are old enough to drive' but if not 18 give another feedback stating to wait for the number of years he needs to turn 18. Enter your age: 30 You are old enough to drive. Enter your age:15 You are left with 3 years to drive. Compare the values of myAge and yourAge using if \u2026 else. Based on the comparison and log the result to console stating who is older (me or you). Use prompt(\u201cEnter your age:\u201d) to get the age as input. Enter your age: 30 You are 5 years older than me. If a is greater than b return 'a is greater than b' else 'a is less than b'. Try to implement it in two ways using if else ternary operator. let a = 4 ; let b = 3 ; 4 is greater than 3 Even numbers are divisible by 2 and the remainder is zero. How do you check, if a number is even or not using JavaScript? Enter a number: 2 2 is an even number Enter a number: 9 9 is is an odd number.","title":"Exercises: Level 1"},{"location":"exercises/javascript_fundamentals/conditionals/#exercises-level-2","text":"Write a code which can give grades to students according to theirs scores: 80-100, A 70-89, B 60-69, C 50-59, D 0-49, F Check if the season is Autumn, Winter, Spring or Summer. If the user input is : September, October or November, the season is Autumn. December, January or February, the season is Winter. March, April or May, the season is Spring June, July or August, the season is Summer Check if a day is weekend day or a working day. Your script will take day as an input. What is the day today? Saturday Saturday is a weekend. What is the day today? saturDaY Saturday is a weekend. What is the day today? Friday Friday is a working day. What is the day today? FrIDAy Friday is a working day.","title":"Exercises: Level 2"},{"location":"exercises/javascript_fundamentals/conditionals/#exercises-level-3","text":"Write a program which tells the number of days in a month. Enter a month: January January has 31 days. Enter a month: JANUARY January has 31 day Enter a month: February February has 28 days. Enter a month: FEbruary February has 28 days. Write a program which tells the number of days in a month, now consider leap year.","title":"Exercises: Level 3"},{"location":"exercises/javascript_fundamentals/data_types/","text":"Data Types Exercises Exercise: Level 1 Declare a variable named challenge and assign it to an initial value 'Webengineering ist klasse!' . Print the string on the browser console using console.log() Print the length of the string on the browser console using console.log() Change all the string characters to capital letters using toUpperCase() method Change all the string characters to lowercase letters using toLowerCase() method Cut (slice) out the first word of the string using substr() or substring() method Slice out the phrase ist klasse from Webengineering ist klasse! . Check if the string contains a word Web using includes() method Split the string into an array using split() method Split the string Webengineering ist klasse! at the space using split() method Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon split the string at the comma and change it to an array. Change Webengineering ist klasse! to Webengineering ist bl\u00f6d! using replace() method. What is character at index 15 in Webengineering ist klasse! string? Use charAt() method. What is the character code of W in Webengineering ist klasse! string using charCodeAt() Use indexOf to determine the position of the first occurrence of a in Webengineering ist klasse! Use lastIndexOf to determine the position of the last occurrence of a in Webengineering ist klasse! . Use indexOf to find the position of the first occurrence of the word because in the following sentence: 'You cannot end a sentence with because because because is a conjunction' Use lastIndexOf to find the position of the last occurrence of the word because in the following sentence: 'You cannot end a sentence with because because because is a conjunction' Use search to find the position of the first occurrence of the word because in the following sentence: 'You cannot end a sentence with because because because is a conjunction' Use trim() to remove any trailing whitespace at the beginning and the end of a string.E.g ' 30 Days Of JavaScript '. Use startsWith() method with the string Webengineering ist klasse! and make the result true Use endsWith() method with the string Webengineering ist klasse! and make the result true Use match() method to find all the e \u2019s in Webengineering ist klasse! Use concat() and merge Webengineering ist and klasse! to a single string, Webengineering ist klasse! Use repeat() method to print Webengineering ist klasse! 2 times Exercise: Level 2 Using console.log() print out the following statement: The quote 'There is no exercise better for the heart than reaching down and lifting people up.' by John Holmes teaches us to help one another. Using console.log() print out the following quote by Mother Teresa: \"Love is not patronizing and charity isn't about pity, it is about love. Charity and love are the same -- with charity you give love, so don't just give money but reach out your hand instead.\" Check if typeof '10' is exactly equal to 10. If not make it exactly equal. Check if parseFloat('9.8') is equal to 10 if not make it exactly equal with 10. Check if 'on' is found in both python and jargon I hope this course is not full of jargon . Check if jargon is in the sentence. Generate a random number between 0 and 100 inclusively. Generate a random number between 50 and 100 inclusively. Generate a random number between 0 and 255 inclusively. Access the JavaScript string characters using a random number. Use console.log() and escape characters to print the following pattern. 1 1 1 1 1 2 1 2 4 8 3 1 3 9 27 4 1 4 16 64 5 1 5 25 125 Use substr to slice out the phrase because because because from the following sentence: 'You cannot end a sentence with because because because is a conjunction' Exercises: Level 3 'Love is the best thing in this world. Some found their love and some are still looking for their love.' Count the number of word love in this sentence. Use match() to count the number of all because in the following sentence: 'You cannot end a sentence with because because because is a conjunction' Clean the following text and find the most frequent word (hint, use replace and regular expressions). const sentence = \"%I $am@% a %tea@cher%, &and& I lo%#ve %te@a@ching%;. The@re $is no@th@ing; &as& mo@re rewarding as educa@ting &and& @emp%o@weri@ng peo@ple. ;I found tea@ching m%o@re interesting tha@n any ot#her %jo@bs. %Do@es thi%s mo@tiv#ate yo@u to be a tea@cher!? %Th#is 30#Days&OfJavaScript &is al@so $the $resu@lt of &love& of tea&ching\" ; Calculate the total annual income of the person by extracting the numbers from the following text. 'He earns 5000 euro from salary per month, 10000 euro annual bonus, 15000 euro online courses per month.'","title":"Data Types Exercises"},{"location":"exercises/javascript_fundamentals/data_types/#data-types-exercises","text":"","title":"Data Types Exercises"},{"location":"exercises/javascript_fundamentals/data_types/#exercise-level-1","text":"Declare a variable named challenge and assign it to an initial value 'Webengineering ist klasse!' . Print the string on the browser console using console.log() Print the length of the string on the browser console using console.log() Change all the string characters to capital letters using toUpperCase() method Change all the string characters to lowercase letters using toLowerCase() method Cut (slice) out the first word of the string using substr() or substring() method Slice out the phrase ist klasse from Webengineering ist klasse! . Check if the string contains a word Web using includes() method Split the string into an array using split() method Split the string Webengineering ist klasse! at the space using split() method Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon split the string at the comma and change it to an array. Change Webengineering ist klasse! to Webengineering ist bl\u00f6d! using replace() method. What is character at index 15 in Webengineering ist klasse! string? Use charAt() method. What is the character code of W in Webengineering ist klasse! string using charCodeAt() Use indexOf to determine the position of the first occurrence of a in Webengineering ist klasse! Use lastIndexOf to determine the position of the last occurrence of a in Webengineering ist klasse! . Use indexOf to find the position of the first occurrence of the word because in the following sentence: 'You cannot end a sentence with because because because is a conjunction' Use lastIndexOf to find the position of the last occurrence of the word because in the following sentence: 'You cannot end a sentence with because because because is a conjunction' Use search to find the position of the first occurrence of the word because in the following sentence: 'You cannot end a sentence with because because because is a conjunction' Use trim() to remove any trailing whitespace at the beginning and the end of a string.E.g ' 30 Days Of JavaScript '. Use startsWith() method with the string Webengineering ist klasse! and make the result true Use endsWith() method with the string Webengineering ist klasse! and make the result true Use match() method to find all the e \u2019s in Webengineering ist klasse! Use concat() and merge Webengineering ist and klasse! to a single string, Webengineering ist klasse! Use repeat() method to print Webengineering ist klasse! 2 times","title":"Exercise: Level 1"},{"location":"exercises/javascript_fundamentals/data_types/#exercise-level-2","text":"Using console.log() print out the following statement: The quote 'There is no exercise better for the heart than reaching down and lifting people up.' by John Holmes teaches us to help one another. Using console.log() print out the following quote by Mother Teresa: \"Love is not patronizing and charity isn't about pity, it is about love. Charity and love are the same -- with charity you give love, so don't just give money but reach out your hand instead.\" Check if typeof '10' is exactly equal to 10. If not make it exactly equal. Check if parseFloat('9.8') is equal to 10 if not make it exactly equal with 10. Check if 'on' is found in both python and jargon I hope this course is not full of jargon . Check if jargon is in the sentence. Generate a random number between 0 and 100 inclusively. Generate a random number between 50 and 100 inclusively. Generate a random number between 0 and 255 inclusively. Access the JavaScript string characters using a random number. Use console.log() and escape characters to print the following pattern. 1 1 1 1 1 2 1 2 4 8 3 1 3 9 27 4 1 4 16 64 5 1 5 25 125 Use substr to slice out the phrase because because because from the following sentence: 'You cannot end a sentence with because because because is a conjunction'","title":"Exercise: Level 2"},{"location":"exercises/javascript_fundamentals/data_types/#exercises-level-3","text":"'Love is the best thing in this world. Some found their love and some are still looking for their love.' Count the number of word love in this sentence. Use match() to count the number of all because in the following sentence: 'You cannot end a sentence with because because because is a conjunction' Clean the following text and find the most frequent word (hint, use replace and regular expressions). const sentence = \"%I $am@% a %tea@cher%, &and& I lo%#ve %te@a@ching%;. The@re $is no@th@ing; &as& mo@re rewarding as educa@ting &and& @emp%o@weri@ng peo@ple. ;I found tea@ching m%o@re interesting tha@n any ot#her %jo@bs. %Do@es thi%s mo@tiv#ate yo@u to be a tea@cher!? %Th#is 30#Days&OfJavaScript &is al@so $the $resu@lt of &love& of tea&ching\" ; Calculate the total annual income of the person by extracting the numbers from the following text. 'He earns 5000 euro from salary per month, 10000 euro annual bonus, 15000 euro online courses per month.'","title":"Exercises: Level 3"},{"location":"exercises/javascript_fundamentals/destructuring_and_spreading/","text":"Exercises Create a function called getPersonInfo. The getPersonInfo function takes an object parameter. The structure of the object and the output of the function is given below. Try to use both a regular way and destructuring and compare the cleanness of the code. If you want to compare your solution with my solution, check this link. const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , job : \"Instructor and Developer\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], languages : [ \"Amharic\" , \"English\" , \"Suomi(Finnish)\" ], }; /* Asabeneh Yetayeh lives in Finland. He is 250 years old. He is an Instructor and Developer. He teaches HTML, CSS, JavaScript, React, Redux, Node, MongoDB, Python and D3.js. He speaks Amharic, English and a little bit of Suomi(Finnish) */","title":"Destructuring and spreading"},{"location":"exercises/javascript_fundamentals/destructuring_and_spreading/#exercises","text":"Create a function called getPersonInfo. The getPersonInfo function takes an object parameter. The structure of the object and the output of the function is given below. Try to use both a regular way and destructuring and compare the cleanness of the code. If you want to compare your solution with my solution, check this link. const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , job : \"Instructor and Developer\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], languages : [ \"Amharic\" , \"English\" , \"Suomi(Finnish)\" ], }; /* Asabeneh Yetayeh lives in Finland. He is 250 years old. He is an Instructor and Developer. He teaches HTML, CSS, JavaScript, React, Redux, Node, MongoDB, Python and D3.js. He speaks Amharic, English and a little bit of Suomi(Finnish) */","title":"Exercises"},{"location":"exercises/javascript_fundamentals/functions/","text":"\ud83d\udcbb Exercises Exercises: Level 1 Declare a function fullName and it takes firstName, lastName as a parameter and it returns your full - name. Declare a function addNumbers and it takes two two parameters and it returns sum. Area of a circle is calculated as follows: area = \u03c0 x r x r . Write a function which calculates _areaOfCircle Temperature in oC can be converted to oF using this formula: oF = (oC x 9/5) + 32 . Write a function which convert oC to oF convertCelciusToFahrenheit . Body mass index(BMI) is calculated as follows: bmi = weight in Kg / (height x height) in m2 . Write a function which calculates bmi . BMI is used to broadly define different weight groups in adults 20 years old or older.Check if a person is underweight, normal, overweight or obese based the information given below. The same groups apply to both men and women. Underweight : BMI is less than 18.5 Normal weight : BMI is 18.5 to 24.9 Overweight : BMI is 25 to 29.9 Obese : BMI is 30 or more Write a function called checkSeason , it takes a month parameter and returns the season:Autumn, Winter, Spring or Summer. Exercises: Level 2 Quadratic equation is calculated as follows: ax2 + bx + c = 0 . Write a function which calculates value or values of a quadratic equation, solveQuadEquation . console . log ( solveQuadratic ()); // {0} console . log ( solveQuadratic ( 1 , 4 , 4 )); // {-2} console . log ( solveQuadratic ( 1 , - 1 , - 2 )); // {2, -1} console . log ( solveQuadratic ( 1 , 7 , 12 )); // {-3, -4} console . log ( solveQuadratic ( 1 , 0 , - 4 )); //{2, -2} console . log ( solveQuadratic ( 1 , - 1 , 0 )); //{1, 0} Declare a function name printArray . It takes array as a parameter and it prints out each value of the array. Write a function name showDateTime which shows time in this format: 08/01/2020 04:08 using the Date object. showDateTime () 08 /01/2020 04 :08 Declare a function name swapValues . This function swaps value of x to y. swapValues ( 3 , 4 ); // x => 4, y=>3 swapValues ( 4 , 5 ); // x = 5, y = 4 Declare a function name reverseArray . It takes array as a parameter and it returns the reverse of the array (don't use method). console . log ( reverseArray ([ 1 , 2 , 3 , 4 , 5 ])); //[5, 4, 3, 2, 1] console . log ( reverseArray ([ \"A\" , \"B\" , \"C\" ])); //['C', 'B', 'A'] Declare a function name capitalizeArray . It takes array as a parameter and it returns the - capitalizedarray. Declare a function name addItem . It takes an item parameter and it returns an array after adding the item Declare a function name removeItem . It takes an index parameter and it returns an array after removing an ite Declare a function name evensAndOdds . It takes a positive integer as parameter and it counts number of evens and odds in the number. evensAndOdds ( 100 ) ; The number of odds are 50 . The number of evens are 51 . Write a function which takes any number of arguments and return the sum of the arguments sum ( 1 , 2 , 3 ); // -> 6 sum ( 1 , 2 , 3 , 4 ); // -> 10 Declare a function name userIdGenerator . When this function is called it generates seven character id. The function return the id. console.log ( userIdGenerator ()) ; 41XTDbE Exercises: Level 3 Declare a function name userIdGeneratedByUser . It doesn\u2019t take any parameter but it takes two inputs using prompt(). One of the input is the number of characters and the second input is the number of ids which are supposed to be generated. userIdGeneratedByUser () 'kcsy2 SMFYb bWmeq ZXOYh 2Rgxf ' userIdGeneratedByUser () '1GCSgPLMaBAVQZ26 YD7eFwNQKNs7qXaT ycArC5yrRupyG00S UbGxOFI7UXSWAyKN dIV0SSUTgAdKwStr ' Write a function generateColors which can generate any number of hexa or rgb colors. console . log ( generateColors ( \"hexa\" , 3 )); // ['#a3e12f', '#03ed55', '#eb3d2b'] console . log ( generateColors ( \"hexa\" , 1 )); // '#b334ef' console . log ( generateColors ( \"rgb\" , 3 )); // ['rgb(5, 55, 175)', 'rgb(50, 105, 100)', 'rgb(15, 26, 80)'] console . log ( generateColors ( \"rgb\" , 1 )); // 'rgb(33,79, 176)' Call your function shuffleArray , it takes an array as a parameter and it returns a shuffled array Call your function factorial , it takes a whole number as a parameter and it return a factorial of the number Call your function isEmpty , it takes a parameter and it checks if it is empty or not Write a function called average , it takes an array parameter and returns the average of the items. Check if all the array items are number types. If not give return reasonable feedback.","title":"Functions"},{"location":"exercises/javascript_fundamentals/functions/#exercises","text":"","title":"\ud83d\udcbb Exercises"},{"location":"exercises/javascript_fundamentals/functions/#exercises-level-1","text":"Declare a function fullName and it takes firstName, lastName as a parameter and it returns your full - name. Declare a function addNumbers and it takes two two parameters and it returns sum. Area of a circle is calculated as follows: area = \u03c0 x r x r . Write a function which calculates _areaOfCircle Temperature in oC can be converted to oF using this formula: oF = (oC x 9/5) + 32 . Write a function which convert oC to oF convertCelciusToFahrenheit . Body mass index(BMI) is calculated as follows: bmi = weight in Kg / (height x height) in m2 . Write a function which calculates bmi . BMI is used to broadly define different weight groups in adults 20 years old or older.Check if a person is underweight, normal, overweight or obese based the information given below. The same groups apply to both men and women. Underweight : BMI is less than 18.5 Normal weight : BMI is 18.5 to 24.9 Overweight : BMI is 25 to 29.9 Obese : BMI is 30 or more Write a function called checkSeason , it takes a month parameter and returns the season:Autumn, Winter, Spring or Summer.","title":"Exercises: Level 1"},{"location":"exercises/javascript_fundamentals/functions/#exercises-level-2","text":"Quadratic equation is calculated as follows: ax2 + bx + c = 0 . Write a function which calculates value or values of a quadratic equation, solveQuadEquation . console . log ( solveQuadratic ()); // {0} console . log ( solveQuadratic ( 1 , 4 , 4 )); // {-2} console . log ( solveQuadratic ( 1 , - 1 , - 2 )); // {2, -1} console . log ( solveQuadratic ( 1 , 7 , 12 )); // {-3, -4} console . log ( solveQuadratic ( 1 , 0 , - 4 )); //{2, -2} console . log ( solveQuadratic ( 1 , - 1 , 0 )); //{1, 0} Declare a function name printArray . It takes array as a parameter and it prints out each value of the array. Write a function name showDateTime which shows time in this format: 08/01/2020 04:08 using the Date object. showDateTime () 08 /01/2020 04 :08 Declare a function name swapValues . This function swaps value of x to y. swapValues ( 3 , 4 ); // x => 4, y=>3 swapValues ( 4 , 5 ); // x = 5, y = 4 Declare a function name reverseArray . It takes array as a parameter and it returns the reverse of the array (don't use method). console . log ( reverseArray ([ 1 , 2 , 3 , 4 , 5 ])); //[5, 4, 3, 2, 1] console . log ( reverseArray ([ \"A\" , \"B\" , \"C\" ])); //['C', 'B', 'A'] Declare a function name capitalizeArray . It takes array as a parameter and it returns the - capitalizedarray. Declare a function name addItem . It takes an item parameter and it returns an array after adding the item Declare a function name removeItem . It takes an index parameter and it returns an array after removing an ite Declare a function name evensAndOdds . It takes a positive integer as parameter and it counts number of evens and odds in the number. evensAndOdds ( 100 ) ; The number of odds are 50 . The number of evens are 51 . Write a function which takes any number of arguments and return the sum of the arguments sum ( 1 , 2 , 3 ); // -> 6 sum ( 1 , 2 , 3 , 4 ); // -> 10 Declare a function name userIdGenerator . When this function is called it generates seven character id. The function return the id. console.log ( userIdGenerator ()) ; 41XTDbE","title":"Exercises: Level 2"},{"location":"exercises/javascript_fundamentals/functions/#exercises-level-3","text":"Declare a function name userIdGeneratedByUser . It doesn\u2019t take any parameter but it takes two inputs using prompt(). One of the input is the number of characters and the second input is the number of ids which are supposed to be generated. userIdGeneratedByUser () 'kcsy2 SMFYb bWmeq ZXOYh 2Rgxf ' userIdGeneratedByUser () '1GCSgPLMaBAVQZ26 YD7eFwNQKNs7qXaT ycArC5yrRupyG00S UbGxOFI7UXSWAyKN dIV0SSUTgAdKwStr ' Write a function generateColors which can generate any number of hexa or rgb colors. console . log ( generateColors ( \"hexa\" , 3 )); // ['#a3e12f', '#03ed55', '#eb3d2b'] console . log ( generateColors ( \"hexa\" , 1 )); // '#b334ef' console . log ( generateColors ( \"rgb\" , 3 )); // ['rgb(5, 55, 175)', 'rgb(50, 105, 100)', 'rgb(15, 26, 80)'] console . log ( generateColors ( \"rgb\" , 1 )); // 'rgb(33,79, 176)' Call your function shuffleArray , it takes an array as a parameter and it returns a shuffled array Call your function factorial , it takes a whole number as a parameter and it return a factorial of the number Call your function isEmpty , it takes a parameter and it checks if it is empty or not Write a function called average , it takes an array parameter and returns the average of the items. Check if all the array items are number types. If not give return reasonable feedback.","title":"Exercises: Level 3"},{"location":"exercises/javascript_fundamentals/object/","text":"\ud83d\udcbb Exercises Exercises: Level 1 Create an empty object called dog Print the the dog object on the console Add name, legs, color, age and bark properties for the dog object. The bark property is a method which return woof woof Get name, legs, color, age and bark value from the dog object Set new properties the dog object: breed, getDogInfo Exercises: Level 2 Find the person who has many skills in the users object. Count logged in users,count users having greater than equal to 50 points from the following object. const users = { Alex : { email : 'alex@alex.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' ], age : 20 , isLoggedIn : false , points : 30 }, Asab : { email : 'asab@asab.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'Redux' , 'MongoDB' , 'Express' , 'React' , 'Node' ], age : 25 , isLoggedIn : false , points : 50 }, Brook : { email : 'daniel@daniel.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'React' , 'Redux' ], age : 30 , isLoggedIn : true , points : 50 }, Daniel : { email : 'daniel@alex.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'Python' ], age : 20 , isLoggedIn : false , points : 40 }, John : { email : 'john@john.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'React' , 'Redux' , 'Node.js' ], age : 20 , isLoggedIn : true , points : 50 }, Thomas : { email : 'thomas@thomas.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'React' ], age : 20 , isLoggedIn : false , points : 40 }, Paul : { email : 'paul@paul.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'MongoDB' , 'Express' , 'React' , 'Node' ], age : 20 , isLoggedIn : false , points : 40 } } ``` Find people who are MERN stack developer from the users object Set your name in the users object without modifying the original users object Get all keys or properties of users object Get all the values of users object Use the countries object to print a country name, capital, populations and languages. Exercises: Level 3 Create an object literal called personAccount . It has firstName, lastName, incomes, expenses properties and it has totalIncome, totalExpense, accountInfo,addIncome, addExpense and accountBalance methods. Incomes is a set of incomes and its description and expenses is a set of incomes and its description. **** Questions:2, 3 and 4 are based on the following two arrays:users and products () const users = [ { _id : \"ab12ex\" , username : \"Alex\" , email : \"alex@alex.com\" , password : \"123123\" , createdAt : \"08/01/2020 9:00 AM\" , isLoggedIn : false , }, { _id : \"fg12cy\" , username : \"Asab\" , email : \"asab@asab.com\" , password : \"123456\" , createdAt : \"08/01/2020 9:30 AM\" , isLoggedIn : true , }, { _id : \"zwf8md\" , username : \"Brook\" , email : \"brook@brook.com\" , password : \"123111\" , createdAt : \"08/01/2020 9:45 AM\" , isLoggedIn : true , }, { _id : \"eefamr\" , username : \"Martha\" , email : \"martha@martha.com\" , password : \"123222\" , createdAt : \"08/01/2020 9:50 AM\" , isLoggedIn : false , }, { _id : \"ghderc\" , username : \"Thomas\" , email : \"thomas@thomas.com\" , password : \"123333\" , createdAt : \"08/01/2020 10:00 AM\" , isLoggedIn : false , }, ]; const products = [ { _id : \"eedfcf\" , name : \"mobile phone\" , description : \"Huawei Honor\" , price : 200 , ratings : [ { userId : \"fg12cy\" , rate : 5 }, { userId : \"zwf8md\" , rate : 4.5 }, ], likes : [], }, { _id : \"aegfal\" , name : \"Laptop\" , description : \"MacPro: System Darwin\" , price : 2500 , ratings : [], likes : [ \"fg12cy\" ], }, { _id : \"hedfcg\" , name : \"TV\" , description : \"Smart TV:Procaster\" , price : 400 , ratings : [{ userId : \"fg12cy\" , rate : 5 }], likes : [ \"fg12cy\" ], }, ]; Imagine you are getting the above users collection from a MongoDB database. a. Create a function called signUp which allows user to add to the collection. If user exists, inform the user that he has already an account. b. Create a function called signIn which allows user to sign in to the application The products array has three elements and each of them has six properties. a. Create a function called rateProduct which rates the product b. Create a function called averageRating which calculate the average rating of a product Create a function called likeProduct. This function will helps to like to the product if it is not liked and remove like if it was liked.","title":"Object"},{"location":"exercises/javascript_fundamentals/object/#exercises","text":"","title":"\ud83d\udcbb Exercises"},{"location":"exercises/javascript_fundamentals/object/#exercises-level-1","text":"Create an empty object called dog Print the the dog object on the console Add name, legs, color, age and bark properties for the dog object. The bark property is a method which return woof woof Get name, legs, color, age and bark value from the dog object Set new properties the dog object: breed, getDogInfo","title":"Exercises: Level 1"},{"location":"exercises/javascript_fundamentals/object/#exercises-level-2","text":"Find the person who has many skills in the users object. Count logged in users,count users having greater than equal to 50 points from the following object. const users = { Alex : { email : 'alex@alex.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' ], age : 20 , isLoggedIn : false , points : 30 }, Asab : { email : 'asab@asab.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'Redux' , 'MongoDB' , 'Express' , 'React' , 'Node' ], age : 25 , isLoggedIn : false , points : 50 }, Brook : { email : 'daniel@daniel.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'React' , 'Redux' ], age : 30 , isLoggedIn : true , points : 50 }, Daniel : { email : 'daniel@alex.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'Python' ], age : 20 , isLoggedIn : false , points : 40 }, John : { email : 'john@john.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'React' , 'Redux' , 'Node.js' ], age : 20 , isLoggedIn : true , points : 50 }, Thomas : { email : 'thomas@thomas.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'React' ], age : 20 , isLoggedIn : false , points : 40 }, Paul : { email : 'paul@paul.com' , skills : [ 'HTML' , 'CSS' , 'JavaScript' , 'MongoDB' , 'Express' , 'React' , 'Node' ], age : 20 , isLoggedIn : false , points : 40 } } ``` Find people who are MERN stack developer from the users object Set your name in the users object without modifying the original users object Get all keys or properties of users object Get all the values of users object Use the countries object to print a country name, capital, populations and languages.","title":"Exercises: Level 2"},{"location":"exercises/javascript_fundamentals/object/#exercises-level-3","text":"Create an object literal called personAccount . It has firstName, lastName, incomes, expenses properties and it has totalIncome, totalExpense, accountInfo,addIncome, addExpense and accountBalance methods. Incomes is a set of incomes and its description and expenses is a set of incomes and its description. **** Questions:2, 3 and 4 are based on the following two arrays:users and products () const users = [ { _id : \"ab12ex\" , username : \"Alex\" , email : \"alex@alex.com\" , password : \"123123\" , createdAt : \"08/01/2020 9:00 AM\" , isLoggedIn : false , }, { _id : \"fg12cy\" , username : \"Asab\" , email : \"asab@asab.com\" , password : \"123456\" , createdAt : \"08/01/2020 9:30 AM\" , isLoggedIn : true , }, { _id : \"zwf8md\" , username : \"Brook\" , email : \"brook@brook.com\" , password : \"123111\" , createdAt : \"08/01/2020 9:45 AM\" , isLoggedIn : true , }, { _id : \"eefamr\" , username : \"Martha\" , email : \"martha@martha.com\" , password : \"123222\" , createdAt : \"08/01/2020 9:50 AM\" , isLoggedIn : false , }, { _id : \"ghderc\" , username : \"Thomas\" , email : \"thomas@thomas.com\" , password : \"123333\" , createdAt : \"08/01/2020 10:00 AM\" , isLoggedIn : false , }, ]; const products = [ { _id : \"eedfcf\" , name : \"mobile phone\" , description : \"Huawei Honor\" , price : 200 , ratings : [ { userId : \"fg12cy\" , rate : 5 }, { userId : \"zwf8md\" , rate : 4.5 }, ], likes : [], }, { _id : \"aegfal\" , name : \"Laptop\" , description : \"MacPro: System Darwin\" , price : 2500 , ratings : [], likes : [ \"fg12cy\" ], }, { _id : \"hedfcg\" , name : \"TV\" , description : \"Smart TV:Procaster\" , price : 400 , ratings : [{ userId : \"fg12cy\" , rate : 5 }], likes : [ \"fg12cy\" ], }, ]; Imagine you are getting the above users collection from a MongoDB database. a. Create a function called signUp which allows user to add to the collection. If user exists, inform the user that he has already an account. b. Create a function called signIn which allows user to sign in to the application The products array has three elements and each of them has six properties. a. Create a function called rateProduct which rates the product b. Create a function called averageRating which calculate the average rating of a product Create a function called likeProduct. This function will helps to like to the product if it is not liked and remove like if it was liked.","title":"Exercises: Level 3"},{"location":"exercises/javascript_fundamentals/promises/","text":"Exercises const countriesAPI = \"https://restcountries.com/v2/all\" ; const catsAPI = \"https://api.thecatapi.com/v1/breeds\" ; Exercises: Level 1 Read the countries API using fetch and print the name of country, capital, languages, population and area. Exercises: Level 2 Print out all the cat names in to catNames variable. Exercises: Level 3 Read the cats api and find the average weight of cat in metric unit. Read the countries api and find out the 10 largest countries Read the countries api and count total number of languages in the world used as officials.","title":"Promises"},{"location":"exercises/javascript_fundamentals/promises/#exercises","text":"const countriesAPI = \"https://restcountries.com/v2/all\" ; const catsAPI = \"https://api.thecatapi.com/v1/breeds\" ;","title":"Exercises"},{"location":"exercises/javascript_fundamentals/promises/#exercises-level-1","text":"Read the countries API using fetch and print the name of country, capital, languages, population and area.","title":"Exercises: Level 1"},{"location":"exercises/javascript_fundamentals/promises/#exercises-level-2","text":"Print out all the cat names in to catNames variable.","title":"Exercises: Level 2"},{"location":"exercises/javascript_fundamentals/promises/#exercises-level-3","text":"Read the cats api and find the average weight of cat in metric unit. Read the countries api and find out the 10 largest countries Read the countries api and count total number of languages in the world used as officials.","title":"Exercises: Level 3"},{"location":"exercises/react/","text":"Exercises Exercises: What is React? What is React? What is a library? What is a single page application? What is a component ? What is the latest version of React? What is DOM? What is React Virtual DOM? What does a web application or a website(composed of) have? Exercises: Why React? Why did you chose to use react? What measures do you use to know popularity ? What is more popular, React or Vue ? Exercises: JSX What is an HTML element? How to write a self closing HTML element? What is an HTML attribute? Write some of them What is JSX? What is babel? What is a transpiler? Exercises: JSX Elements What is a JSX element? Write your name in a JSX element and store it in a name variable Write a JSX element which displays your full name, country, title, gender, email, phone number. Use h1 for the name and p for the rest of the information and store it in a user variable Write a footer JSX element Exercises: Inline Style Create a style object for the main JSX Create a style object for the footer and app JSX Add more styles to the JSX elements Exercises: Internal Styles Apply different styles to your JSX elements Exercise: Inject data to JSX Practice how to make JSX element and injecting dynamic data(string, number, boolean, array, object)","title":"Index"},{"location":"exercises/react/#exercises","text":"","title":"Exercises"},{"location":"exercises/react/#exercises-what-is-react","text":"What is React? What is a library? What is a single page application? What is a component ? What is the latest version of React? What is DOM? What is React Virtual DOM? What does a web application or a website(composed of) have?","title":"Exercises: What is React?"},{"location":"exercises/react/#exercises-why-react","text":"Why did you chose to use react? What measures do you use to know popularity ? What is more popular, React or Vue ?","title":"Exercises: Why React?"},{"location":"exercises/react/#exercises-jsx","text":"What is an HTML element? How to write a self closing HTML element? What is an HTML attribute? Write some of them What is JSX? What is babel? What is a transpiler?","title":"Exercises: JSX"},{"location":"exercises/react/#exercises-jsx-elements","text":"What is a JSX element? Write your name in a JSX element and store it in a name variable Write a JSX element which displays your full name, country, title, gender, email, phone number. Use h1 for the name and p for the rest of the information and store it in a user variable Write a footer JSX element","title":"Exercises: JSX Elements"},{"location":"exercises/react/#exercises-inline-style","text":"Create a style object for the main JSX Create a style object for the footer and app JSX Add more styles to the JSX elements","title":"Exercises: Inline Style"},{"location":"exercises/react/#exercises-internal-styles","text":"Apply different styles to your JSX elements","title":"Exercises: Internal Styles"},{"location":"exercises/react/#exercise-inject-data-to-jsx","text":"Practice how to make JSX element and injecting dynamic data(string, number, boolean, array, object)","title":"Exercise: Inject data to JSX"},{"location":"exercises/react/components/","text":"Components Exercises: Level 1 What is the difference between a regular function and an arrow function? What is a React Component? How do you make a React functional component? What is the difference between a pure JavaScript function and a functional component? How small is a React component? Can we make a button or input field component? Make a reusable Button component. Make a reusable InputField component. Make a reusable alert box component with one div parent element and one p child element of the div(warning alert box, success alert box).","title":"Components"},{"location":"exercises/react/components/#components","text":"","title":"Components"},{"location":"exercises/react/components/#exercises-level-1","text":"What is the difference between a regular function and an arrow function? What is a React Component? How do you make a React functional component? What is the difference between a pure JavaScript function and a functional component? How small is a React component? Can we make a button or input field component? Make a reusable Button component. Make a reusable InputField component. Make a reusable alert box component with one div parent element and one p child element of the div(warning alert box, success alert box).","title":"Exercises: Level 1"},{"location":"exercises/react/events/","text":"Events Exercises: Level 1 What is an event? What is the different between an HTML element event and React event? Write at least 4 keyboard events? Write at least 8 mouse events? What are the most common mouse and keyboard events? Write an event specific to input element? Write an event specific to form element? Display the coordinate of the view port when a mouse is moving on the body? What is the difference between onInput, onChange and onBlur? Where do we put the onSubmit event ?","title":"Events"},{"location":"exercises/react/events/#events","text":"","title":"Events"},{"location":"exercises/react/events/#exercises-level-1","text":"What is an event? What is the different between an HTML element event and React event? Write at least 4 keyboard events? Write at least 8 mouse events? What are the most common mouse and keyboard events? Write an event specific to input element? Write an event specific to form element? Display the coordinate of the view port when a mouse is moving on the body? What is the difference between onInput, onChange and onBlur? Where do we put the onSubmit event ?","title":"Exercises: Level 1"},{"location":"exercises/react/map_list_keys/","text":"Map List Keys Exercises: Level 1 Why you need to map an array ? Why we need keys during mapping an array ? What is the importance of destructuring your code ? Does destructuring make your code clean and easy to read ?","title":"Map List Keys"},{"location":"exercises/react/map_list_keys/#map-list-keys","text":"","title":"Map List Keys"},{"location":"exercises/react/map_list_keys/#exercises-level-1","text":"Why you need to map an array ? Why we need keys during mapping an array ? What is the importance of destructuring your code ? Does destructuring make your code clean and easy to read ?","title":"Exercises: Level 1"},{"location":"exercises/react/props/","text":"Props Exercises: Level 1 What is props in a React component? How do you access props in a React component? What data types can we pass as props to components?","title":"Props"},{"location":"exercises/react/props/#props","text":"","title":"Props"},{"location":"exercises/react/props/#exercises-level-1","text":"What is props in a React component? How do you access props in a React component? What data types can we pass as props to components?","title":"Exercises: Level 1"},{"location":"exercises/react/setting_up/","text":"Setting Up Exercises: Level 1 What is a module? What is package? What is the difference between a module and a package. What is NPM? What is Webpack? How do you create a new React project? What are the files and folders inside a project folder(package.json, package-lock.json or yarn.lock, .gitignore,node_modules and public)? What is your favorite code editor (I believe that it is Visual Studio Code)? Add different Visual Studio Code extensions to improve your productivity(eg. prettier, ESLint etc). Try to make a different custom module in a different file and import it to index.js.","title":"Setting Up"},{"location":"exercises/react/setting_up/#setting-up","text":"","title":"Setting Up"},{"location":"exercises/react/setting_up/#exercises-level-1","text":"What is a module? What is package? What is the difference between a module and a package. What is NPM? What is Webpack? How do you create a new React project? What are the files and folders inside a project folder(package.json, package-lock.json or yarn.lock, .gitignore,node_modules and public)? What is your favorite code editor (I believe that it is Visual Studio Code)? Add different Visual Studio Code extensions to improve your productivity(eg. prettier, ESLint etc). Try to make a different custom module in a different file and import it to index.js.","title":"Exercises: Level 1"},{"location":"javascript_fundamentals/","text":"Introduction The source was taken and modified from: 30-days-of-react If you want to dive more deeply into JavaScript, I suggest to do the 30-days-of-javascript lecture. What you need: Motivation A computer Internet A browser A code editor Code Editor: Visual Studio Code Webstorm by Jetbrains","title":"Introduction"},{"location":"javascript_fundamentals/#introduction","text":"The source was taken and modified from: 30-days-of-react If you want to dive more deeply into JavaScript, I suggest to do the 30-days-of-javascript lecture. What you need: Motivation A computer Internet A browser A code editor Code Editor: Visual Studio Code Webstorm by Jetbrains","title":"Introduction"},{"location":"javascript_fundamentals/adding_javascript_to_a_webpage/","text":"Adding JavaScript to a Web Page JavaScript can be added to a web page in three different ways: Inline script Internal script Multiple External scripts The following sections show different ways of adding JavaScript code to your web page. Inline Script Create a project folder on your desktop or in any location, name it 30DaysOfJS and create an index.html file in the project folder. Then paste the following code and open it in a browser, for example Chrome . <!DOCTYPE html> < html > < head > < title > 30DaysOfScript:Inline Script </ title > </ head > < body > < button onclick = \"alert('Welcome to 30DaysOfJavaScript!')\" > Click Me </ button > </ body > </ html > Now, you just wrote your first inline script. We can create a pop up alert message using the alert() built-in function. Internal Script The internal script can be written in the head or the body , but it is preferred to put it on the body of the HTML document. First, let us write on the head part of the page. <!DOCTYPE html> < html > < head > < title > 30DaysOfScript:Internal Script </ title > < script > console . log ( \"Welcome to 30DaysOfJavaScript\" ); </ script > </ head > < body ></ body > </ html > This is how we write an internal script most of the time. Writing the JavaScript code in the body section is the most preferred option. Open the browser console to see the output from the console.log() <!DOCTYPE html> < html > < head > < title > 30DaysOfScript:Internal Script </ title > </ head > < body > < button onclick = \"alert('Welcome to 30DaysOfJavaScript!');\" > Click Me </ button > < script > console . log ( \"Welcome to 30DaysOfJavaScript\" ); </ script > </ body > </ html > Open the browser console to see the output from the console.log() External Script Similar to the internal script, the external script link can be on the header or body, but it is preferred to put it in the body. First, we should create an external JavaScript file with .js extension. All files ending with .js extension. All files ending with .js extension are JavaScript files. Create a file named introduction.js inside your project directory and write the following code and link this .js file at the bottom of the body. console . log ( \"Welcome to 30DaysOfJavaScript\" ); External scripts in the head : <!DOCTYPE html> < html > < head > < title > 30DaysOfJavaScript:External script </ title > < script src = \"introduction.js\" ></ script > </ head > < body ></ body > </ html > External scripts in the body : <!DOCTYPE html> < html > < head > < title > 30DaysOfJavaScript:External script </ title > </ head > < body > //it could be in the header or in the body // Here is the recommended place to put the external script < script src = \"introduction.js\" ></ script > </ body > </ html > Open the browser console to see the output of the console.log() Multiple External Scripts We can also link multiple external JavaScript files to a web page. Create a helloworld.js file inside the 30DaysOfJS folder and write the following code. console . log ( \"Hello, World!\" ); <!DOCTYPE html> < html > < head > < title > Multiple External Scripts </ title > </ head > < body > < script src = \"./helloworld.js\" ></ script > < script src = \"./introduction.js\" ></ script > </ body > </ html > Your main.js file should be below all other scripts . It is very important to remember this.","title":"Adding JavaScript to a Web Page"},{"location":"javascript_fundamentals/adding_javascript_to_a_webpage/#adding-javascript-to-a-web-page","text":"JavaScript can be added to a web page in three different ways: Inline script Internal script Multiple External scripts The following sections show different ways of adding JavaScript code to your web page.","title":"Adding JavaScript to a Web Page"},{"location":"javascript_fundamentals/adding_javascript_to_a_webpage/#inline-script","text":"Create a project folder on your desktop or in any location, name it 30DaysOfJS and create an index.html file in the project folder. Then paste the following code and open it in a browser, for example Chrome . <!DOCTYPE html> < html > < head > < title > 30DaysOfScript:Inline Script </ title > </ head > < body > < button onclick = \"alert('Welcome to 30DaysOfJavaScript!')\" > Click Me </ button > </ body > </ html > Now, you just wrote your first inline script. We can create a pop up alert message using the alert() built-in function.","title":"Inline Script"},{"location":"javascript_fundamentals/adding_javascript_to_a_webpage/#internal-script","text":"The internal script can be written in the head or the body , but it is preferred to put it on the body of the HTML document. First, let us write on the head part of the page. <!DOCTYPE html> < html > < head > < title > 30DaysOfScript:Internal Script </ title > < script > console . log ( \"Welcome to 30DaysOfJavaScript\" ); </ script > </ head > < body ></ body > </ html > This is how we write an internal script most of the time. Writing the JavaScript code in the body section is the most preferred option. Open the browser console to see the output from the console.log() <!DOCTYPE html> < html > < head > < title > 30DaysOfScript:Internal Script </ title > </ head > < body > < button onclick = \"alert('Welcome to 30DaysOfJavaScript!');\" > Click Me </ button > < script > console . log ( \"Welcome to 30DaysOfJavaScript\" ); </ script > </ body > </ html > Open the browser console to see the output from the console.log()","title":"Internal Script"},{"location":"javascript_fundamentals/adding_javascript_to_a_webpage/#external-script","text":"Similar to the internal script, the external script link can be on the header or body, but it is preferred to put it in the body. First, we should create an external JavaScript file with .js extension. All files ending with .js extension. All files ending with .js extension are JavaScript files. Create a file named introduction.js inside your project directory and write the following code and link this .js file at the bottom of the body. console . log ( \"Welcome to 30DaysOfJavaScript\" ); External scripts in the head : <!DOCTYPE html> < html > < head > < title > 30DaysOfJavaScript:External script </ title > < script src = \"introduction.js\" ></ script > </ head > < body ></ body > </ html > External scripts in the body : <!DOCTYPE html> < html > < head > < title > 30DaysOfJavaScript:External script </ title > </ head > < body > //it could be in the header or in the body // Here is the recommended place to put the external script < script src = \"introduction.js\" ></ script > </ body > </ html > Open the browser console to see the output of the console.log()","title":"External Script"},{"location":"javascript_fundamentals/adding_javascript_to_a_webpage/#multiple-external-scripts","text":"We can also link multiple external JavaScript files to a web page. Create a helloworld.js file inside the 30DaysOfJS folder and write the following code. console . log ( \"Hello, World!\" ); <!DOCTYPE html> < html > < head > < title > Multiple External Scripts </ title > </ head > < body > < script src = \"./helloworld.js\" ></ script > < script src = \"./introduction.js\" ></ script > </ body > </ html > Your main.js file should be below all other scripts . It is very important to remember this.","title":"Multiple External Scripts"},{"location":"javascript_fundamentals/arrays/","text":"Arrays In contrast to variables, an array can store multiple values . Each value in an array has an index , and each index has a reference in a memory address . Each value can be accessed by using their indexes . The index of an array starts from zero , and the index of the last element is less by one from the length of the array. An array is a collection of different data types which are ordered and changeable(modifiable). An array allows storing duplicate elements and different data types. An array can be empty, or it may have different data type values. How to create an empty array In JavaScript, we can create an array in different ways. Let us see different ways to create an array. It is very common to use const instead of let to declare an array variable. If you are using const it means you do not use that variable name again. Using Array constructor // syntax const arr = Array (); // or // let arr = new Array() console . log ( arr ); // [] Using square brackets([]) // syntax // This the most recommended way to create an empty list const arr = []; console . log ( arr ); How to create an array with values Array with initial values. We use length property to find the length of an array. const numbers = [ 0 , 3.14 , 9.81 , 37 , 98.6 , 100 ]; // array of numbers const fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; // array of strings, fruits const vegetables = [ \"Tomato\" , \"Potato\" , \"Cabbage\" , \"Onion\" , \"Carrot\" ]; // array of strings, vegetables const animalProducts = [ \"milk\" , \"meat\" , \"butter\" , \"yoghurt\" ]; // array of strings, products const webTechs = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Redux\" , \"Node\" , \"MongDB\" ]; // array of web technologies const countries = [ \"Finland\" , \"Denmark\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; // array of strings, countries // Print the array and its length console . log ( \"Numbers:\" , numbers ); console . log ( \"Number of numbers:\" , numbers . length ); console . log ( \"Fruits:\" , fruits ); console . log ( \"Number of fruits:\" , fruits . length ); console . log ( \"Vegetables:\" , vegetables ); console . log ( \"Number of vegetables:\" , vegetables . length ); console . log ( \"Animal products:\" , animalProducts ); console . log ( \"Number of animal products:\" , animalProducts . length ); console . log ( \"Web technologies:\" , webTechs ); console . log ( \"Number of web technologies:\" , webTechs . length ); console . log ( \"Countries:\" , countries ); console . log ( \"Number of countries:\" , countries . length ); Numbers: [ 0 , 3 .14, 9 .81, 37 , 98 .6, 100 ] Number of numbers: 6 Fruits: [ 'banana' , 'orange' , 'mango' , 'lemon' ] Number of fruits: 4 Vegetables: [ 'Tomato' , 'Potato' , 'Cabbage' , 'Onion' , 'Carrot' ] Number of vegetables: 5 Animal products: [ 'milk' , 'meat' , 'butter' , 'yoghurt' ] Number of animal products: 4 Web technologies: [ 'HTML' , 'CSS' , 'JS' , 'React' , 'Redux' , 'Node' , 'MongDB' ] Number of web technologies: 7 Countries: [ 'Finland' , 'Estonia' , 'Denmark' , 'Sweden' , 'Norway' ] Number of countries: 5 Array can have items of different data types const arr = [ \"Asabeneh\" , 250 , true , { country : \"Finland\" , city : \"Helsinki\" }, { skills : [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Python\" ] }, ]; // arr containing different data types console . log ( arr ); Creating an array using split As we have seen in the earlier section, we can split a string at different positions, and we can change to an array. Let us see the examples below. let js = \"JavaScript\" ; const charsInJavaScript = js . split ( \"\" ); console . log ( charsInJavaScript ); // [\"J\", \"a\", \"v\", \"a\", \"S\", \"c\", \"r\", \"i\", \"p\", \"t\"] let companiesString = \"Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon\" ; const companies = companiesString . split ( \",\" ); console . log ( companies ); // [\"Facebook\", \" Google\", \" Microsoft\", \" Apple\", \" IBM\", \" Oracle\", \" Amazon\"] let txt = \"I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.\" ; const words = txt . split ( \" \" ); console . log ( words ); // the text has special characters think how you can just get only the words // [\"I\", \"love\", \"teaching\", \"and\", \"empowering\", \"people.\", \"I\", \"teach\", \"HTML,\", \"CSS,\", \"JS,\", \"React,\", \"Python\"] Accessing array items using index We access each element in an array using their index. An array index starts from 0. The picture below clearly shows the index of each element in the array. const fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; let firstFruit = fruits [ 0 ]; // we are accessing the first item using its index console . log ( firstFruit ); // banana secondFruit = fruits [ 1 ]; console . log ( secondFruit ); // orange let lastFruit = fruits [ 3 ]; console . log ( lastFruit ); // lemon // Last index can be calculated as follows let lastIndex = fruits . length - 1 ; lastFruit = fruits [ lastIndex ]; console . log ( lastFruit ); // lemon const numbers = [ 0 , 3.14 , 9.81 , 37 , 98.6 , 100 ]; // set of numbers console . log ( numbers . length ); // => to know the size of the array, which is 6 console . log ( numbers ); // -> [0, 3.14, 9.81, 37, 98.6, 100] console . log ( numbers [ 0 ]); // -> 0 console . log ( numbers [ 5 ]); // -> 100 let lastIndex = numbers . length - 1 ; console . log ( numbers [ lastIndex ]); // -> 100 const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; // List of web technologies console . log ( webTechs ); // all the array items console . log ( webTechs . length ); // => to know the size of the array, which is 7 console . log ( webTechs [ 0 ]); // -> HTML console . log ( webTechs [ 6 ]); // -> MongoDB let lastIndex = webTechs . length - 1 ; console . log ( webTechs [ lastIndex ]); // -> MongoDB const countries = [ \"Albania\" , \"Bolivia\" , \"Canada\" , \"Denmark\" , \"Ethiopia\" , \"Finland\" , \"Germany\" , \"Hungary\" , \"Ireland\" , \"Japan\" , \"Kenya\" , ]; // List of countries console . log ( countries ); // -> all countries in array console . log ( countries [ 0 ]); // -> Albania console . log ( countries [ 10 ]); // -> Kenya let lastIndex = countries . length - 1 ; console . log ( countries [ lastIndex ]); // -> Kenya const shoppingCart = [ \"Milk\" , \"Mango\" , \"Tomato\" , \"Potato\" , \"Avocado\" , \"Meat\" , \"Eggs\" , \"Sugar\" , ]; // List of food products console . log ( shoppingCart ); // -> all shoppingCart in array console . log ( shoppingCart [ 0 ]); // -> Milk console . log ( shoppingCart [ 7 ]); // -> Sugar let lastIndex = shoppingCart . length - 1 ; console . log ( shoppingCart [ lastIndex ]); // -> Sugar Modifying array element An array is mutable(modifiable). Once an array is created, we can modify the contents of the array elements. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers [ 0 ] = 10 ; // changing 1 at index 0 to 10 numbers [ 1 ] = 20 ; // changing 2 at index 1 to 20 console . log ( numbers ); // [10, 20, 3, 4, 5] const countries = [ \"Albania\" , \"Bolivia\" , \"Canada\" , \"Denmark\" , \"Ethiopia\" , \"Finland\" , \"Germany\" , \"Hungary\" , \"Ireland\" , \"Japan\" , \"Kenya\" , ]; countries [ 0 ] = \"Afghanistan\" ; // Replacing Albania by Afghanistan let lastIndex = countries . length - 1 ; countries [ lastIndex ] = \"Korea\" ; // Replacing Kenya by Korea console . log ( countries ); [ \"Afghanistan\" , \"Bolivia\" , \"Canada\" , \"Denmark\" , \"Ethiopia\" , \"Finland\" , \"Germany\" , \"Hungary\" , \"Ireland\" , \"Japan\" , \"Korea\" ] Methods to manipulate array There are different methods to manipulate an array. These are some of the available methods to deal with arrays: Array, length, concat, indexOf, slice, splice, join, toString, includes, lastIndexOf, isArray, fill, push, pop, shift, unshift Array Constructor Array:To create an array. const arr = Array (); // creates an an empty array console . log ( arr ); const eightEmptyValues = Array ( 8 ); // it creates eight empty values console . log ( eightEmptyValues ); // [empty x 8] Creating static values with fill fill: Fill all the array elements with a static value const arr = Array (); // creates an an empty array console . log ( arr ); const eightXvalues = Array ( 8 ). fill ( \"X\" ); // it creates eight element values filled with 'X' console . log ( eightXvalues ); // ['X', 'X','X','X','X','X','X','X'] const eight0values = Array ( 8 ). fill ( 0 ); // it creates eight element values filled with '0' console . log ( eight0values ); // [0, 0, 0, 0, 0, 0, 0, 0] const four4values = Array ( 4 ). fill ( 4 ); // it creates 4 element values filled with '4' console . log ( four4values ); // [4, 4, 4, 4] Concatenating array using concat concat:To concatenate two arrays. const firstList = [ 1 , 2 , 3 ]; const secondList = [ 4 , 5 , 6 ]; const thirdList = firstList . concat ( secondList ); console . log ( thirdList ); // [1, 2, 3, 4, 5, 6] const fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; // array of fruits const vegetables = [ \"Tomato\" , \"Potato\" , \"Cabbage\" , \"Onion\" , \"Carrot\" ]; // array of vegetables const fruitsAndVegetables = fruits . concat ( vegetables ); // concatenate the two arrays console . log ( fruitsAndVegetables ); [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" , \"Tomato\" , \"Potato\" , \"Cabbage\" , \"Onion\" , \"Carrot\" ] Getting array length Length:To know the size of the array const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . length ); // -> 5 is the size of the array Getting index of an element in an array indexOf:To check if an item exist in an array. If it exists it returns the index else it returns -1. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . indexOf ( 5 )); // -> 4 console . log ( numbers . indexOf ( 0 )); // -> -1 console . log ( numbers . indexOf ( 1 )); // -> 0 console . log ( numbers . indexOf ( 6 )); // -> -1 Check an element if it exist in an array. Check items in a list // let us check if a banana exist in the array const fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; let index = fruits . indexOf ( \"banana\" ); // 0 if ( index != - 1 ) { console . log ( \"This fruit does exist in the array\" ); } else { console . log ( \"This fruit does not exist in the array\" ); } // This fruit does exist in the array // we can use also ternary here index != - 1 ? console . log ( \"This fruit does exist in the array\" ) : console . log ( \"This fruit does not exist in the array\" ); // let us check if a avocado exist in the array let indexOfAvocado = fruits . indexOf ( \"avocado\" ); // -1, if the element not found index is -1 if ( indexOfAvocado != - 1 ) { console . log ( \"This fruit does exist in the array\" ); } else { console . log ( \"This fruit does not exist in the array\" ); } // This fruit does not exist in the array Getting last index of an element in array lastIndexOf: It gives the position of the last item in the array. If it exist, it returns the index else it returns -1. const numbers = [ 1 , 2 , 3 , 4 , 5 , 3 , 1 , 2 ]; console . log ( numbers . lastIndexOf ( 2 )); // 7 console . log ( numbers . lastIndexOf ( 0 )); // -1 console . log ( numbers . lastIndexOf ( 1 )); // 6 console . log ( numbers . lastIndexOf ( 4 )); // 3 console . log ( numbers . lastIndexOf ( 6 )); // -1 includes:To check if an item exist in an array. If it exist it returns the true else it returns false. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . includes ( 5 )); // true console . log ( numbers . includes ( 0 )); // false console . log ( numbers . includes ( 1 )); // true console . log ( numbers . includes ( 6 )); // false const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; // List of web technologies console . log ( webTechs . includes ( \"Node\" )); // true console . log ( webTechs . includes ( \"C\" )); // false Checking array Array.isArray:To check if the data type is an array const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( Array . isArray ( numbers )); // true const number = 100 ; console . log ( Array . isArray ( number )); // false Converting array to string toString:Converts array to string const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . toString ()); // 1,2,3,4,5 const names = [ \"Asabeneh\" , \"Mathias\" , \"Elias\" , \"Brook\" ]; console . log ( names . toString ()); // Asabeneh,Mathias,Elias,Brook Joining array elements join: It is used to join the elements of the array, the argument we passed in the join method will be joined in the array and return as a string. By default, it joins with a comma, but we can pass different string parameter which can be joined between the items. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . join ()); // 1,2,3,4,5 const names = [ \"Asabeneh\" , \"Mathias\" , \"Elias\" , \"Brook\" ]; console . log ( names . join ()); // Asabeneh,Mathias,Elias,Brook console . log ( names . join ( \"\" )); //AsabenehMathiasEliasBrook console . log ( names . join ( \" \" )); //Asabeneh Mathias Elias Brook console . log ( names . join ( \", \" )); //Asabeneh, Mathias, Elias, Brook console . log ( names . join ( \" # \" )); //Asabeneh # Mathias # Elias # Brook const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; // List of web technologies console . log ( webTechs . join ()); // \"HTML,CSS,JavaScript,React,Redux,Node,MongoDB\" console . log ( webTechs . join ( \" # \" )); // \"HTML # CSS # JavaScript # React # Redux # Node # MongoDB\" Slice array elements Slice: To cut out a multiple items in range. It takes two parameters:starting and ending position. It doesn't include the ending position. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . slice ()); // -> it copies all item console . log ( numbers . slice ( 0 )); // -> it copies all item console . log ( numbers . slice ( 0 , numbers . length )); // it copies all item console . log ( numbers . slice ( 1 , 4 )); // -> [2,3,4] // it doesn't include the ending position Splice method in array Splice: It takes three parameters:Starting position, number of times to be removed and number of items to be added. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . splice ()); // -> remove all items const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . splice ( 0 , 1 )); // remove the first item const numbers = [ 1 , 2 , 3 , 4 , 5 , 6 ]; console . log ( numbers . splice ( 3 , 3 , 7 , 8 , 9 )); // -> [1, 2, 3, 7, 8, 9] //it removes three item and replace three items Adding item to an array using push Push: adding item in the end. To add item to the end of an existing array we use the push method. // syntax const arr = [ \"item1\" , \"item2\" , \"item3\" ]; arr . push ( \"new item\" ); console . log ( arr ); // ['item1', 'item2','item3','new item'] const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . push ( 6 ); console . log ( numbers ); // -> [1,2,3,4,5,6] numbers . pop (); // -> remove one item from the end console . log ( numbers ); // -> [1,2,3,4,5] let fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; fruits . push ( \"apple\" ); console . log ( fruits ); // ['banana', 'orange', 'mango', 'lemon', 'apple'] fruits . push ( \"lime\" ); console . log ( fruits ); // ['banana', 'orange', 'mango', 'lemon', 'apple', 'lime'] Removing the end element using pop pop: Removing item in the end. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . pop (); // -> remove one item from the end console . log ( numbers ); // -> [1,2,3,4] Removing an element from the beginning shift: Removing one array element in the beginning of the array. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . shift (); // -> remove one item from the beginning console . log ( numbers ); // -> [2,3,4,5] Add an element from the beginning unshift: Adding array element in the beginning of the array. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . unshift ( 0 ); // -> add one item from the beginning console . log ( numbers ); // -> [0,1,2,3,4,5] Reversing array order reverse: reverse the order of an array. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . reverse (); // -> reverse array order console . log ( numbers ); // [5, 4, 3, 2, 1] numbers . reverse (); console . log ( numbers ); // [1, 2, 3, 4, 5] Sorting elements in array sort: arrange array elements in ascending order. Sort takes a call back function, we will see how we use sort with a call back function in the coming sections. const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; webTechs . sort (); console . log ( webTechs ); // [\"CSS\", \"HTML\", \"JavaScript\", \"MongoDB\", \"Node\", \"React\", \"Redux\"] webTechs . reverse (); // after sorting we can reverse it console . log ( webTechs ); // [\"Redux\", \"React\", \"Node\", \"MongoDB\", \"JavaScript\", \"HTML\", \"CSS\"] Array of arrays Array can store different data types including an array itself. Let us create an array of arrays const firstNums = [ 1 , 2 , 3 ]; const secondNums = [ 1 , 4 , 9 ]; const arrayOfArray = [ [ 1 , 2 , 3 ], [ 1 , 2 , 3 ], ]; console . log ( arrayOfArray [ 0 ]); // [1, 2, 3] const frontEnd = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Redux\" ]; const backEnd = [ \"Node\" , \"Express\" , \"MongoDB\" ]; const fullStack = [ frontEnd , backEnd ]; console . log ( fullStack ); // [[\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\"], [\"Node\", \"Express\", \"MongoDB\"]] console . log ( fullStack . length ); // 2 console . log ( fullStack [ 0 ]); // [\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\"] console . log ( fullStack [ 1 ]); // [\"Node\", \"Express\", \"MongoDB\"]","title":"Arrays"},{"location":"javascript_fundamentals/arrays/#arrays","text":"In contrast to variables, an array can store multiple values . Each value in an array has an index , and each index has a reference in a memory address . Each value can be accessed by using their indexes . The index of an array starts from zero , and the index of the last element is less by one from the length of the array. An array is a collection of different data types which are ordered and changeable(modifiable). An array allows storing duplicate elements and different data types. An array can be empty, or it may have different data type values.","title":"Arrays"},{"location":"javascript_fundamentals/arrays/#how-to-create-an-empty-array","text":"In JavaScript, we can create an array in different ways. Let us see different ways to create an array. It is very common to use const instead of let to declare an array variable. If you are using const it means you do not use that variable name again. Using Array constructor // syntax const arr = Array (); // or // let arr = new Array() console . log ( arr ); // [] Using square brackets([]) // syntax // This the most recommended way to create an empty list const arr = []; console . log ( arr );","title":"How to create an empty array"},{"location":"javascript_fundamentals/arrays/#how-to-create-an-array-with-values","text":"Array with initial values. We use length property to find the length of an array. const numbers = [ 0 , 3.14 , 9.81 , 37 , 98.6 , 100 ]; // array of numbers const fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; // array of strings, fruits const vegetables = [ \"Tomato\" , \"Potato\" , \"Cabbage\" , \"Onion\" , \"Carrot\" ]; // array of strings, vegetables const animalProducts = [ \"milk\" , \"meat\" , \"butter\" , \"yoghurt\" ]; // array of strings, products const webTechs = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Redux\" , \"Node\" , \"MongDB\" ]; // array of web technologies const countries = [ \"Finland\" , \"Denmark\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; // array of strings, countries // Print the array and its length console . log ( \"Numbers:\" , numbers ); console . log ( \"Number of numbers:\" , numbers . length ); console . log ( \"Fruits:\" , fruits ); console . log ( \"Number of fruits:\" , fruits . length ); console . log ( \"Vegetables:\" , vegetables ); console . log ( \"Number of vegetables:\" , vegetables . length ); console . log ( \"Animal products:\" , animalProducts ); console . log ( \"Number of animal products:\" , animalProducts . length ); console . log ( \"Web technologies:\" , webTechs ); console . log ( \"Number of web technologies:\" , webTechs . length ); console . log ( \"Countries:\" , countries ); console . log ( \"Number of countries:\" , countries . length ); Numbers: [ 0 , 3 .14, 9 .81, 37 , 98 .6, 100 ] Number of numbers: 6 Fruits: [ 'banana' , 'orange' , 'mango' , 'lemon' ] Number of fruits: 4 Vegetables: [ 'Tomato' , 'Potato' , 'Cabbage' , 'Onion' , 'Carrot' ] Number of vegetables: 5 Animal products: [ 'milk' , 'meat' , 'butter' , 'yoghurt' ] Number of animal products: 4 Web technologies: [ 'HTML' , 'CSS' , 'JS' , 'React' , 'Redux' , 'Node' , 'MongDB' ] Number of web technologies: 7 Countries: [ 'Finland' , 'Estonia' , 'Denmark' , 'Sweden' , 'Norway' ] Number of countries: 5 Array can have items of different data types const arr = [ \"Asabeneh\" , 250 , true , { country : \"Finland\" , city : \"Helsinki\" }, { skills : [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Python\" ] }, ]; // arr containing different data types console . log ( arr );","title":"How to create an array with values"},{"location":"javascript_fundamentals/arrays/#creating-an-array-using-split","text":"As we have seen in the earlier section, we can split a string at different positions, and we can change to an array. Let us see the examples below. let js = \"JavaScript\" ; const charsInJavaScript = js . split ( \"\" ); console . log ( charsInJavaScript ); // [\"J\", \"a\", \"v\", \"a\", \"S\", \"c\", \"r\", \"i\", \"p\", \"t\"] let companiesString = \"Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon\" ; const companies = companiesString . split ( \",\" ); console . log ( companies ); // [\"Facebook\", \" Google\", \" Microsoft\", \" Apple\", \" IBM\", \" Oracle\", \" Amazon\"] let txt = \"I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.\" ; const words = txt . split ( \" \" ); console . log ( words ); // the text has special characters think how you can just get only the words // [\"I\", \"love\", \"teaching\", \"and\", \"empowering\", \"people.\", \"I\", \"teach\", \"HTML,\", \"CSS,\", \"JS,\", \"React,\", \"Python\"]","title":"Creating an array using split"},{"location":"javascript_fundamentals/arrays/#accessing-array-items-using-index","text":"We access each element in an array using their index. An array index starts from 0. The picture below clearly shows the index of each element in the array. const fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; let firstFruit = fruits [ 0 ]; // we are accessing the first item using its index console . log ( firstFruit ); // banana secondFruit = fruits [ 1 ]; console . log ( secondFruit ); // orange let lastFruit = fruits [ 3 ]; console . log ( lastFruit ); // lemon // Last index can be calculated as follows let lastIndex = fruits . length - 1 ; lastFruit = fruits [ lastIndex ]; console . log ( lastFruit ); // lemon const numbers = [ 0 , 3.14 , 9.81 , 37 , 98.6 , 100 ]; // set of numbers console . log ( numbers . length ); // => to know the size of the array, which is 6 console . log ( numbers ); // -> [0, 3.14, 9.81, 37, 98.6, 100] console . log ( numbers [ 0 ]); // -> 0 console . log ( numbers [ 5 ]); // -> 100 let lastIndex = numbers . length - 1 ; console . log ( numbers [ lastIndex ]); // -> 100 const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; // List of web technologies console . log ( webTechs ); // all the array items console . log ( webTechs . length ); // => to know the size of the array, which is 7 console . log ( webTechs [ 0 ]); // -> HTML console . log ( webTechs [ 6 ]); // -> MongoDB let lastIndex = webTechs . length - 1 ; console . log ( webTechs [ lastIndex ]); // -> MongoDB const countries = [ \"Albania\" , \"Bolivia\" , \"Canada\" , \"Denmark\" , \"Ethiopia\" , \"Finland\" , \"Germany\" , \"Hungary\" , \"Ireland\" , \"Japan\" , \"Kenya\" , ]; // List of countries console . log ( countries ); // -> all countries in array console . log ( countries [ 0 ]); // -> Albania console . log ( countries [ 10 ]); // -> Kenya let lastIndex = countries . length - 1 ; console . log ( countries [ lastIndex ]); // -> Kenya const shoppingCart = [ \"Milk\" , \"Mango\" , \"Tomato\" , \"Potato\" , \"Avocado\" , \"Meat\" , \"Eggs\" , \"Sugar\" , ]; // List of food products console . log ( shoppingCart ); // -> all shoppingCart in array console . log ( shoppingCart [ 0 ]); // -> Milk console . log ( shoppingCart [ 7 ]); // -> Sugar let lastIndex = shoppingCart . length - 1 ; console . log ( shoppingCart [ lastIndex ]); // -> Sugar","title":"Accessing array items using index"},{"location":"javascript_fundamentals/arrays/#modifying-array-element","text":"An array is mutable(modifiable). Once an array is created, we can modify the contents of the array elements. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers [ 0 ] = 10 ; // changing 1 at index 0 to 10 numbers [ 1 ] = 20 ; // changing 2 at index 1 to 20 console . log ( numbers ); // [10, 20, 3, 4, 5] const countries = [ \"Albania\" , \"Bolivia\" , \"Canada\" , \"Denmark\" , \"Ethiopia\" , \"Finland\" , \"Germany\" , \"Hungary\" , \"Ireland\" , \"Japan\" , \"Kenya\" , ]; countries [ 0 ] = \"Afghanistan\" ; // Replacing Albania by Afghanistan let lastIndex = countries . length - 1 ; countries [ lastIndex ] = \"Korea\" ; // Replacing Kenya by Korea console . log ( countries ); [ \"Afghanistan\" , \"Bolivia\" , \"Canada\" , \"Denmark\" , \"Ethiopia\" , \"Finland\" , \"Germany\" , \"Hungary\" , \"Ireland\" , \"Japan\" , \"Korea\" ]","title":"Modifying array element"},{"location":"javascript_fundamentals/arrays/#methods-to-manipulate-array","text":"There are different methods to manipulate an array. These are some of the available methods to deal with arrays: Array, length, concat, indexOf, slice, splice, join, toString, includes, lastIndexOf, isArray, fill, push, pop, shift, unshift","title":"Methods to manipulate array"},{"location":"javascript_fundamentals/arrays/#array-constructor","text":"Array:To create an array. const arr = Array (); // creates an an empty array console . log ( arr ); const eightEmptyValues = Array ( 8 ); // it creates eight empty values console . log ( eightEmptyValues ); // [empty x 8]","title":"Array Constructor"},{"location":"javascript_fundamentals/arrays/#creating-static-values-with-fill","text":"fill: Fill all the array elements with a static value const arr = Array (); // creates an an empty array console . log ( arr ); const eightXvalues = Array ( 8 ). fill ( \"X\" ); // it creates eight element values filled with 'X' console . log ( eightXvalues ); // ['X', 'X','X','X','X','X','X','X'] const eight0values = Array ( 8 ). fill ( 0 ); // it creates eight element values filled with '0' console . log ( eight0values ); // [0, 0, 0, 0, 0, 0, 0, 0] const four4values = Array ( 4 ). fill ( 4 ); // it creates 4 element values filled with '4' console . log ( four4values ); // [4, 4, 4, 4]","title":"Creating static values with fill"},{"location":"javascript_fundamentals/arrays/#concatenating-array-using-concat","text":"concat:To concatenate two arrays. const firstList = [ 1 , 2 , 3 ]; const secondList = [ 4 , 5 , 6 ]; const thirdList = firstList . concat ( secondList ); console . log ( thirdList ); // [1, 2, 3, 4, 5, 6] const fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; // array of fruits const vegetables = [ \"Tomato\" , \"Potato\" , \"Cabbage\" , \"Onion\" , \"Carrot\" ]; // array of vegetables const fruitsAndVegetables = fruits . concat ( vegetables ); // concatenate the two arrays console . log ( fruitsAndVegetables ); [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" , \"Tomato\" , \"Potato\" , \"Cabbage\" , \"Onion\" , \"Carrot\" ]","title":"Concatenating array using concat"},{"location":"javascript_fundamentals/arrays/#getting-array-length","text":"Length:To know the size of the array const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . length ); // -> 5 is the size of the array","title":"Getting array length"},{"location":"javascript_fundamentals/arrays/#getting-index-of-an-element-in-an-array","text":"indexOf:To check if an item exist in an array. If it exists it returns the index else it returns -1. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . indexOf ( 5 )); // -> 4 console . log ( numbers . indexOf ( 0 )); // -> -1 console . log ( numbers . indexOf ( 1 )); // -> 0 console . log ( numbers . indexOf ( 6 )); // -> -1 Check an element if it exist in an array. Check items in a list // let us check if a banana exist in the array const fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; let index = fruits . indexOf ( \"banana\" ); // 0 if ( index != - 1 ) { console . log ( \"This fruit does exist in the array\" ); } else { console . log ( \"This fruit does not exist in the array\" ); } // This fruit does exist in the array // we can use also ternary here index != - 1 ? console . log ( \"This fruit does exist in the array\" ) : console . log ( \"This fruit does not exist in the array\" ); // let us check if a avocado exist in the array let indexOfAvocado = fruits . indexOf ( \"avocado\" ); // -1, if the element not found index is -1 if ( indexOfAvocado != - 1 ) { console . log ( \"This fruit does exist in the array\" ); } else { console . log ( \"This fruit does not exist in the array\" ); } // This fruit does not exist in the array","title":"Getting index of an element in an array"},{"location":"javascript_fundamentals/arrays/#getting-last-index-of-an-element-in-array","text":"lastIndexOf: It gives the position of the last item in the array. If it exist, it returns the index else it returns -1. const numbers = [ 1 , 2 , 3 , 4 , 5 , 3 , 1 , 2 ]; console . log ( numbers . lastIndexOf ( 2 )); // 7 console . log ( numbers . lastIndexOf ( 0 )); // -1 console . log ( numbers . lastIndexOf ( 1 )); // 6 console . log ( numbers . lastIndexOf ( 4 )); // 3 console . log ( numbers . lastIndexOf ( 6 )); // -1 includes:To check if an item exist in an array. If it exist it returns the true else it returns false. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . includes ( 5 )); // true console . log ( numbers . includes ( 0 )); // false console . log ( numbers . includes ( 1 )); // true console . log ( numbers . includes ( 6 )); // false const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; // List of web technologies console . log ( webTechs . includes ( \"Node\" )); // true console . log ( webTechs . includes ( \"C\" )); // false","title":"Getting last index of an element in array"},{"location":"javascript_fundamentals/arrays/#checking-array","text":"Array.isArray:To check if the data type is an array const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( Array . isArray ( numbers )); // true const number = 100 ; console . log ( Array . isArray ( number )); // false","title":"Checking array"},{"location":"javascript_fundamentals/arrays/#converting-array-to-string","text":"toString:Converts array to string const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . toString ()); // 1,2,3,4,5 const names = [ \"Asabeneh\" , \"Mathias\" , \"Elias\" , \"Brook\" ]; console . log ( names . toString ()); // Asabeneh,Mathias,Elias,Brook","title":"Converting array to string"},{"location":"javascript_fundamentals/arrays/#joining-array-elements","text":"join: It is used to join the elements of the array, the argument we passed in the join method will be joined in the array and return as a string. By default, it joins with a comma, but we can pass different string parameter which can be joined between the items. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . join ()); // 1,2,3,4,5 const names = [ \"Asabeneh\" , \"Mathias\" , \"Elias\" , \"Brook\" ]; console . log ( names . join ()); // Asabeneh,Mathias,Elias,Brook console . log ( names . join ( \"\" )); //AsabenehMathiasEliasBrook console . log ( names . join ( \" \" )); //Asabeneh Mathias Elias Brook console . log ( names . join ( \", \" )); //Asabeneh, Mathias, Elias, Brook console . log ( names . join ( \" # \" )); //Asabeneh # Mathias # Elias # Brook const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; // List of web technologies console . log ( webTechs . join ()); // \"HTML,CSS,JavaScript,React,Redux,Node,MongoDB\" console . log ( webTechs . join ( \" # \" )); // \"HTML # CSS # JavaScript # React # Redux # Node # MongoDB\"","title":"Joining array elements"},{"location":"javascript_fundamentals/arrays/#slice-array-elements","text":"Slice: To cut out a multiple items in range. It takes two parameters:starting and ending position. It doesn't include the ending position. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . slice ()); // -> it copies all item console . log ( numbers . slice ( 0 )); // -> it copies all item console . log ( numbers . slice ( 0 , numbers . length )); // it copies all item console . log ( numbers . slice ( 1 , 4 )); // -> [2,3,4] // it doesn't include the ending position","title":"Slice array elements"},{"location":"javascript_fundamentals/arrays/#splice-method-in-array","text":"Splice: It takes three parameters:Starting position, number of times to be removed and number of items to be added. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . splice ()); // -> remove all items const numbers = [ 1 , 2 , 3 , 4 , 5 ]; console . log ( numbers . splice ( 0 , 1 )); // remove the first item const numbers = [ 1 , 2 , 3 , 4 , 5 , 6 ]; console . log ( numbers . splice ( 3 , 3 , 7 , 8 , 9 )); // -> [1, 2, 3, 7, 8, 9] //it removes three item and replace three items","title":"Splice method in array"},{"location":"javascript_fundamentals/arrays/#adding-item-to-an-array-using-push","text":"Push: adding item in the end. To add item to the end of an existing array we use the push method. // syntax const arr = [ \"item1\" , \"item2\" , \"item3\" ]; arr . push ( \"new item\" ); console . log ( arr ); // ['item1', 'item2','item3','new item'] const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . push ( 6 ); console . log ( numbers ); // -> [1,2,3,4,5,6] numbers . pop (); // -> remove one item from the end console . log ( numbers ); // -> [1,2,3,4,5] let fruits = [ \"banana\" , \"orange\" , \"mango\" , \"lemon\" ]; fruits . push ( \"apple\" ); console . log ( fruits ); // ['banana', 'orange', 'mango', 'lemon', 'apple'] fruits . push ( \"lime\" ); console . log ( fruits ); // ['banana', 'orange', 'mango', 'lemon', 'apple', 'lime']","title":"Adding item to an array using push"},{"location":"javascript_fundamentals/arrays/#removing-the-end-element-using-pop","text":"pop: Removing item in the end. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . pop (); // -> remove one item from the end console . log ( numbers ); // -> [1,2,3,4]","title":"Removing the end element using pop"},{"location":"javascript_fundamentals/arrays/#removing-an-element-from-the-beginning","text":"shift: Removing one array element in the beginning of the array. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . shift (); // -> remove one item from the beginning console . log ( numbers ); // -> [2,3,4,5]","title":"Removing an element from the beginning"},{"location":"javascript_fundamentals/arrays/#add-an-element-from-the-beginning","text":"unshift: Adding array element in the beginning of the array. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . unshift ( 0 ); // -> add one item from the beginning console . log ( numbers ); // -> [0,1,2,3,4,5]","title":"Add an element from the beginning"},{"location":"javascript_fundamentals/arrays/#reversing-array-order","text":"reverse: reverse the order of an array. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . reverse (); // -> reverse array order console . log ( numbers ); // [5, 4, 3, 2, 1] numbers . reverse (); console . log ( numbers ); // [1, 2, 3, 4, 5]","title":"Reversing array order"},{"location":"javascript_fundamentals/arrays/#sorting-elements-in-array","text":"sort: arrange array elements in ascending order. Sort takes a call back function, we will see how we use sort with a call back function in the coming sections. const webTechs = [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Redux\" , \"Node\" , \"MongoDB\" , ]; webTechs . sort (); console . log ( webTechs ); // [\"CSS\", \"HTML\", \"JavaScript\", \"MongoDB\", \"Node\", \"React\", \"Redux\"] webTechs . reverse (); // after sorting we can reverse it console . log ( webTechs ); // [\"Redux\", \"React\", \"Node\", \"MongoDB\", \"JavaScript\", \"HTML\", \"CSS\"]","title":"Sorting elements in array"},{"location":"javascript_fundamentals/arrays/#array-of-arrays","text":"Array can store different data types including an array itself. Let us create an array of arrays const firstNums = [ 1 , 2 , 3 ]; const secondNums = [ 1 , 4 , 9 ]; const arrayOfArray = [ [ 1 , 2 , 3 ], [ 1 , 2 , 3 ], ]; console . log ( arrayOfArray [ 0 ]); // [1, 2, 3] const frontEnd = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Redux\" ]; const backEnd = [ \"Node\" , \"Express\" , \"MongoDB\" ]; const fullStack = [ frontEnd , backEnd ]; console . log ( fullStack ); // [[\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\"], [\"Node\", \"Express\", \"MongoDB\"]] console . log ( fullStack . length ); // 2 console . log ( fullStack [ 0 ]); // [\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\"] console . log ( fullStack [ 1 ]); // [\"Node\", \"Express\", \"MongoDB\"]","title":"Array of arrays"},{"location":"javascript_fundamentals/classes/","text":"Classes JavaScript is an object oriented programming language. Everything in JavScript is an object, with its properties and methods. We create class to create an object. A Class is like an object constructor, or a \"blueprint\" for creating objects. We instantiate a class to create an object. The class defines attributes and the behavior of the object, while the object, on the other hand, represents the class. Once we create a class we can create object from it whenever we want. Creating an object from a class is called class instantiation. In the object section, we saw how to create an object literal. Object literal is a singleton. If we want to get a similar object , we have to write it. However, class allows to create many objects. This helps to reduce amount of code and repetition of code. Defining a classes To define a class in JavaScript we need the keyword class , the name of a class in CamelCase and block code(two curly brackets). Let us create a class name Person. // syntax class ClassName { // code goes here } Example: class Person { // code goes here } We have created an Person class but it does not have any thing inside. Class Instantiation Instantiation class means creating an object from a class. We need the keyword new and we call the name of the class after the word new. Let us create a dog object from our Person class. class Person { // code goes here } const person = new Person (); console . log ( person ); Person {} As you can see, we have created a person object. Since the class did not have any properties yet the object is also empty. Let use the class constructor to pass different properties for the class. Class Constructor The constructor is a builtin function which allows as to create a blueprint for our object. The constructor function starts with a keyword constructor followed by a parenthesis. Inside the parenthesis we pass the properties of the object as parameter. We use the this keyword to attach the constructor parameters with the class. The following Person class constructor has firstName and lastName property. These properties are attached to the Person class using this keyword. This refers to the class itself. class Person { constructor ( firstName , lastName ) { console . log ( this ); // Check the output from here this . firstName = firstName ; this . lastName = lastName ; } } const person = new Person (); console . log ( person ); Person { firstName: undefined, lastName } All the keys of the object are undefined. When ever we instantiate we should pass the value of the properties. Let us pass value at this time when we instantiate the class. class Person { constructor ( firstName , lastName ) { this . firstName = firstName ; this . lastName = lastName ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" ); console . log ( person1 ); Person { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" } As we have stated at the very beginning that once we create a class we can create many object using the class. Now, let us create many person objects using the Person class. class Person { constructor ( firstName , lastName ) { console . log ( this ); // Check the output from here this . firstName = firstName ; this . lastName = lastName ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" ); const person3 = new Person ( \"Abraham\" , \"Yetayeh\" ); console . log ( person1 ); console . log ( person2 ); console . log ( person3 ); Person { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" } Person { firstName: \"Lidiya\" , lastName: \"Tekle\" } Person { firstName: \"Abraham\" , lastName: \"Yetayeh\" } Using the class Person we created three persons object. As you can see our class did not many properties let us add more properties to the class. class Person { constructor ( firstName , lastName , age , country , city ) { console . log ( this ); // Check the output from here this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); console . log ( person1 ); Person { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: 250 , country: \"Finland\" , city: \"Helsinki\" } Default values with constructor The constructor function properties may have a default value like other regular functions. class Person { constructor ( firstName = \"Asabeneh\" , lastName = \"Yetayeh\" , age = 250 , country = \"Finland\" , city = \"Helsinki\" ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; } } const person1 = new Person (); // it will take the default values const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); console . log ( person1 ); console . log ( person2 ); Person { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: 250 , country: \"Finland\" , city: \"Helsinki\" } Person { firstName: \"Lidiya\" , lastName: \"Tekle\" , age: 28 , country: \"Finland\" , city: \"Espoo\" } Class methods The constructor inside a class is a builtin function which allow us to create a blueprint for the object. In a class we can create class methods. Methods are JavaScript functions inside the class. Let us create some class methods. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); console . log ( person1 . getFullName ()); console . log ( person2 . getFullName ()); Asabeneh Yetayeh test.js:19 Lidiya Tekle Properties with initial value When we create a class for some properties we may have an initial value. For instance if you are playing a game, you starting score will be zero. So, we may have a starting score or score which is zero. In other way, we may have an initial skill and we will acquire some skill after some time. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); console . log ( person1 . score ); console . log ( person2 . score ); console . log ( person1 . skills ); console . log ( person2 . skills ); 0 0 [] [] A method could be regular method or a getter or a setter. Let us see, getter and setter. getter The get method allow us to access value from the object. We write a get method using keyword get followed by a function. Instead of accessing properties directly from the object we use getter to get the value. See the example bellow class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } get getScore () { return this . score ; } get getSkills () { return this . skills ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); console . log ( person1 . getScore ); // We do not need parenthesis to call a getter method console . log ( person2 . getScore ); console . log ( person1 . getSkills ); console . log ( person2 . getSkills ); 0 0 [] [] setter The setter method allow us to modify the value of certain properties. We write a setter method using keyword set followed by a function. See the example bellow. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } get getScore () { return this . score ; } get getSkills () { return this . skills ; } set setScore ( score ) { this . score += score ; } set setSkill ( skill ) { this . skills . push ( skill ); } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); person1 . setScore = 1 ; person1 . setSkill = \"HTML\" ; person1 . setSkill = \"CSS\" ; person1 . setSkill = \"JavaScript\" ; person2 . setScore = 1 ; person2 . setSkill = \"Planning\" ; person2 . setSkill = \"Managing\" ; person2 . setSkill = \"Organizing\" ; console . log ( person1 . score ); console . log ( person2 . score ); console . log ( person1 . skills ); console . log ( person2 . skills ); 1 1 [ \"HTML\" , \"CSS\" , \"JavaScript\" ] [ \"Planning\" , \"Managing\" , \"Organizing\" ] Do not be puzzled by the difference between regular method and a getter. If you know how to make a regular method you are good. Let us add regular method called getPersonInfo in the Person class. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } get getScore () { return this . score ; } get getSkills () { return this . skills ; } set setScore ( score ) { this . score += score ; } set setSkill ( skill ) { this . skills . push ( skill ); } getPersonInfo () { let fullName = this . getFullName (); let skills = this . skills . length > 0 && this . skills . slice ( 0 , this . skills . length - 1 ). join ( \", \" ) + ` and ${ this . skills [ this . skills . length - 1 ] } ` ; let formattedSkills = skills ? `He knows ${ skills } ` : \"\" ; let info = ` ${ fullName } is ${ this . age } . He lives ${ this . city } , ${ this . country } . ${ formattedSkills } ` ; return info ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); const person3 = new Person ( \"John\" , \"Doe\" , 50 , \"Mars\" , \"Mars city\" ); person1 . setScore = 1 ; person1 . setSkill = \"HTML\" ; person1 . setSkill = \"CSS\" ; person1 . setSkill = \"JavaScript\" ; person2 . setScore = 1 ; person2 . setSkill = \"Planning\" ; person2 . setSkill = \"Managing\" ; person2 . setSkill = \"Organizing\" ; console . log ( person1 . getScore ); console . log ( person2 . getScore ); console . log ( person1 . getSkills ); console . log ( person2 . getSkills ); console . log ( person3 . getSkills ); console . log ( person1 . getPersonInfo ()); console . log ( person2 . getPersonInfo ()); console . log ( person3 . getPersonInfo ()); 1 1 [ \"HTML\" , \"CSS\" , \"JavaScript\" ] [ \"Planning\" , \"Managing\" , \"Organizing\" ] [] Asabeneh Yetayeh is 250 . He lives Helsinki, Finland. He knows HTML, CSS and JavaScript Lidiya Tekle is 28 . He lives Espoo, Finland. He knows Planning, Managing and Organizing John Doe is 50 . He lives Mars city, Mars. Static method The static keyword defines a static method for a class. Static methods are not called on instances of the class. Instead, they are called on the class itself. These are often utility functions, such as functions to create or clone objects. An example of static method is Date.now() . The now method is called directly from the class. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } get getScore () { return this . score ; } get getSkills () { return this . skills ; } set setScore ( score ) { this . score += score ; } set setSkill ( skill ) { this . skills . push ( skill ); } getPersonInfo () { let fullName = this . getFullName (); let skills = this . skills . length > 0 && this . skills . slice ( 0 , this . skills . length - 1 ). join ( \", \" ) + ` and ${ this . skills [ this . skills . length - 1 ] } ` ; let formattedSkills = skills ? `He knows ${ skills } ` : \"\" ; let info = ` ${ fullName } is ${ this . age } . He lives ${ this . city } , ${ this . country } . ${ formattedSkills } ` ; return info ; } static favoriteSkill () { const skills = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Python\" , \"Node\" ]; const index = Math . floor ( Math . random () * skills . length ); return skills [ index ]; } static showDateTime () { let now = new Date (); let year = now . getFullYear (); let month = now . getMonth () + 1 ; let date = now . getDate (); let hours = now . getHours (); let minutes = now . getMinutes (); if ( hours < 10 ) { hours = \"0\" + hours ; } if ( minutes < 10 ) { minutes = \"0\" + minutes ; } let dateMonthYear = date + \".\" + month + \".\" + year ; let time = hours + \":\" + minutes ; let fullTime = dateMonthYear + \" \" + time ; return fullTime ; } } console . log ( Person . favoriteSkill ()); console . log ( Person . showDateTime ()); Node 15 .1.2020 23 :56 The static methods are methods which can be used as utility functions. Inheritance Using inheritance we can access all the properties and the methods of the parent class. This reduces repetition of code. If you remember, we have a Person parent class and we will create children from it. Our children class could be student, teach etc. // syntax class ChildClassName extends { // code goes here } Let us create a Student child class from Person parent class. class Student extends Person { saySomething () { console . log ( \"I am a child of the person class\" ); } } const s1 = new Student ( \"Asabeneh\" , \"Yetayeh\" , \"Finland\" , 250 , \"Helsinki\" ); console . log ( s1 ); console . log ( s1 . saySomething ()); console . log ( s1 . getFullName ()); console . log ( s1 . getPersonInfo ()); Student { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: \"Finland\" , country: 250 , city: \"Helsinki\" , \u2026 } I am a child of the person class Asabeneh Yetayeh Student { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: \"Finland\" , country: 250 , city: \"Helsinki\" , \u2026 } Asabeneh Yetayeh is Finland. He lives Helsinki, 250 . Overriding methods As you can see, we manage to access all the methods in the Person Class and we used it in the Student child class. We can customize the parent methods, we can add additional properties to a child class. If we want to customize, the methods and if we want to add extra properties, we need to use the constructor function the child class too. In side the constructor function we call the super() function to access all the properties from the parent class. The Person class didn't have gender but now let us give gender property for the child class, Student. If the same method name used in the child class, the parent method will be overridden. class Student extends Person { constructor ( firstName , lastName , age , country , city , gender ) { super ( firstName , lastName , age , country , city ); this . gender = gender ; } saySomething () { console . log ( \"I am a child of the person class\" ); } getPersonInfo () { let fullName = this . getFullName (); let skills = this . skills . length > 0 && this . skills . slice ( 0 , this . skills . length - 1 ). join ( \", \" ) + ` and ${ this . skills [ this . skills . length - 1 ] } ` ; let formattedSkills = skills ? `He knows ${ skills } ` : \"\" ; let pronoun = this . gender == \"Male\" ? \"He\" : \"She\" ; let info = ` ${ fullName } is ${ this . age } . ${ pronoun } lives in ${ this . city } , ${ this . country } . ${ formattedSkills } ` ; return info ; } } const s1 = new Student ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" , \"Male\" ); const s2 = new Student ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Helsinki\" , \"Female\" ); s1 . setScore = 1 ; s1 . setSkill = \"HTML\" ; s1 . setSkill = \"CSS\" ; s1 . setSkill = \"JavaScript\" ; s2 . setScore = 1 ; s2 . setSkill = \"Planning\" ; s2 . setSkill = \"Managing\" ; s2 . setSkill = \"Organizing\" ; console . log ( s1 ); console . log ( s1 . saySomething ()); console . log ( s1 . getFullName ()); console . log ( s1 . getPersonInfo ()); console . log ( s2 . saySomething ()); console . log ( s2 . getFullName ()); console . log ( s2 . getPersonInfo ()); Student { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: 250 , country: \"Finland\" , city: \"Helsinki\" , \u2026 } Student { firstName: \"Lidiya\" , lastName: \"Tekle\" , age: 28 , country: \"Finland\" , city: \"Helsinki\" , \u2026 } I am a child of the person class Asabeneh Yetayeh Student { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: 250 , country: \"Finland\" , city: \"Helsinki\" , \u2026 } Asabeneh Yetayeh is 250 . He lives in Helsinki, Finland. He knows HTML, CSS and JavaScript I am a child of the person class Lidiya Tekle Student { firstName: \"Lidiya\" , lastName: \"Tekle\" , age: 28 , country: \"Finland\" , city: \"Helsinki\" , \u2026 } Lidiya Tekle is 28 . She lives in Helsinki, Finland. He knows Planning, Managing and Organizing Now, the getPersonInfo method has been overridden and it identifies if the person is male or female.","title":"Classes"},{"location":"javascript_fundamentals/classes/#classes","text":"JavaScript is an object oriented programming language. Everything in JavScript is an object, with its properties and methods. We create class to create an object. A Class is like an object constructor, or a \"blueprint\" for creating objects. We instantiate a class to create an object. The class defines attributes and the behavior of the object, while the object, on the other hand, represents the class. Once we create a class we can create object from it whenever we want. Creating an object from a class is called class instantiation. In the object section, we saw how to create an object literal. Object literal is a singleton. If we want to get a similar object , we have to write it. However, class allows to create many objects. This helps to reduce amount of code and repetition of code.","title":"Classes"},{"location":"javascript_fundamentals/classes/#defining-a-classes","text":"To define a class in JavaScript we need the keyword class , the name of a class in CamelCase and block code(two curly brackets). Let us create a class name Person. // syntax class ClassName { // code goes here } Example: class Person { // code goes here } We have created an Person class but it does not have any thing inside.","title":"Defining a classes"},{"location":"javascript_fundamentals/classes/#class-instantiation","text":"Instantiation class means creating an object from a class. We need the keyword new and we call the name of the class after the word new. Let us create a dog object from our Person class. class Person { // code goes here } const person = new Person (); console . log ( person ); Person {} As you can see, we have created a person object. Since the class did not have any properties yet the object is also empty. Let use the class constructor to pass different properties for the class.","title":"Class Instantiation"},{"location":"javascript_fundamentals/classes/#class-constructor","text":"The constructor is a builtin function which allows as to create a blueprint for our object. The constructor function starts with a keyword constructor followed by a parenthesis. Inside the parenthesis we pass the properties of the object as parameter. We use the this keyword to attach the constructor parameters with the class. The following Person class constructor has firstName and lastName property. These properties are attached to the Person class using this keyword. This refers to the class itself. class Person { constructor ( firstName , lastName ) { console . log ( this ); // Check the output from here this . firstName = firstName ; this . lastName = lastName ; } } const person = new Person (); console . log ( person ); Person { firstName: undefined, lastName } All the keys of the object are undefined. When ever we instantiate we should pass the value of the properties. Let us pass value at this time when we instantiate the class. class Person { constructor ( firstName , lastName ) { this . firstName = firstName ; this . lastName = lastName ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" ); console . log ( person1 ); Person { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" } As we have stated at the very beginning that once we create a class we can create many object using the class. Now, let us create many person objects using the Person class. class Person { constructor ( firstName , lastName ) { console . log ( this ); // Check the output from here this . firstName = firstName ; this . lastName = lastName ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" ); const person3 = new Person ( \"Abraham\" , \"Yetayeh\" ); console . log ( person1 ); console . log ( person2 ); console . log ( person3 ); Person { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" } Person { firstName: \"Lidiya\" , lastName: \"Tekle\" } Person { firstName: \"Abraham\" , lastName: \"Yetayeh\" } Using the class Person we created three persons object. As you can see our class did not many properties let us add more properties to the class. class Person { constructor ( firstName , lastName , age , country , city ) { console . log ( this ); // Check the output from here this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); console . log ( person1 ); Person { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: 250 , country: \"Finland\" , city: \"Helsinki\" }","title":"Class Constructor"},{"location":"javascript_fundamentals/classes/#default-values-with-constructor","text":"The constructor function properties may have a default value like other regular functions. class Person { constructor ( firstName = \"Asabeneh\" , lastName = \"Yetayeh\" , age = 250 , country = \"Finland\" , city = \"Helsinki\" ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; } } const person1 = new Person (); // it will take the default values const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); console . log ( person1 ); console . log ( person2 ); Person { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: 250 , country: \"Finland\" , city: \"Helsinki\" } Person { firstName: \"Lidiya\" , lastName: \"Tekle\" , age: 28 , country: \"Finland\" , city: \"Espoo\" }","title":"Default values with constructor"},{"location":"javascript_fundamentals/classes/#class-methods","text":"The constructor inside a class is a builtin function which allow us to create a blueprint for the object. In a class we can create class methods. Methods are JavaScript functions inside the class. Let us create some class methods. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); console . log ( person1 . getFullName ()); console . log ( person2 . getFullName ()); Asabeneh Yetayeh test.js:19 Lidiya Tekle","title":"Class methods"},{"location":"javascript_fundamentals/classes/#properties-with-initial-value","text":"When we create a class for some properties we may have an initial value. For instance if you are playing a game, you starting score will be zero. So, we may have a starting score or score which is zero. In other way, we may have an initial skill and we will acquire some skill after some time. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); console . log ( person1 . score ); console . log ( person2 . score ); console . log ( person1 . skills ); console . log ( person2 . skills ); 0 0 [] [] A method could be regular method or a getter or a setter. Let us see, getter and setter.","title":"Properties with initial value"},{"location":"javascript_fundamentals/classes/#getter","text":"The get method allow us to access value from the object. We write a get method using keyword get followed by a function. Instead of accessing properties directly from the object we use getter to get the value. See the example bellow class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } get getScore () { return this . score ; } get getSkills () { return this . skills ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); console . log ( person1 . getScore ); // We do not need parenthesis to call a getter method console . log ( person2 . getScore ); console . log ( person1 . getSkills ); console . log ( person2 . getSkills ); 0 0 [] []","title":"getter"},{"location":"javascript_fundamentals/classes/#setter","text":"The setter method allow us to modify the value of certain properties. We write a setter method using keyword set followed by a function. See the example bellow. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } get getScore () { return this . score ; } get getSkills () { return this . skills ; } set setScore ( score ) { this . score += score ; } set setSkill ( skill ) { this . skills . push ( skill ); } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); person1 . setScore = 1 ; person1 . setSkill = \"HTML\" ; person1 . setSkill = \"CSS\" ; person1 . setSkill = \"JavaScript\" ; person2 . setScore = 1 ; person2 . setSkill = \"Planning\" ; person2 . setSkill = \"Managing\" ; person2 . setSkill = \"Organizing\" ; console . log ( person1 . score ); console . log ( person2 . score ); console . log ( person1 . skills ); console . log ( person2 . skills ); 1 1 [ \"HTML\" , \"CSS\" , \"JavaScript\" ] [ \"Planning\" , \"Managing\" , \"Organizing\" ] Do not be puzzled by the difference between regular method and a getter. If you know how to make a regular method you are good. Let us add regular method called getPersonInfo in the Person class. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } get getScore () { return this . score ; } get getSkills () { return this . skills ; } set setScore ( score ) { this . score += score ; } set setSkill ( skill ) { this . skills . push ( skill ); } getPersonInfo () { let fullName = this . getFullName (); let skills = this . skills . length > 0 && this . skills . slice ( 0 , this . skills . length - 1 ). join ( \", \" ) + ` and ${ this . skills [ this . skills . length - 1 ] } ` ; let formattedSkills = skills ? `He knows ${ skills } ` : \"\" ; let info = ` ${ fullName } is ${ this . age } . He lives ${ this . city } , ${ this . country } . ${ formattedSkills } ` ; return info ; } } const person1 = new Person ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" ); const person2 = new Person ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Espoo\" ); const person3 = new Person ( \"John\" , \"Doe\" , 50 , \"Mars\" , \"Mars city\" ); person1 . setScore = 1 ; person1 . setSkill = \"HTML\" ; person1 . setSkill = \"CSS\" ; person1 . setSkill = \"JavaScript\" ; person2 . setScore = 1 ; person2 . setSkill = \"Planning\" ; person2 . setSkill = \"Managing\" ; person2 . setSkill = \"Organizing\" ; console . log ( person1 . getScore ); console . log ( person2 . getScore ); console . log ( person1 . getSkills ); console . log ( person2 . getSkills ); console . log ( person3 . getSkills ); console . log ( person1 . getPersonInfo ()); console . log ( person2 . getPersonInfo ()); console . log ( person3 . getPersonInfo ()); 1 1 [ \"HTML\" , \"CSS\" , \"JavaScript\" ] [ \"Planning\" , \"Managing\" , \"Organizing\" ] [] Asabeneh Yetayeh is 250 . He lives Helsinki, Finland. He knows HTML, CSS and JavaScript Lidiya Tekle is 28 . He lives Espoo, Finland. He knows Planning, Managing and Organizing John Doe is 50 . He lives Mars city, Mars.","title":"setter"},{"location":"javascript_fundamentals/classes/#static-method","text":"The static keyword defines a static method for a class. Static methods are not called on instances of the class. Instead, they are called on the class itself. These are often utility functions, such as functions to create or clone objects. An example of static method is Date.now() . The now method is called directly from the class. class Person { constructor ( firstName , lastName , age , country , city ) { this . firstName = firstName ; this . lastName = lastName ; this . age = age ; this . country = country ; this . city = city ; this . score = 0 ; this . skills = []; } getFullName () { const fullName = this . firstName + \" \" + this . lastName ; return fullName ; } get getScore () { return this . score ; } get getSkills () { return this . skills ; } set setScore ( score ) { this . score += score ; } set setSkill ( skill ) { this . skills . push ( skill ); } getPersonInfo () { let fullName = this . getFullName (); let skills = this . skills . length > 0 && this . skills . slice ( 0 , this . skills . length - 1 ). join ( \", \" ) + ` and ${ this . skills [ this . skills . length - 1 ] } ` ; let formattedSkills = skills ? `He knows ${ skills } ` : \"\" ; let info = ` ${ fullName } is ${ this . age } . He lives ${ this . city } , ${ this . country } . ${ formattedSkills } ` ; return info ; } static favoriteSkill () { const skills = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Python\" , \"Node\" ]; const index = Math . floor ( Math . random () * skills . length ); return skills [ index ]; } static showDateTime () { let now = new Date (); let year = now . getFullYear (); let month = now . getMonth () + 1 ; let date = now . getDate (); let hours = now . getHours (); let minutes = now . getMinutes (); if ( hours < 10 ) { hours = \"0\" + hours ; } if ( minutes < 10 ) { minutes = \"0\" + minutes ; } let dateMonthYear = date + \".\" + month + \".\" + year ; let time = hours + \":\" + minutes ; let fullTime = dateMonthYear + \" \" + time ; return fullTime ; } } console . log ( Person . favoriteSkill ()); console . log ( Person . showDateTime ()); Node 15 .1.2020 23 :56 The static methods are methods which can be used as utility functions.","title":"Static method"},{"location":"javascript_fundamentals/classes/#inheritance","text":"Using inheritance we can access all the properties and the methods of the parent class. This reduces repetition of code. If you remember, we have a Person parent class and we will create children from it. Our children class could be student, teach etc. // syntax class ChildClassName extends { // code goes here } Let us create a Student child class from Person parent class. class Student extends Person { saySomething () { console . log ( \"I am a child of the person class\" ); } } const s1 = new Student ( \"Asabeneh\" , \"Yetayeh\" , \"Finland\" , 250 , \"Helsinki\" ); console . log ( s1 ); console . log ( s1 . saySomething ()); console . log ( s1 . getFullName ()); console . log ( s1 . getPersonInfo ()); Student { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: \"Finland\" , country: 250 , city: \"Helsinki\" , \u2026 } I am a child of the person class Asabeneh Yetayeh Student { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: \"Finland\" , country: 250 , city: \"Helsinki\" , \u2026 } Asabeneh Yetayeh is Finland. He lives Helsinki, 250 .","title":"Inheritance"},{"location":"javascript_fundamentals/classes/#overriding-methods","text":"As you can see, we manage to access all the methods in the Person Class and we used it in the Student child class. We can customize the parent methods, we can add additional properties to a child class. If we want to customize, the methods and if we want to add extra properties, we need to use the constructor function the child class too. In side the constructor function we call the super() function to access all the properties from the parent class. The Person class didn't have gender but now let us give gender property for the child class, Student. If the same method name used in the child class, the parent method will be overridden. class Student extends Person { constructor ( firstName , lastName , age , country , city , gender ) { super ( firstName , lastName , age , country , city ); this . gender = gender ; } saySomething () { console . log ( \"I am a child of the person class\" ); } getPersonInfo () { let fullName = this . getFullName (); let skills = this . skills . length > 0 && this . skills . slice ( 0 , this . skills . length - 1 ). join ( \", \" ) + ` and ${ this . skills [ this . skills . length - 1 ] } ` ; let formattedSkills = skills ? `He knows ${ skills } ` : \"\" ; let pronoun = this . gender == \"Male\" ? \"He\" : \"She\" ; let info = ` ${ fullName } is ${ this . age } . ${ pronoun } lives in ${ this . city } , ${ this . country } . ${ formattedSkills } ` ; return info ; } } const s1 = new Student ( \"Asabeneh\" , \"Yetayeh\" , 250 , \"Finland\" , \"Helsinki\" , \"Male\" ); const s2 = new Student ( \"Lidiya\" , \"Tekle\" , 28 , \"Finland\" , \"Helsinki\" , \"Female\" ); s1 . setScore = 1 ; s1 . setSkill = \"HTML\" ; s1 . setSkill = \"CSS\" ; s1 . setSkill = \"JavaScript\" ; s2 . setScore = 1 ; s2 . setSkill = \"Planning\" ; s2 . setSkill = \"Managing\" ; s2 . setSkill = \"Organizing\" ; console . log ( s1 ); console . log ( s1 . saySomething ()); console . log ( s1 . getFullName ()); console . log ( s1 . getPersonInfo ()); console . log ( s2 . saySomething ()); console . log ( s2 . getFullName ()); console . log ( s2 . getPersonInfo ()); Student { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: 250 , country: \"Finland\" , city: \"Helsinki\" , \u2026 } Student { firstName: \"Lidiya\" , lastName: \"Tekle\" , age: 28 , country: \"Finland\" , city: \"Helsinki\" , \u2026 } I am a child of the person class Asabeneh Yetayeh Student { firstName: \"Asabeneh\" , lastName: \"Yetayeh\" , age: 250 , country: \"Finland\" , city: \"Helsinki\" , \u2026 } Asabeneh Yetayeh is 250 . He lives in Helsinki, Finland. He knows HTML, CSS and JavaScript I am a child of the person class Lidiya Tekle Student { firstName: \"Lidiya\" , lastName: \"Tekle\" , age: 28 , country: \"Finland\" , city: \"Helsinki\" , \u2026 } Lidiya Tekle is 28 . She lives in Helsinki, Finland. He knows Planning, Managing and Organizing Now, the getPersonInfo method has been overridden and it identifies if the person is male or female.","title":"Overriding methods"},{"location":"javascript_fundamentals/conditionals/","text":"Conditionals Conditional statements are used for make decisions based on different conditions. By default , statements in JavaScript script executed sequentially from top to bottom. If the processing logic require so, the sequential flow of execution can be altered in two ways: Conditional execution: a block of one or more statements will be executed if a certain expression is true Repetitive execution: a block of one or more statements will be repetitively executed as long as a certain expression is true. In this section, we will cover if , else , else if statements. The comparison and logical operators we learned in the previous sections will be useful in here. Conditions can be implementing using the following ways: if if else if else if else switch ternary operator If In JavaScript and other programming languages the key word if is to used check if a condition is true and to execute the block code. To create an if condition, we need if keyword, condition inside a parenthesis and block of code inside a curly bracket({}). // syntax if ( condition ) { //this part of code runs for truthy condition } Example: let num = 3 ; if ( num > 0 ) { console . log ( ` ${ num } is a positive number` ); } // 3 is a positive number As you can see in the condition example above, 3 is greater than 0, so it is a positive number. The condition was true and the block of code was executed. However, if the condition is false, we won't see any results. let isRaining = true ; if ( isRaining ) { console . log ( \"Remember to take your rain coat.\" ); } The same goes for the second condition, if isRaining is false the if block will not be executed and we do not see any output. In order to see the result of a falsy condition, we should have another block, which is going to be else . If Else If condition is true the first block will be executed, if not the else condition will be executed. // syntax if ( condition ) { // this part of code runs for truthy condition } else { // this part of code runs for false condition } let num = 3 ; if ( num > 0 ) { console . log ( ` ${ num } is a positive number` ); } else { console . log ( ` ${ num } is a negative number` ); } // 3 is a positive number num = - 3 ; if ( num > 0 ) { console . log ( ` ${ num } is a positive number` ); } else { console . log ( ` ${ num } is a negative number` ); } // -3 is a negative number let isRaining = true ; if ( isRaining ) { console . log ( \"You need a rain coat.\" ); } else { console . log ( \"No need for a rain coat.\" ); } // You need a rain coat. isRaining = false ; if ( isRaining ) { console . log ( \"You need a rain coat.\" ); } else { console . log ( \"No need for a rain coat.\" ); } // No need for a rain coat. The last condition is false, therefore the else block was executed. What if we have more than two conditions? In that case, we would use else if conditions. If Else if Else On our daily life, we make decisions on daily basis. We make decisions not by checking one or two conditions instead we make decisions based on multiple conditions. As similar to our daily life, programming is also full of conditions. We use else if when we have multiple conditions. // syntax if ( condition ) { // code } else if ( condition ) { // code } else { // code } Example: let a = 0 ; if ( a > 0 ) { console . log ( ` ${ a } is a positive number` ); } else if ( a < 0 ) { console . log ( ` ${ a } is a negative number` ); } else if ( a == 0 ) { console . log ( ` ${ a } is zero` ); } else { console . log ( ` ${ a } is not a number` ); } // if else if else let weather = \"sunny\" ; if ( weather === \"rainy\" ) { console . log ( \"You need a rain coat.\" ); } else if ( weather === \"cloudy\" ) { console . log ( \"It might be cold, you need a jacket.\" ); } else if ( weather === \"sunny\" ) { console . log ( \"Go out freely.\" ); } else { console . log ( \"No need for rain coat.\" ); } Switch Switch is an alternative for if else if else else . The switch statement starts with a switch keyword followed by a parenthesis and code block. Inside the code block we will have different cases. Case block runs if the value in the switch statement parenthesis matches with the case value. The break statement is to terminate execution so the code execution does not go down after the condition is satisfied. The default block runs if all the cases don't satisfy the condition. switch ( caseValue ) { case 1 : // code break ; case 2 : // code break ; case 3 : // code default : // code } let weather = \"cloudy\" ; switch ( weather ) { case \"rainy\" : console . log ( \"You need a rain coat.\" ); break ; case \"cloudy\" : console . log ( \"It might be cold, you need a jacket.\" ); break ; case \"sunny\" : console . log ( \"Go out freely.\" ); break ; default : console . log ( \" No need for rain coat.\" ); } // Switch More Examples let dayUserInput = prompt ( \"What day is today ?\" ); let day = dayUserInput . toLowerCase (); switch ( day ) { case \"monday\" : console . log ( \"Today is Monday\" ); break ; case \"tuesday\" : console . log ( \"Today is Tuesday\" ); break ; case \"wednesday\" : console . log ( \"Today is Wednesday\" ); break ; case \"thursday\" : console . log ( \"Today is Thursday\" ); break ; case \"friday\" : console . log ( \"Today is Friday\" ); break ; case \"saturday\" : console . log ( \"Today is Saturday\" ); break ; case \"sunday\" : console . log ( \"Today is Sunday\" ); break ; default : console . log ( \"It is not a week day.\" ); } // Examples to use conditions in the cases let num = prompt ( \"Enter number\" ); switch ( true ) { case num > 0 : console . log ( \"Number is positive\" ); break ; case num == 0 : console . log ( \"Numbers is zero\" ); break ; case num < 0 : console . log ( \"Number is negative\" ); break ; default : console . log ( \"Entered value was not a number\" ); } Ternary Operators Ternary operator is very common in React . It is a short way to write if else statement. In React we use ternary operator in many cases. To generalize, ternary operator is another way to write conditionals. let isRaining = true ; isRaining ? console . log ( \"You need a rain coat.\" ) : console . log ( \"No need for a rain coat.\" );","title":"Conditionals"},{"location":"javascript_fundamentals/conditionals/#conditionals","text":"Conditional statements are used for make decisions based on different conditions. By default , statements in JavaScript script executed sequentially from top to bottom. If the processing logic require so, the sequential flow of execution can be altered in two ways: Conditional execution: a block of one or more statements will be executed if a certain expression is true Repetitive execution: a block of one or more statements will be repetitively executed as long as a certain expression is true. In this section, we will cover if , else , else if statements. The comparison and logical operators we learned in the previous sections will be useful in here. Conditions can be implementing using the following ways: if if else if else if else switch ternary operator","title":"Conditionals"},{"location":"javascript_fundamentals/conditionals/#if","text":"In JavaScript and other programming languages the key word if is to used check if a condition is true and to execute the block code. To create an if condition, we need if keyword, condition inside a parenthesis and block of code inside a curly bracket({}). // syntax if ( condition ) { //this part of code runs for truthy condition } Example: let num = 3 ; if ( num > 0 ) { console . log ( ` ${ num } is a positive number` ); } // 3 is a positive number As you can see in the condition example above, 3 is greater than 0, so it is a positive number. The condition was true and the block of code was executed. However, if the condition is false, we won't see any results. let isRaining = true ; if ( isRaining ) { console . log ( \"Remember to take your rain coat.\" ); } The same goes for the second condition, if isRaining is false the if block will not be executed and we do not see any output. In order to see the result of a falsy condition, we should have another block, which is going to be else .","title":"If"},{"location":"javascript_fundamentals/conditionals/#if-else","text":"If condition is true the first block will be executed, if not the else condition will be executed. // syntax if ( condition ) { // this part of code runs for truthy condition } else { // this part of code runs for false condition } let num = 3 ; if ( num > 0 ) { console . log ( ` ${ num } is a positive number` ); } else { console . log ( ` ${ num } is a negative number` ); } // 3 is a positive number num = - 3 ; if ( num > 0 ) { console . log ( ` ${ num } is a positive number` ); } else { console . log ( ` ${ num } is a negative number` ); } // -3 is a negative number let isRaining = true ; if ( isRaining ) { console . log ( \"You need a rain coat.\" ); } else { console . log ( \"No need for a rain coat.\" ); } // You need a rain coat. isRaining = false ; if ( isRaining ) { console . log ( \"You need a rain coat.\" ); } else { console . log ( \"No need for a rain coat.\" ); } // No need for a rain coat. The last condition is false, therefore the else block was executed. What if we have more than two conditions? In that case, we would use else if conditions.","title":"If Else"},{"location":"javascript_fundamentals/conditionals/#if-else-if-else","text":"On our daily life, we make decisions on daily basis. We make decisions not by checking one or two conditions instead we make decisions based on multiple conditions. As similar to our daily life, programming is also full of conditions. We use else if when we have multiple conditions. // syntax if ( condition ) { // code } else if ( condition ) { // code } else { // code } Example: let a = 0 ; if ( a > 0 ) { console . log ( ` ${ a } is a positive number` ); } else if ( a < 0 ) { console . log ( ` ${ a } is a negative number` ); } else if ( a == 0 ) { console . log ( ` ${ a } is zero` ); } else { console . log ( ` ${ a } is not a number` ); } // if else if else let weather = \"sunny\" ; if ( weather === \"rainy\" ) { console . log ( \"You need a rain coat.\" ); } else if ( weather === \"cloudy\" ) { console . log ( \"It might be cold, you need a jacket.\" ); } else if ( weather === \"sunny\" ) { console . log ( \"Go out freely.\" ); } else { console . log ( \"No need for rain coat.\" ); }","title":"If Else if Else"},{"location":"javascript_fundamentals/conditionals/#switch","text":"Switch is an alternative for if else if else else . The switch statement starts with a switch keyword followed by a parenthesis and code block. Inside the code block we will have different cases. Case block runs if the value in the switch statement parenthesis matches with the case value. The break statement is to terminate execution so the code execution does not go down after the condition is satisfied. The default block runs if all the cases don't satisfy the condition. switch ( caseValue ) { case 1 : // code break ; case 2 : // code break ; case 3 : // code default : // code } let weather = \"cloudy\" ; switch ( weather ) { case \"rainy\" : console . log ( \"You need a rain coat.\" ); break ; case \"cloudy\" : console . log ( \"It might be cold, you need a jacket.\" ); break ; case \"sunny\" : console . log ( \"Go out freely.\" ); break ; default : console . log ( \" No need for rain coat.\" ); } // Switch More Examples let dayUserInput = prompt ( \"What day is today ?\" ); let day = dayUserInput . toLowerCase (); switch ( day ) { case \"monday\" : console . log ( \"Today is Monday\" ); break ; case \"tuesday\" : console . log ( \"Today is Tuesday\" ); break ; case \"wednesday\" : console . log ( \"Today is Wednesday\" ); break ; case \"thursday\" : console . log ( \"Today is Thursday\" ); break ; case \"friday\" : console . log ( \"Today is Friday\" ); break ; case \"saturday\" : console . log ( \"Today is Saturday\" ); break ; case \"sunday\" : console . log ( \"Today is Sunday\" ); break ; default : console . log ( \"It is not a week day.\" ); } // Examples to use conditions in the cases let num = prompt ( \"Enter number\" ); switch ( true ) { case num > 0 : console . log ( \"Number is positive\" ); break ; case num == 0 : console . log ( \"Numbers is zero\" ); break ; case num < 0 : console . log ( \"Number is negative\" ); break ; default : console . log ( \"Entered value was not a number\" ); }","title":"Switch"},{"location":"javascript_fundamentals/conditionals/#ternary-operators","text":"Ternary operator is very common in React . It is a short way to write if else statement. In React we use ternary operator in many cases. To generalize, ternary operator is another way to write conditionals. let isRaining = true ; isRaining ? console . log ( \"You need a rain coat.\" ) : console . log ( \"No need for a rain coat.\" );","title":"Ternary Operators"},{"location":"javascript_fundamentals/data_types/","text":"Data types In the previous section, we mentioned a little bit about data types. Data or values have data types. Data types describe the characteristics of data. Data types can be divided into two: Primitive data types Non-primitive data types(Object References) Primitive Data Types Primitive data types in JavaScript include: Numbers - Integers, floats Strings - Any data under single quote, double quote or backtick quote Booleans - true or false value Null - empty value or no value Undefined - a declared variable without a value Symbol - A unique value that can be generated by Symbol constructor Non-primitive data types in JavaScript includes: Objects Arrays Now, let us see what exactly primitive and non-primitive data types mean. Primitive data types are immutable(non-modifiable) data types. Once a primitive data type is created we cannot modify it. Example: let word = \"JavaScript\" ; If we try to modify the string stored in variable word , JavaScript should raise an error. Any data type under a single quote, double quote, or backtick quote is a string data type. word [ 0 ] = \"Y\" ; This expression does not change the string stored in the variable word . So, we can say that strings are not modifiable or in other words immutable. Primitive data types are compared by its values. Let us compare different data values. See the example below: let numOne = 3 ; let numTwo = 3 ; console . log ( numOne == numTwo ); // true let js = \"JavaScript\" ; let py = \"Python\" ; console . log ( js == py ); //false let lightOn = true ; let lightOff = false ; console . log ( lightOn == lightOff ); // false Non-Primitive Data Types Non-primitive data types are modifiable or mutable. We can modify the value of non-primitive data types after it gets created. Let us see by creating an array. An array is a list of data values in a square bracket. Arrays can contain the same or different data types. Array values are referenced by their index. In JavaScript array index starts at zero. I.e., the first element of an array is found at index zero, the second element at index one, and the third element at index two, etc. let nums = [ 1 , 2 , 3 ]; nums [ 0 ] = 10 ; console . log ( nums ); // [10, 2, 3] As you can see, an array, which is a non-primitive data type is mutable. Non-primitive data types cannot be compared by value. Even if two non-primitive data types have the same properties and values, they are not strictly equal. let nums = [ 1 , 2 , 3 ]; let numbers = [ 1 , 2 , 3 ]; console . log ( nums == numbers ); // false let userOne = { name : \"Asabeneh\" , role : \"teaching\" , country : \"Finland\" , }; let userTwo = { name : \"Asabeneh\" , role : \"teaching\" , country : \"Finland\" , }; console . log ( userOne == userTwo ); // false Rule of thumb, we do not compare non-primitive data types. Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value. Two objects are only strictly equal if they refer to the same underlying object. let nums = [ 1 , 2 , 3 ]; let numbers = nums ; console . log ( nums == numbers ); // true let userOne = { name : \"Asabeneh\" , role : \"teaching\" , country : \"Finland\" , }; let userTwo = userOne ; console . log ( userOne == userTwo ); // true If you have a hard time understanding the difference between primitive data types and non-primitive data types, you are not the only one. Calm down and just go to the next section and try to come back after some time. Now let us start the data types by number type. Numbers Numbers are integers and decimal values which can do all the arithmetic operations. Let's see some examples of Numbers. Declaring Number Data Types let age = 35 ; const gravity = 9.81 ; // we use const for non-changing values, gravitational constant in m/s2 let mass = 72 ; // mass in Kilogram const PI = 3.14 ; // pi a geometrical constant // More Examples const boilingPoint = 100 ; // temperature in oC, boiling point of water which is a constant const bodyTemp = 37 ; // oC average human body temperature, which is a constant console . log ( age , gravity , mass , PI , boilingPoint , bodyTemp ); Math Object In JavaScript the Math Object provides a lots of methods to work with numbers. const PI = Math . PI ; console . log ( PI ); // 3.141592653589793 // Rounding to the closest number // if above .5 up if less 0.5 down rounding console . log ( Math . round ( PI )); // 3 to round values to the nearest number console . log ( Math . round ( 9.81 )); // 10 console . log ( Math . floor ( PI )); // 3 rounding down console . log ( Math . ceil ( PI )); // 4 rounding up console . log ( Math . min ( - 5 , 3 , 20 , 4 , 5 , 10 )); // -5, returns the minimum value console . log ( Math . max ( - 5 , 3 , 20 , 4 , 5 , 10 )); // 20, returns the maximum value const randNum = Math . random (); // creates random number between 0 to 0.999999 console . log ( randNum ); // Let us create random number between 0 to 10 const num = Math . floor ( Math . random () * 11 ); // creates random number between 0 and 10 console . log ( num ); //Absolute value console . log ( Math . abs ( - 10 )); // 10 //Square root console . log ( Math . sqrt ( 100 )); // 10 console . log ( Math . sqrt ( 2 )); // 1.4142135623730951 // Power console . log ( Math . pow ( 3 , 2 )); // 9 console . log ( Math . E ); // 2.718 // Logarithm // Returns the natural logarithm with base E of x, Math.log(x) console . log ( Math . log ( 2 )); // 0.6931471805599453 console . log ( Math . log ( 10 )); // 2.302585092994046 // Returns the natural logarithm of 2 and 10 respectively console . log ( Math . LN2 ); // 0.6931471805599453 console . log ( Math . LN10 ); // 2.302585092994046 // Trigonometry Math . sin ( 0 ); Math . sin ( 60 ); Math . cos ( 0 ); Math . cos ( 60 ); Random Number Generator The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999... let randomNum = Math . random (); // generates 0 to 0.999... Now, let us see how we can use random() method to generate a random number between 0 and 10: let randomNum = Math . random (); // generates 0 to 0.999 let numBtnZeroAndTen = randomNum * 11 ; console . log ( numBtnZeroAndTen ); // this gives: min 0 and max 10.99 let randomNumRoundToFloor = Math . floor ( numBtnZeroAndTen ); console . log ( randomNumRoundToFloor ); // this gives between 0 and 10 Strings Strings are texts, which are under single , double , back-tick quote. To declare a string, we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote. Let's see some examples of strings: let space = \" \" ; // an empty space string let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let country = \"Finland\" ; let city = \"Helsinki\" ; let language = \"JavaScript\" ; let job = \"teacher\" ; let quote = \"The saying,'Seeing is Believing' is not correct in 2020.\" ; let quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.` ; String Concatenation Connecting two or more strings together is called concatenation. Using the strings declared in the previous String section: let fullName = firstName + space + lastName ; // concatenation, merging two string together. console . log ( fullName ); Asabeneh Yetayeh We can concatenate strings in different ways. Concatenating Using Addition Operator Concatenating using the addition operator is an old way. This way of concatenating is tedious and error-prone. It is good to know how to concatenate this way, but I strongly suggest to use the ES6 template strings (explained later on). // Declaring different variables of different data types let space = \" \" ; let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let country = \"Finland\" ; let city = \"Helsinki\" ; let language = \"JavaScript\" ; let job = \"teacher\" ; let age = 250 ; let fullName = firstName + space + lastName ; let personInfoOne = fullName + \". I am \" + age + \". I live in \" + country ; // ES5 string addition console . log ( personInfoOne ); Asabeneh Yetayeh. I am 250 . I live in Finland Long Literal Strings A string could be a single character or paragraph or a page. If the string length is too big it does not fit in one line. We can use the backslash character (\\) at the end of each line to indicate that the string will continue on the next line. Example: const paragraph = \"My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\\ I am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \\ Node.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \\ In the end of 2019, I was thinking to expand my teaching and to reach \\ to global audience and I started a Python challenge from November 20 - December 19.\\ It was one of the most rewarding and inspiring experience.\\ Now, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \\ I hope you are enjoying too.\" ; console . log ( paragraph ); Escape Sequences in Strings In JavaScript and other programming languages \\ followed by some characters is an escape sequence. Let's see the most common escape characters: \\n: new line \\t: Tab, means 8 spaces \\\\: Back slash \\': Single quote (') \\\": Double quote (\") console . log ( \"I hope everyone is enjoying the 30 Days Of JavaScript challenge.\\nDo you ?\" ); // line break console . log ( \"Days\\tTopics\\tExercises\" ); console . log ( \"Day 1\\t3\\t5\" ); console . log ( \"Day 2\\t3\\t5\" ); console . log ( \"Day 3\\t3\\t5\" ); console . log ( \"Day 4\\t3\\t5\" ); console . log ( \"This is a backslash symbol (\\\\)\" ); // To write a backslash console . log ( 'In every programming language it starts with \"Hello, World!\"' ); console . log ( \"In every programming language it starts with 'Hello, World!'\" ); console . log ( \"The saying 'Seeing is Believing' isn't correct in 2020\" ); Output in console: I hope everyone is enjoying the 30 Days Of JavaScript challenge. Do you ? Days Topics Exercises Day 1 3 5 Day 2 3 5 Day 3 3 5 Day 4 3 5 This is a backslash symbol ( \\) In every programming language it starts with \"Hello, World!\" In every programming language it starts with 'Hello, World!' The saying 'Seeing is Believing' isn ' t correct in 2020 Template Literals (Template Strings) To create a template strings, we use two back-ticks. We can inject data as expressions inside a template string. To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. See the syntax below. //Syntax `String literal text``String literal text ${ expression } ` ; Example: 1 console . log ( `The sum of 2 and 3 is 5` ); // statically writing the data let a = 2 ; let b = 3 ; console . log ( `The sum of ${ a } and ${ b } is ${ a + b } ` ); // injecting the data dynamically Example:2 let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let country = \"Finland\" ; let city = \"Helsinki\" ; let language = \"JavaScript\" ; let job = \"teacher\" ; let age = 250 ; let fullName = firstName + \" \" + lastName ; let personInfoTwo = `I am ${ fullName } . I am ${ age } . I live in ${ country } .` ; //ES6 - String interpolation method let personInfoThree = `I am ${ fullName } . I live in ${ city } , ${ country } . I am a ${ job } . I teach ${ language } .` ; console . log ( personInfoTwo ); console . log ( personInfoThree ); I am Asabeneh Yetayeh. I am 250 . I live in Finland. I am Asabeneh Yetayeh. I live in Helsinki, Finland. I am a teacher. I teach JavaScript. Using a string template or string interpolation method, we can add expressions, which could be a value, or some operations (comparison, arithmetic operations, ternary operation). let a = 2 ; let b = 3 ; console . log ( ` ${ a } is greater than ${ b } : ${ a > b } ` ); 2 is greater than 3 : false String Methods Everything in JavaScript is an object. A string is a primitive data type that means we can not modify it once it is created. The string object has many string methods. There are different string methods that can help us to work with strings. length : The string length method returns the number of characters in a string included empty space. Example: let js = \"JavaScript\" ; console . log ( js . length ); // 10 let firstName = \"Asabeneh\" ; console . log ( firstName . length ); // 8 Accessing characters in a string : We can access each character in a string using its index. In programming, counting starts from 0. The first index of the string is zero, and the last index is the length of the string minus one. Let us access different characters in 'JavaScript' string. let string = \"JavaScript\" ; let firstLetter = string [ 0 ]; console . log ( firstLetter ); // J let secondLetter = string [ 1 ]; // a let thirdLetter = string [ 2 ]; let lastLetter = string [ 9 ]; console . log ( lastLetter ); // t let lastIndex = string . length - 1 ; console . log ( lastIndex ); // 9 console . log ( string [ lastIndex ]); // t toUpperCase() : this method changes the string to uppercase letters. let string = \"JavaScript\" ; console . log ( string . toUpperCase ()); // JAVASCRIPT let firstName = \"Asabeneh\" ; console . log ( firstName . toUpperCase ()); // ASABENEH let country = \"Finland\" ; console . log ( country . toUpperCase ()); // FINLAND toLowerCase() : this method changes the string to lowercase letters. let string = \"JavasCript\" ; console . log ( string . toLowerCase ()); // javascript let firstName = \"Asabeneh\" ; console . log ( firstName . toLowerCase ()); // asabeneh let country = \"Finland\" ; console . log ( country . toLowerCase ()); // finland substr() : It takes two arguments, the starting index and number of characters to slice. let string = \"JavaScript\" ; console . log ( string . substr ( 4 , 6 )); // Script let country = \"Finland\" ; console . log ( country . substr ( 3 , 4 )); // land substring() : It takes two arguments, the starting index and the stopping index but it doesn't include the character at the stopping index. let string = \"JavaScript\" ; console . log ( string . substring ( 0 , 4 )); // Java console . log ( string . substring ( 4 , 10 )); // Script console . log ( string . substring ( 4 )); // Script let country = \"Finland\" ; console . log ( country . substring ( 0 , 3 )); // Fin console . log ( country . substring ( 3 , 7 )); // land console . log ( country . substring ( 3 )); // land split() : The split method splits a string at a specified place. let string = \"30 Days Of JavaScript\" ; console . log ( string . split ()); // Changes to an array -> [\"30 Days Of JavaScript\"] console . log ( string . split ( \" \" )); // Split to an array at space -> [\"30\", \"Days\", \"Of\", \"JavaScript\"] let firstName = \"Asabeneh\" ; console . log ( firstName . split ()); // Change to an array - > [\"Asabeneh\"] console . log ( firstName . split ( \"\" )); // Split to an array at each letter -> [\"A\", \"s\", \"a\", \"b\", \"e\", \"n\", \"e\", \"h\"] let countries = \"Finland, Sweden, Norway, Denmark, and Iceland\" ; console . log ( countries . split ( \",\" )); // split to any array at comma -> [\"Finland\", \" Sweden\", \" Norway\", \" Denmark\", \" and Iceland\"] console . log ( countries . split ( \", \" )); // [\"Finland\", \"Sweden\", \"Norway\", \"Denmark\", \"and Iceland\"] trim() : Removes trailing space in the beginning or the end of a string. let string = \" 30 Days Of JavaScript \" ; console . log ( string ); console . log ( string . trim ( \" \" )); let firstName = \" Asabeneh \" ; console . log ( firstName ); console . log ( firstName . trim ()); // still removes spaces at the beginning and the end of the string 30 Days Of JavasCript 30 Days Of JavasCript Asabeneh Asabeneh includes() : It takes a substring argument and it checks if substring argument exists in the string. includes() returns a boolean. If a substring exist in a string, it returns true, otherwise it returns false. let string = \"30 Days Of JavaScript\" ; console . log ( string . includes ( \"Days\" )); // true console . log ( string . includes ( \"days\" )); // false - it is case sensitive! console . log ( string . includes ( \"Script\" )); // true console . log ( string . includes ( \"script\" )); // false console . log ( string . includes ( \"java\" )); // false console . log ( string . includes ( \"Java\" )); // true let country = \"Finland\" ; console . log ( country . includes ( \"fin\" )); // false console . log ( country . includes ( \"Fin\" )); // true console . log ( country . includes ( \"land\" )); // true console . log ( country . includes ( \"Land\" )); // false replace() : takes as a parameter the old substring and a new substring. string . replace ( oldsubstring , newsubstring ); let string = \"30 Days Of JavaScript\" ; console . log ( string . replace ( \"JavaScript\" , \"Python\" )); // 30 Days Of Python let country = \"Finland\" ; console . log ( country . replace ( \"Fin\" , \"Noman\" )); // Nomanland charAt() : Takes index and it returns the value at that index string . charAt ( index ); let string = \"30 Days Of JavaScript\" ; console . log ( string . charAt ( 0 )); // 3 let lastIndex = string . length - 1 ; console . log ( string . charAt ( lastIndex )); // t charCodeAt() : Takes index and it returns char code (ASCII number) of the value at that index string . charCodeAt ( index ); let string = \"30 Days Of JavaScript\" ; console . log ( string . charCodeAt ( 3 )); // D ASCII number is 68 let lastIndex = string . length - 1 ; console . log ( string . charCodeAt ( lastIndex )); // t ASCII is 116 indexOf() : Takes a substring and if the substring exists in a string it returns the first position of the substring if does not exist it returns -1 string . indexOf ( substring ); let string = \"30 Days Of JavaScript\" ; console . log ( string . indexOf ( \"D\" )); // 3 console . log ( string . indexOf ( \"Days\" )); // 3 console . log ( string . indexOf ( \"days\" )); // -1 console . log ( string . indexOf ( \"a\" )); // 4 console . log ( string . indexOf ( \"JavaScript\" )); // 11 console . log ( string . indexOf ( \"Script\" )); //15 console . log ( string . indexOf ( \"script\" )); // -1 lastIndexOf() : Takes a substring and if the substring exists in a string it returns the last position of the substring if it does not exist it returns -1 //syntax string . lastIndexOf ( substring ); let string = \"I love JavaScript. If you do not love JavaScript what else can you love.\" ; console . log ( string . lastIndexOf ( \"love\" )); // 67 console . log ( string . lastIndexOf ( \"you\" )); // 63 console . log ( string . lastIndexOf ( \"JavaScript\" )); // 38 concat() : it takes many substrings and joins them. string . concat ( substring , substring , substring ); let string = \"30\" ; console . log ( string . concat ( \"Days\" , \"Of\" , \"JavaScript\" )); // 30DaysOfJavaScript let country = \"Fin\" ; console . log ( country . concat ( \"land\" )); // Finland startsWith : it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false). //syntax string . startsWith ( substring ); let string = \"Love is the best to in this world\" ; console . log ( string . startsWith ( \"Love\" )); // true console . log ( string . startsWith ( \"love\" )); // false console . log ( string . startsWith ( \"world\" )); // false let country = \"Finland\" ; console . log ( country . startsWith ( \"Fin\" )); // true console . log ( country . startsWith ( \"fin\" )); // false console . log ( country . startsWith ( \"land\" )); // false endsWith : it takes a substring as an argument and it checks if the string ends with that specified substring. It returns a boolean(true or false). string . endsWith ( substring ); let string = \"Love is the most powerful feeling in the world\" ; console . log ( string . endsWith ( \"world\" )); // true console . log ( string . endsWith ( \"love\" )); // false console . log ( string . endsWith ( \"in the world\" )); // true let country = \"Finland\" ; console . log ( country . endsWith ( \"land\" )); // true console . log ( country . endsWith ( \"fin\" )); // false console . log ( country . endsWith ( \"Fin\" )); // false search : it takes a substring as an argument and it returns the index of the first match. The search value can be a string or a regular expression pattern. string . search ( substring ); let string = \"I love JavaScript. If you do not love JavaScript what else can you love.\" ; console . log ( string . search ( \"love\" )); // 2 console . log ( string . search ( /javascript/gi )); // 7 match : it takes a substring or regular expression pattern as an argument and it returns an array if there is match if not it returns null. Let us see how a regular expression pattern looks like. It starts with / sign and ends with / sign. let string = \"love\" ; let patternOne = /love/ ; // with out any flag let patternTwo = /love/gi ; // g-means to search in the whole text, i - case insensitive Match syntax // syntax string . match ( substring ); let string = \"I love JavaScript. If you do not love JavaScript what else can you love.\" ; console . log ( string . match ( \"love\" )); [ \"love\" , index: 2 , input: \"I love JavaScript. If you do not love JavaScript what else can you love.\" , groups: undefined ] let pattern = /love/gi ; console . log ( string . match ( pattern )); // [\"love\", \"love\", \"love\"] Let us extract numbers from text using a regular expression. This is not the regular expression section, do not panic! We will cover regular expressions later on. let txt = \"In 2019, I ran 30 Days of Python. Now, in 2020 I am super exited to start this challenge\" ; let regEx = /\\d+/ ; // d with escape character means d not a normal d instead acts a digit // + means one or more digit numbers, // if there is g after that it means global, search everywhere. console . log ( txt . match ( regEx )); // [\"2\", \"0\", \"1\", \"9\", \"3\", \"0\", \"2\", \"0\", \"2\", \"0\"] console . log ( txt . match ( /\\d+/g )); // [\"2019\", \"30\", \"2020\"] repeat() : it takes a number as argument and it returns the repeated version of the string. string . repeat ( n ); let string = \"love\" ; console . log ( string . repeat ( 10 )); // lovelovelovelovelovelovelovelovelovelove Checking Data Types and Casting Checking Data Types To check the data type of a certain variable we use the typeof method. Example: // Different javascript data types // Let's declare different data types let firstName = \"Asabeneh\" ; // string let lastName = \"Yetayeh\" ; // string let country = \"Finland\" ; // string let city = \"Helsinki\" ; // string let age = 250 ; // number, it is not my real age, do not worry about it let job ; // undefined, because a value was not assigned console . log ( typeof \"Asabeneh\" ); // string console . log ( typeof firstName ); // string console . log ( typeof 10 ); // number console . log ( typeof 3.14 ); // number console . log ( typeof true ); // boolean console . log ( typeof false ); // boolean console . log ( typeof NaN ); // number console . log ( typeof job ); // undefined console . log ( typeof undefined ); // undefined console . log ( typeof null ); // object Changing Data Type (Casting) Casting: Converting one data type to another data type. We use parseInt() , parseFloat() , Number() , + sign , str() When we do arithmetic operations string numbers should be first converted to integer or float if not it returns an error. String to Int We can convert string number to a number. Any number inside a quote is a string number. An example of a string number: '10', '5', etc. We can convert string to number using the following methods: parseInt() Number() Plus sign(+) let num = \"10\" ; let numInt = parseInt ( num ); console . log ( numInt ); // 10 let num = \"10\" ; let numInt = Number ( num ); console . log ( numInt ); // 10 let num = \"10\" ; let numInt = + num ; console . log ( numInt ); // 10 String to Float We can convert string float number to a float number. Any float number inside a quote is a string float number. An example of a string float number: '9.81', '3.14', '1.44', etc. We can convert string float to number using the following methods: parseFloat() Number() Plus sign(+) let num = \"9.81\" ; let numFloat = parseFloat ( num ); console . log ( numFloat ); // 9.81 let num = \"9.81\" ; let numFloat = Number ( num ); console . log ( numFloat ); // 9.81 let num = \"9.81\" ; let numFloat = + num ; console . log ( numFloat ); // 9.81 Float to Int We can convert float numbers to integers. We use the following method to convert float to int: parseInt() let num = 9.81 ; let numInt = parseInt ( num ); console . log ( numInt ); // 9","title":"Data types"},{"location":"javascript_fundamentals/data_types/#data-types","text":"In the previous section, we mentioned a little bit about data types. Data or values have data types. Data types describe the characteristics of data. Data types can be divided into two: Primitive data types Non-primitive data types(Object References)","title":"Data types"},{"location":"javascript_fundamentals/data_types/#primitive-data-types","text":"Primitive data types in JavaScript include: Numbers - Integers, floats Strings - Any data under single quote, double quote or backtick quote Booleans - true or false value Null - empty value or no value Undefined - a declared variable without a value Symbol - A unique value that can be generated by Symbol constructor Non-primitive data types in JavaScript includes: Objects Arrays Now, let us see what exactly primitive and non-primitive data types mean. Primitive data types are immutable(non-modifiable) data types. Once a primitive data type is created we cannot modify it. Example: let word = \"JavaScript\" ; If we try to modify the string stored in variable word , JavaScript should raise an error. Any data type under a single quote, double quote, or backtick quote is a string data type. word [ 0 ] = \"Y\" ; This expression does not change the string stored in the variable word . So, we can say that strings are not modifiable or in other words immutable. Primitive data types are compared by its values. Let us compare different data values. See the example below: let numOne = 3 ; let numTwo = 3 ; console . log ( numOne == numTwo ); // true let js = \"JavaScript\" ; let py = \"Python\" ; console . log ( js == py ); //false let lightOn = true ; let lightOff = false ; console . log ( lightOn == lightOff ); // false","title":"Primitive Data Types"},{"location":"javascript_fundamentals/data_types/#non-primitive-data-types","text":"Non-primitive data types are modifiable or mutable. We can modify the value of non-primitive data types after it gets created. Let us see by creating an array. An array is a list of data values in a square bracket. Arrays can contain the same or different data types. Array values are referenced by their index. In JavaScript array index starts at zero. I.e., the first element of an array is found at index zero, the second element at index one, and the third element at index two, etc. let nums = [ 1 , 2 , 3 ]; nums [ 0 ] = 10 ; console . log ( nums ); // [10, 2, 3] As you can see, an array, which is a non-primitive data type is mutable. Non-primitive data types cannot be compared by value. Even if two non-primitive data types have the same properties and values, they are not strictly equal. let nums = [ 1 , 2 , 3 ]; let numbers = [ 1 , 2 , 3 ]; console . log ( nums == numbers ); // false let userOne = { name : \"Asabeneh\" , role : \"teaching\" , country : \"Finland\" , }; let userTwo = { name : \"Asabeneh\" , role : \"teaching\" , country : \"Finland\" , }; console . log ( userOne == userTwo ); // false Rule of thumb, we do not compare non-primitive data types. Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value. Two objects are only strictly equal if they refer to the same underlying object. let nums = [ 1 , 2 , 3 ]; let numbers = nums ; console . log ( nums == numbers ); // true let userOne = { name : \"Asabeneh\" , role : \"teaching\" , country : \"Finland\" , }; let userTwo = userOne ; console . log ( userOne == userTwo ); // true If you have a hard time understanding the difference between primitive data types and non-primitive data types, you are not the only one. Calm down and just go to the next section and try to come back after some time. Now let us start the data types by number type.","title":"Non-Primitive Data Types"},{"location":"javascript_fundamentals/data_types/#numbers","text":"Numbers are integers and decimal values which can do all the arithmetic operations. Let's see some examples of Numbers.","title":"Numbers"},{"location":"javascript_fundamentals/data_types/#declaring-number-data-types","text":"let age = 35 ; const gravity = 9.81 ; // we use const for non-changing values, gravitational constant in m/s2 let mass = 72 ; // mass in Kilogram const PI = 3.14 ; // pi a geometrical constant // More Examples const boilingPoint = 100 ; // temperature in oC, boiling point of water which is a constant const bodyTemp = 37 ; // oC average human body temperature, which is a constant console . log ( age , gravity , mass , PI , boilingPoint , bodyTemp );","title":"Declaring Number Data Types"},{"location":"javascript_fundamentals/data_types/#math-object","text":"In JavaScript the Math Object provides a lots of methods to work with numbers. const PI = Math . PI ; console . log ( PI ); // 3.141592653589793 // Rounding to the closest number // if above .5 up if less 0.5 down rounding console . log ( Math . round ( PI )); // 3 to round values to the nearest number console . log ( Math . round ( 9.81 )); // 10 console . log ( Math . floor ( PI )); // 3 rounding down console . log ( Math . ceil ( PI )); // 4 rounding up console . log ( Math . min ( - 5 , 3 , 20 , 4 , 5 , 10 )); // -5, returns the minimum value console . log ( Math . max ( - 5 , 3 , 20 , 4 , 5 , 10 )); // 20, returns the maximum value const randNum = Math . random (); // creates random number between 0 to 0.999999 console . log ( randNum ); // Let us create random number between 0 to 10 const num = Math . floor ( Math . random () * 11 ); // creates random number between 0 and 10 console . log ( num ); //Absolute value console . log ( Math . abs ( - 10 )); // 10 //Square root console . log ( Math . sqrt ( 100 )); // 10 console . log ( Math . sqrt ( 2 )); // 1.4142135623730951 // Power console . log ( Math . pow ( 3 , 2 )); // 9 console . log ( Math . E ); // 2.718 // Logarithm // Returns the natural logarithm with base E of x, Math.log(x) console . log ( Math . log ( 2 )); // 0.6931471805599453 console . log ( Math . log ( 10 )); // 2.302585092994046 // Returns the natural logarithm of 2 and 10 respectively console . log ( Math . LN2 ); // 0.6931471805599453 console . log ( Math . LN10 ); // 2.302585092994046 // Trigonometry Math . sin ( 0 ); Math . sin ( 60 ); Math . cos ( 0 ); Math . cos ( 60 );","title":"Math Object"},{"location":"javascript_fundamentals/data_types/#random-number-generator","text":"The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999... let randomNum = Math . random (); // generates 0 to 0.999... Now, let us see how we can use random() method to generate a random number between 0 and 10: let randomNum = Math . random (); // generates 0 to 0.999 let numBtnZeroAndTen = randomNum * 11 ; console . log ( numBtnZeroAndTen ); // this gives: min 0 and max 10.99 let randomNumRoundToFloor = Math . floor ( numBtnZeroAndTen ); console . log ( randomNumRoundToFloor ); // this gives between 0 and 10","title":"Random Number Generator"},{"location":"javascript_fundamentals/data_types/#strings","text":"Strings are texts, which are under single , double , back-tick quote. To declare a string, we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote. Let's see some examples of strings: let space = \" \" ; // an empty space string let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let country = \"Finland\" ; let city = \"Helsinki\" ; let language = \"JavaScript\" ; let job = \"teacher\" ; let quote = \"The saying,'Seeing is Believing' is not correct in 2020.\" ; let quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.` ;","title":"Strings"},{"location":"javascript_fundamentals/data_types/#string-concatenation","text":"Connecting two or more strings together is called concatenation. Using the strings declared in the previous String section: let fullName = firstName + space + lastName ; // concatenation, merging two string together. console . log ( fullName ); Asabeneh Yetayeh We can concatenate strings in different ways.","title":"String Concatenation"},{"location":"javascript_fundamentals/data_types/#concatenating-using-addition-operator","text":"Concatenating using the addition operator is an old way. This way of concatenating is tedious and error-prone. It is good to know how to concatenate this way, but I strongly suggest to use the ES6 template strings (explained later on). // Declaring different variables of different data types let space = \" \" ; let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let country = \"Finland\" ; let city = \"Helsinki\" ; let language = \"JavaScript\" ; let job = \"teacher\" ; let age = 250 ; let fullName = firstName + space + lastName ; let personInfoOne = fullName + \". I am \" + age + \". I live in \" + country ; // ES5 string addition console . log ( personInfoOne ); Asabeneh Yetayeh. I am 250 . I live in Finland","title":"Concatenating Using Addition Operator"},{"location":"javascript_fundamentals/data_types/#long-literal-strings","text":"A string could be a single character or paragraph or a page. If the string length is too big it does not fit in one line. We can use the backslash character (\\) at the end of each line to indicate that the string will continue on the next line. Example: const paragraph = \"My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\\ I am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \\ Node.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \\ In the end of 2019, I was thinking to expand my teaching and to reach \\ to global audience and I started a Python challenge from November 20 - December 19.\\ It was one of the most rewarding and inspiring experience.\\ Now, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \\ I hope you are enjoying too.\" ; console . log ( paragraph );","title":"Long Literal Strings"},{"location":"javascript_fundamentals/data_types/#escape-sequences-in-strings","text":"In JavaScript and other programming languages \\ followed by some characters is an escape sequence. Let's see the most common escape characters: \\n: new line \\t: Tab, means 8 spaces \\\\: Back slash \\': Single quote (') \\\": Double quote (\") console . log ( \"I hope everyone is enjoying the 30 Days Of JavaScript challenge.\\nDo you ?\" ); // line break console . log ( \"Days\\tTopics\\tExercises\" ); console . log ( \"Day 1\\t3\\t5\" ); console . log ( \"Day 2\\t3\\t5\" ); console . log ( \"Day 3\\t3\\t5\" ); console . log ( \"Day 4\\t3\\t5\" ); console . log ( \"This is a backslash symbol (\\\\)\" ); // To write a backslash console . log ( 'In every programming language it starts with \"Hello, World!\"' ); console . log ( \"In every programming language it starts with 'Hello, World!'\" ); console . log ( \"The saying 'Seeing is Believing' isn't correct in 2020\" ); Output in console: I hope everyone is enjoying the 30 Days Of JavaScript challenge. Do you ? Days Topics Exercises Day 1 3 5 Day 2 3 5 Day 3 3 5 Day 4 3 5 This is a backslash symbol ( \\) In every programming language it starts with \"Hello, World!\" In every programming language it starts with 'Hello, World!' The saying 'Seeing is Believing' isn ' t correct in 2020","title":"Escape Sequences in Strings"},{"location":"javascript_fundamentals/data_types/#template-literals-template-strings","text":"To create a template strings, we use two back-ticks. We can inject data as expressions inside a template string. To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. See the syntax below. //Syntax `String literal text``String literal text ${ expression } ` ; Example: 1 console . log ( `The sum of 2 and 3 is 5` ); // statically writing the data let a = 2 ; let b = 3 ; console . log ( `The sum of ${ a } and ${ b } is ${ a + b } ` ); // injecting the data dynamically Example:2 let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let country = \"Finland\" ; let city = \"Helsinki\" ; let language = \"JavaScript\" ; let job = \"teacher\" ; let age = 250 ; let fullName = firstName + \" \" + lastName ; let personInfoTwo = `I am ${ fullName } . I am ${ age } . I live in ${ country } .` ; //ES6 - String interpolation method let personInfoThree = `I am ${ fullName } . I live in ${ city } , ${ country } . I am a ${ job } . I teach ${ language } .` ; console . log ( personInfoTwo ); console . log ( personInfoThree ); I am Asabeneh Yetayeh. I am 250 . I live in Finland. I am Asabeneh Yetayeh. I live in Helsinki, Finland. I am a teacher. I teach JavaScript. Using a string template or string interpolation method, we can add expressions, which could be a value, or some operations (comparison, arithmetic operations, ternary operation). let a = 2 ; let b = 3 ; console . log ( ` ${ a } is greater than ${ b } : ${ a > b } ` ); 2 is greater than 3 : false","title":"Template Literals (Template Strings)"},{"location":"javascript_fundamentals/data_types/#string-methods","text":"Everything in JavaScript is an object. A string is a primitive data type that means we can not modify it once it is created. The string object has many string methods. There are different string methods that can help us to work with strings. length : The string length method returns the number of characters in a string included empty space. Example: let js = \"JavaScript\" ; console . log ( js . length ); // 10 let firstName = \"Asabeneh\" ; console . log ( firstName . length ); // 8 Accessing characters in a string : We can access each character in a string using its index. In programming, counting starts from 0. The first index of the string is zero, and the last index is the length of the string minus one. Let us access different characters in 'JavaScript' string. let string = \"JavaScript\" ; let firstLetter = string [ 0 ]; console . log ( firstLetter ); // J let secondLetter = string [ 1 ]; // a let thirdLetter = string [ 2 ]; let lastLetter = string [ 9 ]; console . log ( lastLetter ); // t let lastIndex = string . length - 1 ; console . log ( lastIndex ); // 9 console . log ( string [ lastIndex ]); // t toUpperCase() : this method changes the string to uppercase letters. let string = \"JavaScript\" ; console . log ( string . toUpperCase ()); // JAVASCRIPT let firstName = \"Asabeneh\" ; console . log ( firstName . toUpperCase ()); // ASABENEH let country = \"Finland\" ; console . log ( country . toUpperCase ()); // FINLAND toLowerCase() : this method changes the string to lowercase letters. let string = \"JavasCript\" ; console . log ( string . toLowerCase ()); // javascript let firstName = \"Asabeneh\" ; console . log ( firstName . toLowerCase ()); // asabeneh let country = \"Finland\" ; console . log ( country . toLowerCase ()); // finland substr() : It takes two arguments, the starting index and number of characters to slice. let string = \"JavaScript\" ; console . log ( string . substr ( 4 , 6 )); // Script let country = \"Finland\" ; console . log ( country . substr ( 3 , 4 )); // land substring() : It takes two arguments, the starting index and the stopping index but it doesn't include the character at the stopping index. let string = \"JavaScript\" ; console . log ( string . substring ( 0 , 4 )); // Java console . log ( string . substring ( 4 , 10 )); // Script console . log ( string . substring ( 4 )); // Script let country = \"Finland\" ; console . log ( country . substring ( 0 , 3 )); // Fin console . log ( country . substring ( 3 , 7 )); // land console . log ( country . substring ( 3 )); // land split() : The split method splits a string at a specified place. let string = \"30 Days Of JavaScript\" ; console . log ( string . split ()); // Changes to an array -> [\"30 Days Of JavaScript\"] console . log ( string . split ( \" \" )); // Split to an array at space -> [\"30\", \"Days\", \"Of\", \"JavaScript\"] let firstName = \"Asabeneh\" ; console . log ( firstName . split ()); // Change to an array - > [\"Asabeneh\"] console . log ( firstName . split ( \"\" )); // Split to an array at each letter -> [\"A\", \"s\", \"a\", \"b\", \"e\", \"n\", \"e\", \"h\"] let countries = \"Finland, Sweden, Norway, Denmark, and Iceland\" ; console . log ( countries . split ( \",\" )); // split to any array at comma -> [\"Finland\", \" Sweden\", \" Norway\", \" Denmark\", \" and Iceland\"] console . log ( countries . split ( \", \" )); // [\"Finland\", \"Sweden\", \"Norway\", \"Denmark\", \"and Iceland\"] trim() : Removes trailing space in the beginning or the end of a string. let string = \" 30 Days Of JavaScript \" ; console . log ( string ); console . log ( string . trim ( \" \" )); let firstName = \" Asabeneh \" ; console . log ( firstName ); console . log ( firstName . trim ()); // still removes spaces at the beginning and the end of the string 30 Days Of JavasCript 30 Days Of JavasCript Asabeneh Asabeneh includes() : It takes a substring argument and it checks if substring argument exists in the string. includes() returns a boolean. If a substring exist in a string, it returns true, otherwise it returns false. let string = \"30 Days Of JavaScript\" ; console . log ( string . includes ( \"Days\" )); // true console . log ( string . includes ( \"days\" )); // false - it is case sensitive! console . log ( string . includes ( \"Script\" )); // true console . log ( string . includes ( \"script\" )); // false console . log ( string . includes ( \"java\" )); // false console . log ( string . includes ( \"Java\" )); // true let country = \"Finland\" ; console . log ( country . includes ( \"fin\" )); // false console . log ( country . includes ( \"Fin\" )); // true console . log ( country . includes ( \"land\" )); // true console . log ( country . includes ( \"Land\" )); // false replace() : takes as a parameter the old substring and a new substring. string . replace ( oldsubstring , newsubstring ); let string = \"30 Days Of JavaScript\" ; console . log ( string . replace ( \"JavaScript\" , \"Python\" )); // 30 Days Of Python let country = \"Finland\" ; console . log ( country . replace ( \"Fin\" , \"Noman\" )); // Nomanland charAt() : Takes index and it returns the value at that index string . charAt ( index ); let string = \"30 Days Of JavaScript\" ; console . log ( string . charAt ( 0 )); // 3 let lastIndex = string . length - 1 ; console . log ( string . charAt ( lastIndex )); // t charCodeAt() : Takes index and it returns char code (ASCII number) of the value at that index string . charCodeAt ( index ); let string = \"30 Days Of JavaScript\" ; console . log ( string . charCodeAt ( 3 )); // D ASCII number is 68 let lastIndex = string . length - 1 ; console . log ( string . charCodeAt ( lastIndex )); // t ASCII is 116 indexOf() : Takes a substring and if the substring exists in a string it returns the first position of the substring if does not exist it returns -1 string . indexOf ( substring ); let string = \"30 Days Of JavaScript\" ; console . log ( string . indexOf ( \"D\" )); // 3 console . log ( string . indexOf ( \"Days\" )); // 3 console . log ( string . indexOf ( \"days\" )); // -1 console . log ( string . indexOf ( \"a\" )); // 4 console . log ( string . indexOf ( \"JavaScript\" )); // 11 console . log ( string . indexOf ( \"Script\" )); //15 console . log ( string . indexOf ( \"script\" )); // -1 lastIndexOf() : Takes a substring and if the substring exists in a string it returns the last position of the substring if it does not exist it returns -1 //syntax string . lastIndexOf ( substring ); let string = \"I love JavaScript. If you do not love JavaScript what else can you love.\" ; console . log ( string . lastIndexOf ( \"love\" )); // 67 console . log ( string . lastIndexOf ( \"you\" )); // 63 console . log ( string . lastIndexOf ( \"JavaScript\" )); // 38 concat() : it takes many substrings and joins them. string . concat ( substring , substring , substring ); let string = \"30\" ; console . log ( string . concat ( \"Days\" , \"Of\" , \"JavaScript\" )); // 30DaysOfJavaScript let country = \"Fin\" ; console . log ( country . concat ( \"land\" )); // Finland startsWith : it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false). //syntax string . startsWith ( substring ); let string = \"Love is the best to in this world\" ; console . log ( string . startsWith ( \"Love\" )); // true console . log ( string . startsWith ( \"love\" )); // false console . log ( string . startsWith ( \"world\" )); // false let country = \"Finland\" ; console . log ( country . startsWith ( \"Fin\" )); // true console . log ( country . startsWith ( \"fin\" )); // false console . log ( country . startsWith ( \"land\" )); // false endsWith : it takes a substring as an argument and it checks if the string ends with that specified substring. It returns a boolean(true or false). string . endsWith ( substring ); let string = \"Love is the most powerful feeling in the world\" ; console . log ( string . endsWith ( \"world\" )); // true console . log ( string . endsWith ( \"love\" )); // false console . log ( string . endsWith ( \"in the world\" )); // true let country = \"Finland\" ; console . log ( country . endsWith ( \"land\" )); // true console . log ( country . endsWith ( \"fin\" )); // false console . log ( country . endsWith ( \"Fin\" )); // false search : it takes a substring as an argument and it returns the index of the first match. The search value can be a string or a regular expression pattern. string . search ( substring ); let string = \"I love JavaScript. If you do not love JavaScript what else can you love.\" ; console . log ( string . search ( \"love\" )); // 2 console . log ( string . search ( /javascript/gi )); // 7 match : it takes a substring or regular expression pattern as an argument and it returns an array if there is match if not it returns null. Let us see how a regular expression pattern looks like. It starts with / sign and ends with / sign. let string = \"love\" ; let patternOne = /love/ ; // with out any flag let patternTwo = /love/gi ; // g-means to search in the whole text, i - case insensitive Match syntax // syntax string . match ( substring ); let string = \"I love JavaScript. If you do not love JavaScript what else can you love.\" ; console . log ( string . match ( \"love\" )); [ \"love\" , index: 2 , input: \"I love JavaScript. If you do not love JavaScript what else can you love.\" , groups: undefined ] let pattern = /love/gi ; console . log ( string . match ( pattern )); // [\"love\", \"love\", \"love\"] Let us extract numbers from text using a regular expression. This is not the regular expression section, do not panic! We will cover regular expressions later on. let txt = \"In 2019, I ran 30 Days of Python. Now, in 2020 I am super exited to start this challenge\" ; let regEx = /\\d+/ ; // d with escape character means d not a normal d instead acts a digit // + means one or more digit numbers, // if there is g after that it means global, search everywhere. console . log ( txt . match ( regEx )); // [\"2\", \"0\", \"1\", \"9\", \"3\", \"0\", \"2\", \"0\", \"2\", \"0\"] console . log ( txt . match ( /\\d+/g )); // [\"2019\", \"30\", \"2020\"] repeat() : it takes a number as argument and it returns the repeated version of the string. string . repeat ( n ); let string = \"love\" ; console . log ( string . repeat ( 10 )); // lovelovelovelovelovelovelovelovelovelove","title":"String Methods"},{"location":"javascript_fundamentals/data_types/#checking-data-types-and-casting","text":"","title":"Checking Data Types and Casting"},{"location":"javascript_fundamentals/data_types/#checking-data-types","text":"To check the data type of a certain variable we use the typeof method. Example: // Different javascript data types // Let's declare different data types let firstName = \"Asabeneh\" ; // string let lastName = \"Yetayeh\" ; // string let country = \"Finland\" ; // string let city = \"Helsinki\" ; // string let age = 250 ; // number, it is not my real age, do not worry about it let job ; // undefined, because a value was not assigned console . log ( typeof \"Asabeneh\" ); // string console . log ( typeof firstName ); // string console . log ( typeof 10 ); // number console . log ( typeof 3.14 ); // number console . log ( typeof true ); // boolean console . log ( typeof false ); // boolean console . log ( typeof NaN ); // number console . log ( typeof job ); // undefined console . log ( typeof undefined ); // undefined console . log ( typeof null ); // object","title":"Checking Data Types"},{"location":"javascript_fundamentals/data_types/#changing-data-type-casting","text":"Casting: Converting one data type to another data type. We use parseInt() , parseFloat() , Number() , + sign , str() When we do arithmetic operations string numbers should be first converted to integer or float if not it returns an error.","title":"Changing Data Type (Casting)"},{"location":"javascript_fundamentals/data_types/#string-to-int","text":"We can convert string number to a number. Any number inside a quote is a string number. An example of a string number: '10', '5', etc. We can convert string to number using the following methods: parseInt() Number() Plus sign(+) let num = \"10\" ; let numInt = parseInt ( num ); console . log ( numInt ); // 10 let num = \"10\" ; let numInt = Number ( num ); console . log ( numInt ); // 10 let num = \"10\" ; let numInt = + num ; console . log ( numInt ); // 10","title":"String to Int"},{"location":"javascript_fundamentals/data_types/#string-to-float","text":"We can convert string float number to a float number. Any float number inside a quote is a string float number. An example of a string float number: '9.81', '3.14', '1.44', etc. We can convert string float to number using the following methods: parseFloat() Number() Plus sign(+) let num = \"9.81\" ; let numFloat = parseFloat ( num ); console . log ( numFloat ); // 9.81 let num = \"9.81\" ; let numFloat = Number ( num ); console . log ( numFloat ); // 9.81 let num = \"9.81\" ; let numFloat = + num ; console . log ( numFloat ); // 9.81","title":"String to Float"},{"location":"javascript_fundamentals/data_types/#float-to-int","text":"We can convert float numbers to integers. We use the following method to convert float to int: parseInt() let num = 9.81 ; let numInt = parseInt ( num ); console . log ( numInt ); // 9","title":"Float to Int"},{"location":"javascript_fundamentals/destructuring_and_spreading/","text":"Destructuring and Spreading What is Destructuring? Destructuring is a way to unpack arrays, and objects and assigning to a distinct variable. Destructuring allows us to write clean and readable code. What can we destructure? Arrays Objects 1. Destructuring arrays Arrays are a list of different data types ordered by their index. Let's see an example of arrays: const numbers = [ 1 , 2 , 3 ]; const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" ]; We can access an item from an array using a certain index by iterating through the loop or manually as shown in the example below. Accessing array items using a loop for ( const number of numbers ) { console . log ( number ); } for ( const country of countries ) { console . log ( country ); } Accessing array items manually const numbers = [ 1 , 2 , 3 ]; let num1 = numbers [ 0 ]; let num2 = numbers [ 1 ]; let num3 = numbers [ 2 ]; console . log ( num1 , num2 , num3 ); // 1, 2, 3 const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" ]; let fin = countries [ 0 ]; let swe = countries [ 1 ]; let nor = countries [ 2 ]; console . log ( fin , swe , nor ); // Finland, Sweden, Norway Most of the time the size of an array is big and we use a loop to iterate through each item of the arrays. Sometimes, we may have short arrays. If the array size is very short it is ok to access the items manually as shown above but today we will see a better way to access the array item which is destructuring. Accessing array items using destructuring const numbers = [ 1 , 2 , 3 ] const [ num1 , num2 , num3 ] = numbers console . log ( num1 , num2 , num3 ) // 1, 2, 3, const constants = [ 2.72 , 3.14 , 9.81 , 37 , 100 ] const [ e , pi , gravity , bodyTemp , boilingTemp ] = constants console . log ( e , pi , gravity , bodyTemp , boilingTemp ] // 2.72, 3.14, 9.81, 37,100 const countries = [ 'Finland' , 'Sweden' , 'Norway' ] const [ fin , swe , nor ] = countries console . log ( fin , swe , nor ) // Finland, Sweden, Norway During destructuring each variable should match with the index of the desired item in the array. For instance, the variable fin matches to index 0 and the variable nor matches to index 2. What would be the value of den if you have a variable den next nor? const [ fin , swe , nor , den ] = countries ; console . log ( den ); // undefined If you tried the above task you confirmed that the value is undefined. Actually, we can pass a default value to the variable, and if the value of that specific index is undefined the default value will be used. const countries = [ \"Finland\" , \"Sweden\" , undefined , \"Norway\" ]; const [ fin , swe , ice = \"Iceland\" , nor , den = \"Denmark\" ] = countries ; console . log ( fin , swe , ice , nor , den ); // Finland, Sweden, Iceland, Norway, Denmark Destructuring Nested arrays const fullStack = [ [ 'HTML' , 'CSS' , 'JS' , 'React' ], [ 'Node' , 'Express' , 'MongoDB' ] ] const [ frontEnd , backEnd ] = fullstack console . log ( frontEnd , backEnd ) //[\"HTML\", \"CSS\", \"JS\", \"React\"] , [\"Node\", \"Express\", \"MongoDB\"] const fruitsAndVegetables = [[ 'banana' , 'orange' , 'mango' , 'lemon' ], [ 'Tomato' , 'Potato' , 'Cabbage' , 'Onion' , 'Carrot' ]] const [ fruits , vegetables ] = fruitsAndVegetables console . log ( fruits , vegetables ] //['banana', 'orange', 'mango', 'lemon'] //['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot'] Skipping an Item during destructuring During destructuring if we are not interested in every item, we can omit a certain item by putting a comma at that index. Let's get only Finland, Iceland, and Denmark from the array. See the example below for more clarity: const countries = [ \"Finland\" , \"Sweden\" , \"Iceland\" , \"Norway\" , \"Denmark\" ]; const [ fin , , ice , , den ] = countries ; console . log ( fin , ice , den ); // Finland, Iceland, Denmark Getting the rest of the array using the spread operator We use three dots(...) to spread or get the rest of an array during destructuring const nums = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const [ num1 , num2 , num3 , ... rest ] = nums ; console . log ( num1 , num2 , num3 , rest ); //1, 2, 3, [4, 5, 6, 7, 8, 9, 10] const countries = [ \"Germany\" , \"France\" , \"Belgium\" , \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" , ]; let [ gem , fra , , ... nordicCountries ] = countries ; console . log ( gem , fra , nordicCountries ); // Germany, France, [\"Finland\", \"Sweden\", \"Norway\", \"Denmark\", \"Iceland\"] There many cases in which we use array destructuring, let's see the following example: Destructuring when we loop through arrays const countries = [ [ \"Finland\" , \"Helsinki\" ], [ \"Sweden\" , \"Stockholm\" ], [ \"Norway\" , \"Oslo\" ], ]; for ( const [ country , city ] of countries ) { console . log ( country , city ); } const fullStack = [ [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" ], [ \"Node\" , \"Express\" , \"MongoDB\" ], ]; for ( const [ first , second , third , fourth ] of fullStack ) { console . log ( first , second , third , fourt ); } What do you think about the code snippet below? If you have started React Hooks already it may remind you of the useState hook. const [ x , y ] = [ 2 , ( value ) => value ** 2 ]; What is the value of x? And what is the value of y(x)? I leave this for you to figure out. If you have used react hooks you are very familiar with this and as you may imagine it is destructuring. The initial value of count is 0 and the setCount is a method that changes the value of count. const [ count , setCount ] = useState ( 0 ); Now, you know how to destructure arrays. Let's move on to destructuring objects. 2. Destructuring objects An object literal is made of key and value pairs. A very simple example of an object: const rectangle = { width : 20 , height : 10 , }; We access the value of an object using the following methods: const rectangle = { width : 20 , height : 10 , }; let width = rectangle . width ; let height = recangle . height ; // or let width = rectangle [ width ]; let height = recangle [ height ]; But today, we will see how to access the value of an object using destructuring. When we destructure an object the name of the variable should be exactly the same as the key or property of the object. See the example below. const rectangle = { width : 20 , height : 10 , }; let { width , height } = rectangle ; console . log ( width , height , perimeter ); // 20, 10 What will be the value of we try to access a key which not in the object. const rectangle = { width : 20 , height : 10 , }; let { width , height , perimeter } = rectangleconsole . log ( width , height , perimeter ); // 20, 10, undefined The value of the perimeter in the above example is undefined. Default value during object destructuring Similar to the array, we can also use a default value in object destructuring. const rectangle = { width : 20 , height : 10 , }; let { width , height , perimeter = 200 } = rectangle ; console . log ( width , height , perimeter ); // 20, 10, undefined Renaming variable names const rectangle = { width : 20 , height : 10 , }; let { width : w , height : h } = rectangle ; Let's also destructure, nested objects. In the example below, we have nested objects and we can destructure it in two ways. We can just destructure step by step const props = { user : { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , }, post : { title : \"Destructuring and Spread\" , subtitle : \"ES6\" , year : 2020 , }, skills : [ \"JS\" , \"React\" , \"Redux\" , \"Node\" , \"Python\" ], }; const { user , post , skills } = props ; const { firstName , lastName , age } = user ; const { title , subtitle , year } = post ; const [ skillOne , skillTwo , skillThree , skillFour , skillFive ] = skills ; We can destructure it one step const props = { user : { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , }, post : { title : \"Destructuring and Spread\" , subtitle : \"ES6\" , year : 2020 , }, skills : [ \"JS\" , \"React\" , \"Redux\" , \"Node\" , \"Python\" ], }; const { user : { firstName , lastName , age }, post : { title , subtitle , year }, skills : [ skillOne , skillTwo , skillThree , skillFour , skillFive ], } = props ; Destructuring during loop through an array const languages = [ { lang : \"English\" , count : 91 }, { lang : \"French\" , count : 45 }, { lang : \"Arabic\" , count : 25 }, { lang : \"Spanish\" , count : 24 }, { lang : \"Russian\" , count : 9 }, { lang : \"Portuguese\" , count : 9 }, { lang : \"Dutch\" , count : 8 }, { lang : \"German\" , count : 7 }, { lang : \"Chinese\" , count : 5 }, { lang : \"Swahili\" , count : 4 }, { lang : \"Serbian\" , count : 4 }, ]; for ( const { lang , count } of languages ) { console . log ( `The ${ lang } is spoken in ${ count } countries.` ); } Destructuring function parameter const rectangle = { width : 20 , height : 10 }; const calcualteArea = ({ width , height }) => width * height ; const calculatePerimeter = ({ width , height } = 2 * ( width + height )); Spread or Rest Operator When we destructure an array we use the spread operator(...) to get the rest elements as array. In addition to that we use spread operator to spread arr elements to another array. Spread operator to get the rest of array elements const nums = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] let [ num1 , num2 , num3 , ... rest ] = nums \u200b console . log ( num1 , num2 , num3 ) console . log ( rest ) 1 2 3 [ 4 , 5 , 6 , 7 , 8 , 9 , 10 ] const countries = [ \"Germany\" , \"France\" , \"Belgium\" , \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" , ]; let [ gem , fra , , ... nordicCountries ] = countries ; console . log ( gem ); console . log ( fra ); console . log ( nordicCountries ); Germany France [ \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" ] Spread operator to copy array const evens = [ 0 , 2 , 4 , 6 , 8 , 10 ]; const evenNumbers = [... evens ]; const odds = [ 1 , 3 , 5 , 7 , 9 ]; const oddNumbers = [... odds ]; const wholeNumbers = [... evens , ... odds ]; console . log ( evenNumbers ); console . log ( oddNumbers ); console . log ( wholeNumbers ); [ 0 , 2 , 4 , 6 , 8 , 10 ] [ 1 , 3 , 5 , 7 , 9 ] [ 0 , 2 , 4 , 6 , 8 , 10 , 1 , 3 , 5 , 7 , 9 ] const frontEnd = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" ]; const backEnd = [ \"Node\" , \"Express\" , \"MongoDB\" ]; const fullStack = [... frontEnd , ... backEnd ]; console . log ( fullStack ); [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Node\" , \"Express\" , \"MongoDB\" ] Spread operator to copy object We can copy an object using a spread operator const user = { name : \"Asabeneh\" , title : \"Programmer\" , country : \"Finland\" , city : \"Helsinki\" , }; const copiedUser = { ... user }; console . log ( copiedUser ); { name: \"Asabeneh\" , title: \"Programmer\" , country: \"Finland\" , city: \"Helsinki\" } Modifying or changing the object while copying const user = { name : \"Asabeneh\" , title : \"Programmer\" , country : \"Finland\" , city : \"Helsinki\" , }; const copiedUser = { ... user , title : \"instructor\" }; console . log ( copiedUser ); { name: \"Asabeneh\" , title: \"instructor\" , country: \"Finland\" , city: \"Helsinki\" } Spread operator with arrow function Whenever we like to write an arrow function which takes unlimited number of arguments we use a spread operator. If we use a spread operator as a parameter, the argument passed when we invoke a function will change to an array. const sumAllNums = (... args ) => { console . log ( args ); }; sumAllNums ( 1 , 2 , 3 , 4 , 5 ); [ 1 , 2 , 3 , 4 , 5 ] const sumAllNums = (... args ) => { let sum = 0 ; for ( const num of args ) { sum += num ; } return sum ; }; console . log ( sumAllNums ( 1 , 2 , 3 , 4 , 5 )); 15","title":"Destructuring and Spreading"},{"location":"javascript_fundamentals/destructuring_and_spreading/#destructuring-and-spreading","text":"","title":"Destructuring and Spreading"},{"location":"javascript_fundamentals/destructuring_and_spreading/#what-is-destructuring","text":"Destructuring is a way to unpack arrays, and objects and assigning to a distinct variable. Destructuring allows us to write clean and readable code.","title":"What is Destructuring?"},{"location":"javascript_fundamentals/destructuring_and_spreading/#what-can-we-destructure","text":"Arrays Objects","title":"What can we destructure?"},{"location":"javascript_fundamentals/destructuring_and_spreading/#1-destructuring-arrays","text":"Arrays are a list of different data types ordered by their index. Let's see an example of arrays: const numbers = [ 1 , 2 , 3 ]; const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" ]; We can access an item from an array using a certain index by iterating through the loop or manually as shown in the example below. Accessing array items using a loop for ( const number of numbers ) { console . log ( number ); } for ( const country of countries ) { console . log ( country ); } Accessing array items manually const numbers = [ 1 , 2 , 3 ]; let num1 = numbers [ 0 ]; let num2 = numbers [ 1 ]; let num3 = numbers [ 2 ]; console . log ( num1 , num2 , num3 ); // 1, 2, 3 const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" ]; let fin = countries [ 0 ]; let swe = countries [ 1 ]; let nor = countries [ 2 ]; console . log ( fin , swe , nor ); // Finland, Sweden, Norway Most of the time the size of an array is big and we use a loop to iterate through each item of the arrays. Sometimes, we may have short arrays. If the array size is very short it is ok to access the items manually as shown above but today we will see a better way to access the array item which is destructuring. Accessing array items using destructuring const numbers = [ 1 , 2 , 3 ] const [ num1 , num2 , num3 ] = numbers console . log ( num1 , num2 , num3 ) // 1, 2, 3, const constants = [ 2.72 , 3.14 , 9.81 , 37 , 100 ] const [ e , pi , gravity , bodyTemp , boilingTemp ] = constants console . log ( e , pi , gravity , bodyTemp , boilingTemp ] // 2.72, 3.14, 9.81, 37,100 const countries = [ 'Finland' , 'Sweden' , 'Norway' ] const [ fin , swe , nor ] = countries console . log ( fin , swe , nor ) // Finland, Sweden, Norway During destructuring each variable should match with the index of the desired item in the array. For instance, the variable fin matches to index 0 and the variable nor matches to index 2. What would be the value of den if you have a variable den next nor? const [ fin , swe , nor , den ] = countries ; console . log ( den ); // undefined If you tried the above task you confirmed that the value is undefined. Actually, we can pass a default value to the variable, and if the value of that specific index is undefined the default value will be used. const countries = [ \"Finland\" , \"Sweden\" , undefined , \"Norway\" ]; const [ fin , swe , ice = \"Iceland\" , nor , den = \"Denmark\" ] = countries ; console . log ( fin , swe , ice , nor , den ); // Finland, Sweden, Iceland, Norway, Denmark Destructuring Nested arrays const fullStack = [ [ 'HTML' , 'CSS' , 'JS' , 'React' ], [ 'Node' , 'Express' , 'MongoDB' ] ] const [ frontEnd , backEnd ] = fullstack console . log ( frontEnd , backEnd ) //[\"HTML\", \"CSS\", \"JS\", \"React\"] , [\"Node\", \"Express\", \"MongoDB\"] const fruitsAndVegetables = [[ 'banana' , 'orange' , 'mango' , 'lemon' ], [ 'Tomato' , 'Potato' , 'Cabbage' , 'Onion' , 'Carrot' ]] const [ fruits , vegetables ] = fruitsAndVegetables console . log ( fruits , vegetables ] //['banana', 'orange', 'mango', 'lemon'] //['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot'] Skipping an Item during destructuring During destructuring if we are not interested in every item, we can omit a certain item by putting a comma at that index. Let's get only Finland, Iceland, and Denmark from the array. See the example below for more clarity: const countries = [ \"Finland\" , \"Sweden\" , \"Iceland\" , \"Norway\" , \"Denmark\" ]; const [ fin , , ice , , den ] = countries ; console . log ( fin , ice , den ); // Finland, Iceland, Denmark Getting the rest of the array using the spread operator We use three dots(...) to spread or get the rest of an array during destructuring const nums = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const [ num1 , num2 , num3 , ... rest ] = nums ; console . log ( num1 , num2 , num3 , rest ); //1, 2, 3, [4, 5, 6, 7, 8, 9, 10] const countries = [ \"Germany\" , \"France\" , \"Belgium\" , \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" , ]; let [ gem , fra , , ... nordicCountries ] = countries ; console . log ( gem , fra , nordicCountries ); // Germany, France, [\"Finland\", \"Sweden\", \"Norway\", \"Denmark\", \"Iceland\"] There many cases in which we use array destructuring, let's see the following example: Destructuring when we loop through arrays const countries = [ [ \"Finland\" , \"Helsinki\" ], [ \"Sweden\" , \"Stockholm\" ], [ \"Norway\" , \"Oslo\" ], ]; for ( const [ country , city ] of countries ) { console . log ( country , city ); } const fullStack = [ [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" ], [ \"Node\" , \"Express\" , \"MongoDB\" ], ]; for ( const [ first , second , third , fourth ] of fullStack ) { console . log ( first , second , third , fourt ); } What do you think about the code snippet below? If you have started React Hooks already it may remind you of the useState hook. const [ x , y ] = [ 2 , ( value ) => value ** 2 ]; What is the value of x? And what is the value of y(x)? I leave this for you to figure out. If you have used react hooks you are very familiar with this and as you may imagine it is destructuring. The initial value of count is 0 and the setCount is a method that changes the value of count. const [ count , setCount ] = useState ( 0 ); Now, you know how to destructure arrays. Let's move on to destructuring objects.","title":"1. Destructuring arrays"},{"location":"javascript_fundamentals/destructuring_and_spreading/#2-destructuring-objects","text":"An object literal is made of key and value pairs. A very simple example of an object: const rectangle = { width : 20 , height : 10 , }; We access the value of an object using the following methods: const rectangle = { width : 20 , height : 10 , }; let width = rectangle . width ; let height = recangle . height ; // or let width = rectangle [ width ]; let height = recangle [ height ]; But today, we will see how to access the value of an object using destructuring. When we destructure an object the name of the variable should be exactly the same as the key or property of the object. See the example below. const rectangle = { width : 20 , height : 10 , }; let { width , height } = rectangle ; console . log ( width , height , perimeter ); // 20, 10 What will be the value of we try to access a key which not in the object. const rectangle = { width : 20 , height : 10 , }; let { width , height , perimeter } = rectangleconsole . log ( width , height , perimeter ); // 20, 10, undefined The value of the perimeter in the above example is undefined. Default value during object destructuring Similar to the array, we can also use a default value in object destructuring. const rectangle = { width : 20 , height : 10 , }; let { width , height , perimeter = 200 } = rectangle ; console . log ( width , height , perimeter ); // 20, 10, undefined Renaming variable names const rectangle = { width : 20 , height : 10 , }; let { width : w , height : h } = rectangle ; Let's also destructure, nested objects. In the example below, we have nested objects and we can destructure it in two ways. We can just destructure step by step const props = { user : { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , }, post : { title : \"Destructuring and Spread\" , subtitle : \"ES6\" , year : 2020 , }, skills : [ \"JS\" , \"React\" , \"Redux\" , \"Node\" , \"Python\" ], }; const { user , post , skills } = props ; const { firstName , lastName , age } = user ; const { title , subtitle , year } = post ; const [ skillOne , skillTwo , skillThree , skillFour , skillFive ] = skills ; We can destructure it one step const props = { user : { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , }, post : { title : \"Destructuring and Spread\" , subtitle : \"ES6\" , year : 2020 , }, skills : [ \"JS\" , \"React\" , \"Redux\" , \"Node\" , \"Python\" ], }; const { user : { firstName , lastName , age }, post : { title , subtitle , year }, skills : [ skillOne , skillTwo , skillThree , skillFour , skillFive ], } = props ; Destructuring during loop through an array const languages = [ { lang : \"English\" , count : 91 }, { lang : \"French\" , count : 45 }, { lang : \"Arabic\" , count : 25 }, { lang : \"Spanish\" , count : 24 }, { lang : \"Russian\" , count : 9 }, { lang : \"Portuguese\" , count : 9 }, { lang : \"Dutch\" , count : 8 }, { lang : \"German\" , count : 7 }, { lang : \"Chinese\" , count : 5 }, { lang : \"Swahili\" , count : 4 }, { lang : \"Serbian\" , count : 4 }, ]; for ( const { lang , count } of languages ) { console . log ( `The ${ lang } is spoken in ${ count } countries.` ); } Destructuring function parameter const rectangle = { width : 20 , height : 10 }; const calcualteArea = ({ width , height }) => width * height ; const calculatePerimeter = ({ width , height } = 2 * ( width + height ));","title":"2. Destructuring objects"},{"location":"javascript_fundamentals/destructuring_and_spreading/#spread-or-rest-operator","text":"When we destructure an array we use the spread operator(...) to get the rest elements as array. In addition to that we use spread operator to spread arr elements to another array.","title":"Spread or Rest Operator"},{"location":"javascript_fundamentals/destructuring_and_spreading/#spread-operator-to-get-the-rest-of-array-elements","text":"const nums = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] let [ num1 , num2 , num3 , ... rest ] = nums \u200b console . log ( num1 , num2 , num3 ) console . log ( rest ) 1 2 3 [ 4 , 5 , 6 , 7 , 8 , 9 , 10 ] const countries = [ \"Germany\" , \"France\" , \"Belgium\" , \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" , ]; let [ gem , fra , , ... nordicCountries ] = countries ; console . log ( gem ); console . log ( fra ); console . log ( nordicCountries ); Germany France [ \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" ]","title":"Spread operator to get the rest of array elements"},{"location":"javascript_fundamentals/destructuring_and_spreading/#spread-operator-to-copy-array","text":"const evens = [ 0 , 2 , 4 , 6 , 8 , 10 ]; const evenNumbers = [... evens ]; const odds = [ 1 , 3 , 5 , 7 , 9 ]; const oddNumbers = [... odds ]; const wholeNumbers = [... evens , ... odds ]; console . log ( evenNumbers ); console . log ( oddNumbers ); console . log ( wholeNumbers ); [ 0 , 2 , 4 , 6 , 8 , 10 ] [ 1 , 3 , 5 , 7 , 9 ] [ 0 , 2 , 4 , 6 , 8 , 10 , 1 , 3 , 5 , 7 , 9 ] const frontEnd = [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" ]; const backEnd = [ \"Node\" , \"Express\" , \"MongoDB\" ]; const fullStack = [... frontEnd , ... backEnd ]; console . log ( fullStack ); [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Node\" , \"Express\" , \"MongoDB\" ]","title":"Spread operator to copy array"},{"location":"javascript_fundamentals/destructuring_and_spreading/#spread-operator-to-copy-object","text":"We can copy an object using a spread operator const user = { name : \"Asabeneh\" , title : \"Programmer\" , country : \"Finland\" , city : \"Helsinki\" , }; const copiedUser = { ... user }; console . log ( copiedUser ); { name: \"Asabeneh\" , title: \"Programmer\" , country: \"Finland\" , city: \"Helsinki\" } Modifying or changing the object while copying const user = { name : \"Asabeneh\" , title : \"Programmer\" , country : \"Finland\" , city : \"Helsinki\" , }; const copiedUser = { ... user , title : \"instructor\" }; console . log ( copiedUser ); { name: \"Asabeneh\" , title: \"instructor\" , country: \"Finland\" , city: \"Helsinki\" }","title":"Spread operator to copy object"},{"location":"javascript_fundamentals/destructuring_and_spreading/#spread-operator-with-arrow-function","text":"Whenever we like to write an arrow function which takes unlimited number of arguments we use a spread operator. If we use a spread operator as a parameter, the argument passed when we invoke a function will change to an array. const sumAllNums = (... args ) => { console . log ( args ); }; sumAllNums ( 1 , 2 , 3 , 4 , 5 ); [ 1 , 2 , 3 , 4 , 5 ] const sumAllNums = (... args ) => { let sum = 0 ; for ( const num of args ) { sum += num ; } return sum ; }; console . log ( sumAllNums ( 1 , 2 , 3 , 4 , 5 )); 15","title":"Spread operator with arrow function"},{"location":"javascript_fundamentals/document_object_model/","text":"Document Object Model (DOM) HTML document is structured as a JavaScript Object. Every HTML element has a different properties which can help us to manipulate it. It is possible to get, create, append or remove HTML elements using JavaScript. When it comes to React we do not directly manipulate the DOM instead React Virtual DOM will take care of update all necessary changes. So do not directly manipulate the DOM if you are using react. The only place we directly touch the DOM is here at the index.html. React is a single page application because all the components will be rendered on the index.html page and there will not be any other HTML in the entire React Application. You don't have to know DOM very well to use react but recommended to know. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < title > React App </ title > </ head > < body > <!-- <div class=\"root\"></div> --> < div id = \"root\" ></ div > < script > // const root = document.querySelector('.root') // const root = document.getElementById('root') const root = document . querySelector ( \"#root\" ); root . innerHTML = < h1 > Welcome to 30 Days Of React < /h1>; </ script > </ body > </ html >","title":"Document Object Model (DOM)"},{"location":"javascript_fundamentals/document_object_model/#document-object-model-dom","text":"HTML document is structured as a JavaScript Object. Every HTML element has a different properties which can help us to manipulate it. It is possible to get, create, append or remove HTML elements using JavaScript. When it comes to React we do not directly manipulate the DOM instead React Virtual DOM will take care of update all necessary changes. So do not directly manipulate the DOM if you are using react. The only place we directly touch the DOM is here at the index.html. React is a single page application because all the components will be rendered on the index.html page and there will not be any other HTML in the entire React Application. You don't have to know DOM very well to use react but recommended to know. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < title > React App </ title > </ head > < body > <!-- <div class=\"root\"></div> --> < div id = \"root\" ></ div > < script > // const root = document.querySelector('.root') // const root = document.getElementById('root') const root = document . querySelector ( \"#root\" ); root . innerHTML = < h1 > Welcome to 30 Days Of React < /h1>; </ script > </ body > </ html >","title":"Document Object Model (DOM)"},{"location":"javascript_fundamentals/error/","text":"Error handling, \"try...catch\" No matter how great we are at programming, sometimes our scripts have errors. They may occur because of our mistakes, an unexpected user input, an erroneous server response, and for a thousand other reasons. Usually, a script \"dies\" (immediately stops) in case of an error, printing it to console. But there's a syntax construct try...catch that allows us to \"catch\" errors so the script can, instead of dying, do something more reasonable. The \"try...catch\" syntax The try...catch construct has two main blocks: try , and then catch : try { // code... } catch ( err ) { // error handling } It works like this: First, the code in try {...} is executed. If there were no errors, then catch (err) is ignored: the execution reaches the end of try and goes on, skipping catch . If an error occurs, then the try execution is stopped, and control flows to the beginning of catch (err) . The err variable (we can use any name for it) will contain an error object with details about what happened. So, an error inside the try {...} block does not kill the script -- we have a chance to handle it in catch . Let's look at some examples. An errorless example: shows alert (1) and (2) : try { alert ( \"Start of try runs\" ); // *!*(1) <--*/!* // ...no errors here alert ( \"End of try runs\" ); // *!*(2) <--*/!* } catch ( err ) { alert ( \"Catch is ignored, because there are no errors\" ); // (3) } An example with an error: shows (1) and (3) : try { alert ( 'Start of try runs' ); // *!*(1) <--*/!* *!* lalala ; // error, variable is not defined! * /!* alert ( 'End of try (never reached)' ); // (2) } catch ( err ) { alert ( `Error has occurred!` ); // *!*(3) <--*/!* } ```warn header=\" try...catch only works for runtime errors\" For try...catch` to work, the code must be runnable. In other words, it should be valid JavaScript. It won't work if the code is syntactically wrong, for instance it has unmatched curly braces: try { {{{{{{{{{{{{ } catch ( err ) { alert ( \"The engine can't understand this code, it's invalid\" ); } The JavaScript engine first reads the code, and then runs it. The errors that occur on the reading phase are called \"parse-time\" errors and are unrecoverable (from inside that code). That's because the engine can't understand the code. So, try...catch can only handle errors that occur in valid code. Such errors are called \"runtime errors\" or, sometimes, \"exceptions\". Alert If an exception happens in \"scheduled\" code, like in setTimeout , then try...catch won't catch it: try { setTimeout ( function () { noSuchVariable ; // script will die here }, 1000 ); } catch ( err ) { alert ( \"won't work\" ); } That's because the function itself is executed later, when the engine has already left the try...catch construct. To catch an exception inside a scheduled function, try...catch must be inside that function: setTimeout ( function () { try { noSuchVariable ; // try...catch handles the error! } catch { alert ( \"error is caught here!\" ); } }, 1000 ); Error object When an error occurs, JavaScript generates an object containing the details about it. The object is then passed as an argument to catch : try { // ... } catch ( err ) { // <-- the \"error object\", could use another word instead of err // ... } For all built-in errors, the error object has two main properties: name : Error name. For instance, for an undefined variable that's \"ReferenceError\" . message : Textual message about error details. There are other non-standard properties available in most environments. One of most widely used and supported is: stack : Current call stack: a string with information about the sequence of nested calls that led to the error. Used for debugging purposes. For instance: try { *!* lalala ; // error, variable is not defined! * /!* } catch ( err ) { alert ( err . name ); // ReferenceError alert ( err . message ); // lalala is not defined alert ( err . stack ); // ReferenceError: lalala is not defined at (...call stack) // Can also show an error as a whole // The error is converted to string as \"name: message\" alert ( err ); // ReferenceError: lalala is not defined } Optional \"catch\" binding [recent browser=new] If we don't need error details, catch may omit it: try { // ... } catch { // <-- without (err) // ... } Using \"try...catch\" Let's explore a real-life use case of try...catch . As we already know, JavaScript supports the JSON.parse(str) method to read JSON-encoded values. Usually it's used to decode data received over the network, from the server or another source. We receive it and call JSON.parse like this: let json = '{\"name\":\"John\", \"age\": 30}' ; // data from the server *!* let user = JSON . parse ( json ); // convert the text representation to JS object * /!* // now user is an object with properties from the string alert ( user . name ); // John alert ( user . age ); // 30 You can find more detailed information about JSON in the chapter. If json is malformed, JSON.parse generates an error, so the script \"dies\". Should we be satisfied with that? Of course not! This way, if something's wrong with the data, the visitor will never know that (unless they open the developer console). And people really don't like when something \"just dies\" without any error message. Let's use try...catch to handle the error: let json = \"{ bad json }\" ; try { *!* let user = JSON . parse ( json ); // <-- when an error occurs... * /!* alert ( user . name ); // doesn't work } catch ( err ) { *!* // ...the execution jumps here alert ( \"Our apologies, the data has errors, we'll try to request it one more time.\" ); alert ( err . name ); alert ( err . message ); * /!* } Here we use the catch block only to show the message, but we can do much more: send a new network request, suggest an alternative to the visitor, send information about the error to a logging facility, ... . All much better than just dying. Throwing our own errors What if json is syntactically correct, but doesn't have a required name property? Like this: let json = '{ \"age\": 30 }' ; // incomplete data try { let user = JSON . parse ( json ); // <-- no errors *!* alert ( user . name ); // no name! * /!* } catch ( err ) { alert ( \"doesn't execute\" ); } Here JSON.parse runs normally, but the absence of name is actually an error for us. To unify error handling, we'll use the throw operator. \"Throw\" operator The throw operator generates an error. The syntax is: throw < error object > Technically, we can use anything as an error object. That may be even a primitive, like a number or a string, but it's better to use objects, preferably with name and message properties (to stay somewhat compatible with built-in errors). JavaScript has many built-in constructors for standard errors: Error , SyntaxError , ReferenceError , TypeError and others. We can use them to create error objects as well. Their syntax is: let error = new Error ( message ); // or let error = new SyntaxError ( message ); let error = new ReferenceError ( message ); // ... For built-in errors (not for any objects, just for errors), the name property is exactly the name of the constructor. And message is taken from the argument. For instance: let error = new Error ( \"Things happen o_O\" ); alert ( error . name ); // Error alert ( error . message ); // Things happen o_O Let's see what kind of error JSON.parse generates: try { JSON . parse ( \"{ bad json o_O }\" ); } catch ( err ) { *!* alert ( err . name ); // SyntaxError * /!* alert ( err . message ); // Unexpected token b in JSON at position 2 } As we can see, that's a SyntaxError . And in our case, the absence of name is an error, as users must have a name . So let's throw it: let json = '{ \"age\": 30 }' ; // incomplete data try { let user = JSON . parse ( json ); // <-- no errors if ( ! user . name ) { *!* throw new SyntaxError ( \"Incomplete data: no name\" ); // (*) * /!* } alert ( user . name ); } catch ( err ) { alert ( \"JSON Error: \" + err . message ); // JSON Error: Incomplete data: no name } In the line (*) , the throw operator generates a SyntaxError with the given message , the same way as JavaScript would generate it itself. The execution of try immediately stops and the control flow jumps into catch . Now catch became a single place for all error handling: both for JSON.parse and other cases. Rethrowing In the example above we use try...catch to handle incorrect data. But is it possible that another unexpected error occurs within the try {...} block? Like a programming error (variable is not defined) or something else, not just this \"incorrect data\" thing. For example: let json = '{ \"age\": 30 }' ; // incomplete data try { user = JSON . parse ( json ); // <-- forgot to put \"let\" before user // ... } catch ( err ) { alert ( \"JSON Error: \" + err ); // JSON Error: ReferenceError: user is not defined // (no JSON Error actually) } Of course, everything's possible! Programmers do make mistakes. Even in open-source utilities used by millions for decades -- suddenly a bug may be discovered that leads to terrible hacks. In our case, try...catch is placed to catch \"incorrect data\" errors. But by its nature, catch gets all errors from try . Here it gets an unexpected error, but still shows the same \"JSON Error\" message. That's wrong and also makes the code more difficult to debug. To avoid such problems, we can employ the \"rethrowing\" technique. The rule is simple: Catch should only process errors that it knows and \"rethrow\" all others. The \"rethrowing\" technique can be explained in more detail as: Catch gets all errors. In the catch (err) {...} block we analyze the error object err . If we don't know how to handle it, we do throw err . Usually, we can check the error type using the instanceof operator: try { user = { /*...*/ }; } catch ( err ) { *!* if ( err instanceof ReferenceError ) { * /!* alert ( 'ReferenceError' ); // \"ReferenceError\" for accessing an undefined variable } } We can also get the error class name from err.name property. All native errors have it. Another option is to read err.constructor.name . In the code below, we use rethrowing so that catch only handles SyntaxError : let json = '{ \"age\": 30 }' ; // incomplete data try { let user = JSON . parse ( json ); if ( ! user . name ) { throw new SyntaxError ( \"Incomplete data: no name\" ); } *!* blabla (); // unexpected error * /!* alert ( user . name ); } catch ( err ) { *!* if ( err instanceof SyntaxError ) { alert ( \"JSON Error: \" + err . message ); } else { throw err ; // rethrow (*) } * /!* } The error throwing on line (*) from inside catch block \"falls out\" of try...catch and can be either caught by an outer try...catch construct (if it exists), or it kills the script. So the catch block actually handles only errors that it knows how to deal with and \"skips\" all others. The example below demonstrates how such errors can be caught by one more level of try...catch : function readData () { let json = '{ \"age\": 30 }' ; try { // ... *!* blabla (); // error! * /!* } catch ( err ) { // ... if ( ! ( err instanceof SyntaxError )) { *!* throw err ; // rethrow (don't know how to deal with it) * /!* } } } try { readData (); } catch ( err ) { *!* alert ( \"External catch got: \" + err ); // caught it! * /!* } Here readData only knows how to handle SyntaxError , while the outer try...catch knows how to handle everything. try...catch...finally Wait, that's not all. The try...catch construct may have one more code clause: finally . If it exists, it runs in all cases: after try , if there were no errors, after catch , if there were errors. The extended syntax looks like this: *!* try * /!* { ... try to execute the code ... } *!* catch * /!* (err) { ... handle errors ... } *!* finally * /!* { ... execute always ... } Try running this code: try { alert ( \"try\" ); if ( confirm ( \"Make an error?\" )) BAD_CODE (); } catch ( err ) { alert ( \"catch\" ); } finally { alert ( \"finally\" ); } The code has two ways of execution: If you answer \"Yes\" to \"Make an error?\", then try -> catch -> finally . If you say \"No\", then try -> finally . The finally clause is often used when we start doing something and want to finalize it in any case of outcome. For instance, we want to measure the time that a Fibonacci numbers function fib(n) takes. Naturally, we can start measuring before it runs and finish afterwards. But what if there's an error during the function call? In particular, the implementation of fib(n) in the code below returns an error for negative or non-integer numbers. The finally clause is a great place to finish the measurements no matter what. Here finally guarantees that the time will be measured correctly in both situations -- in case of a successful execution of fib and in case of an error in it: let num = + prompt ( \"Enter a positive integer number?\" , 35 ) let diff , result ; function fib ( n ) { if ( n < 0 || Math . trunc ( n ) != n ) { throw new Error ( \"Must not be negative, and also an integer.\" ); } return n <= 1 ? n : fib ( n - 1 ) + fib ( n - 2 ); } let start = Date . now (); try { result = fib ( num ); } catch ( err ) { result = 0 ; *!* } finally { diff = Date . now () - start ; } * /!* alert ( result || \"error occurred\" ); alert ( `execution took ${ diff } ms` ); You can check by running the code with entering 35 into prompt -- it executes normally, finally after try . And then enter -1 -- there will be an immediate error, and the execution will take 0ms . Both measurements are done correctly. In other words, the function may finish with return or throw , that doesn't matter. The finally clause executes in both cases. Variables are local inside try...catch...finally Please note that result and diff variables in the code above are declared before try...catch . Otherwise, if we declared let in try block, it would only be visible inside of it. finally and return The finally clause works for any exit from try...catch . That includes an explicit return . In the example below, there's a return in try . In this case, finally is executed just before the control returns to the outer code. function func () { try { *!* return 1 ; * /!* } catch ( err ) { /* ... */ } finally { *!* alert ( 'finally' ); * /!* } } alert ( func () ); // first works alert from finally, and then this one try...finally The try...finally construct, without catch clause, is also useful. We apply it when we don't want to handle errors here (let them fall through), but want to be sure that processes that we started are finalized. function func () { // start doing something that needs completion (like measurements) try { // ... } finally { // complete that thing even if all dies } } In the code above, an error inside try always falls out, because there's no catch . But finally works before the execution flow leaves the function. Global catch Environment-specific The information from this section is not a part of the core JavaScript. Let's imagine we've got a fatal error outside of try...catch , and the script died. Like a programming error or some other terrible thing. Is there a way to react on such occurrences? We may want to log the error, show something to the user (normally they don't see error messages), etc. There is none in the specification, but environments usually provide it, because it's really useful. For instance, Node.js has process.on(\"uncaughtException\") for that. And in the browser we can assign a function to the special window.onerror property, that will run in case of an uncaught error. The syntax: window . onerror = function ( message , url , line , col , error ) { // ... }; message : Error message. url : URL of the script where error happened. line , col : Line and column numbers where error happened. error : Error object. For instance: < script > *!* window . onerror = function ( message , url , line , col , error ) { alert ( ` ${ message } \\n At ${ line } : ${ col } of ${ url } ` ); }; * /!* function readData () { badFunc (); // Whoops, something went wrong! } readData (); </ script > The role of the global handler window.onerror is usually not to recover the script execution -- that's probably impossible in case of programming errors, but to send the error message to developers. There are also web-services that provide error-logging for such cases, like https://errorception.com or http://www.muscula.com . They work like this: We register at the service and get a piece of JS (or a script URL) from them to insert on pages. That JS script sets a custom window.onerror function. When an error occurs, it sends a network request about it to the service. We can log in to the service web interface and see errors. Summary The try...catch construct allows to handle runtime errors. It literally allows to \"try\" running the code and \"catch\" errors that may occur in it. The syntax is: try { // run this code } catch ( err ) { // if an error happened, then jump here // err is the error object } finally { // do in any case after try/catch } There may be no catch section or no finally , so shorter constructs try...catch and try...finally are also valid. Error objects have following properties: message -- the human-readable error message. name -- the string with error name (error constructor name). stack (non-standard, but well-supported) -- the stack at the moment of error creation. If an error object is not needed, we can omit it by using catch { instead of catch (err) { . We can also generate our own errors using the throw operator. Technically, the argument of throw can be anything, but usually it's an error object inheriting from the built-in Error class. More on extending errors in the next chapter. Rethrowing is a very important pattern of error handling: a catch block usually expects and knows how to handle the particular error type, so it should rethrow errors it doesn't know. Even if we don't have try...catch , most environments allow us to setup a \"global\" error handler to catch errors that \"fall out\". In-browser, that's window.onerror .","title":"Error handling, \"try...catch\""},{"location":"javascript_fundamentals/error/#error-handling-trycatch","text":"No matter how great we are at programming, sometimes our scripts have errors. They may occur because of our mistakes, an unexpected user input, an erroneous server response, and for a thousand other reasons. Usually, a script \"dies\" (immediately stops) in case of an error, printing it to console. But there's a syntax construct try...catch that allows us to \"catch\" errors so the script can, instead of dying, do something more reasonable.","title":"Error handling, \"try...catch\""},{"location":"javascript_fundamentals/error/#the-trycatch-syntax","text":"The try...catch construct has two main blocks: try , and then catch : try { // code... } catch ( err ) { // error handling } It works like this: First, the code in try {...} is executed. If there were no errors, then catch (err) is ignored: the execution reaches the end of try and goes on, skipping catch . If an error occurs, then the try execution is stopped, and control flows to the beginning of catch (err) . The err variable (we can use any name for it) will contain an error object with details about what happened. So, an error inside the try {...} block does not kill the script -- we have a chance to handle it in catch . Let's look at some examples. An errorless example: shows alert (1) and (2) : try { alert ( \"Start of try runs\" ); // *!*(1) <--*/!* // ...no errors here alert ( \"End of try runs\" ); // *!*(2) <--*/!* } catch ( err ) { alert ( \"Catch is ignored, because there are no errors\" ); // (3) } An example with an error: shows (1) and (3) : try { alert ( 'Start of try runs' ); // *!*(1) <--*/!* *!* lalala ; // error, variable is not defined! * /!* alert ( 'End of try (never reached)' ); // (2) } catch ( err ) { alert ( `Error has occurred!` ); // *!*(3) <--*/!* } ```warn header=\" try...catch only works for runtime errors\" For try...catch` to work, the code must be runnable. In other words, it should be valid JavaScript. It won't work if the code is syntactically wrong, for instance it has unmatched curly braces: try { {{{{{{{{{{{{ } catch ( err ) { alert ( \"The engine can't understand this code, it's invalid\" ); } The JavaScript engine first reads the code, and then runs it. The errors that occur on the reading phase are called \"parse-time\" errors and are unrecoverable (from inside that code). That's because the engine can't understand the code. So, try...catch can only handle errors that occur in valid code. Such errors are called \"runtime errors\" or, sometimes, \"exceptions\". Alert If an exception happens in \"scheduled\" code, like in setTimeout , then try...catch won't catch it: try { setTimeout ( function () { noSuchVariable ; // script will die here }, 1000 ); } catch ( err ) { alert ( \"won't work\" ); } That's because the function itself is executed later, when the engine has already left the try...catch construct. To catch an exception inside a scheduled function, try...catch must be inside that function: setTimeout ( function () { try { noSuchVariable ; // try...catch handles the error! } catch { alert ( \"error is caught here!\" ); } }, 1000 );","title":"The \"try...catch\" syntax"},{"location":"javascript_fundamentals/error/#error-object","text":"When an error occurs, JavaScript generates an object containing the details about it. The object is then passed as an argument to catch : try { // ... } catch ( err ) { // <-- the \"error object\", could use another word instead of err // ... } For all built-in errors, the error object has two main properties: name : Error name. For instance, for an undefined variable that's \"ReferenceError\" . message : Textual message about error details. There are other non-standard properties available in most environments. One of most widely used and supported is: stack : Current call stack: a string with information about the sequence of nested calls that led to the error. Used for debugging purposes. For instance: try { *!* lalala ; // error, variable is not defined! * /!* } catch ( err ) { alert ( err . name ); // ReferenceError alert ( err . message ); // lalala is not defined alert ( err . stack ); // ReferenceError: lalala is not defined at (...call stack) // Can also show an error as a whole // The error is converted to string as \"name: message\" alert ( err ); // ReferenceError: lalala is not defined }","title":"Error object"},{"location":"javascript_fundamentals/error/#optional-catch-binding","text":"[recent browser=new] If we don't need error details, catch may omit it: try { // ... } catch { // <-- without (err) // ... }","title":"Optional \"catch\" binding"},{"location":"javascript_fundamentals/error/#using-trycatch","text":"Let's explore a real-life use case of try...catch . As we already know, JavaScript supports the JSON.parse(str) method to read JSON-encoded values. Usually it's used to decode data received over the network, from the server or another source. We receive it and call JSON.parse like this: let json = '{\"name\":\"John\", \"age\": 30}' ; // data from the server *!* let user = JSON . parse ( json ); // convert the text representation to JS object * /!* // now user is an object with properties from the string alert ( user . name ); // John alert ( user . age ); // 30 You can find more detailed information about JSON in the chapter. If json is malformed, JSON.parse generates an error, so the script \"dies\". Should we be satisfied with that? Of course not! This way, if something's wrong with the data, the visitor will never know that (unless they open the developer console). And people really don't like when something \"just dies\" without any error message. Let's use try...catch to handle the error: let json = \"{ bad json }\" ; try { *!* let user = JSON . parse ( json ); // <-- when an error occurs... * /!* alert ( user . name ); // doesn't work } catch ( err ) { *!* // ...the execution jumps here alert ( \"Our apologies, the data has errors, we'll try to request it one more time.\" ); alert ( err . name ); alert ( err . message ); * /!* } Here we use the catch block only to show the message, but we can do much more: send a new network request, suggest an alternative to the visitor, send information about the error to a logging facility, ... . All much better than just dying.","title":"Using \"try...catch\""},{"location":"javascript_fundamentals/error/#throwing-our-own-errors","text":"What if json is syntactically correct, but doesn't have a required name property? Like this: let json = '{ \"age\": 30 }' ; // incomplete data try { let user = JSON . parse ( json ); // <-- no errors *!* alert ( user . name ); // no name! * /!* } catch ( err ) { alert ( \"doesn't execute\" ); } Here JSON.parse runs normally, but the absence of name is actually an error for us. To unify error handling, we'll use the throw operator.","title":"Throwing our own errors"},{"location":"javascript_fundamentals/error/#throw-operator","text":"The throw operator generates an error. The syntax is: throw < error object > Technically, we can use anything as an error object. That may be even a primitive, like a number or a string, but it's better to use objects, preferably with name and message properties (to stay somewhat compatible with built-in errors). JavaScript has many built-in constructors for standard errors: Error , SyntaxError , ReferenceError , TypeError and others. We can use them to create error objects as well. Their syntax is: let error = new Error ( message ); // or let error = new SyntaxError ( message ); let error = new ReferenceError ( message ); // ... For built-in errors (not for any objects, just for errors), the name property is exactly the name of the constructor. And message is taken from the argument. For instance: let error = new Error ( \"Things happen o_O\" ); alert ( error . name ); // Error alert ( error . message ); // Things happen o_O Let's see what kind of error JSON.parse generates: try { JSON . parse ( \"{ bad json o_O }\" ); } catch ( err ) { *!* alert ( err . name ); // SyntaxError * /!* alert ( err . message ); // Unexpected token b in JSON at position 2 } As we can see, that's a SyntaxError . And in our case, the absence of name is an error, as users must have a name . So let's throw it: let json = '{ \"age\": 30 }' ; // incomplete data try { let user = JSON . parse ( json ); // <-- no errors if ( ! user . name ) { *!* throw new SyntaxError ( \"Incomplete data: no name\" ); // (*) * /!* } alert ( user . name ); } catch ( err ) { alert ( \"JSON Error: \" + err . message ); // JSON Error: Incomplete data: no name } In the line (*) , the throw operator generates a SyntaxError with the given message , the same way as JavaScript would generate it itself. The execution of try immediately stops and the control flow jumps into catch . Now catch became a single place for all error handling: both for JSON.parse and other cases.","title":"\"Throw\" operator"},{"location":"javascript_fundamentals/error/#rethrowing","text":"In the example above we use try...catch to handle incorrect data. But is it possible that another unexpected error occurs within the try {...} block? Like a programming error (variable is not defined) or something else, not just this \"incorrect data\" thing. For example: let json = '{ \"age\": 30 }' ; // incomplete data try { user = JSON . parse ( json ); // <-- forgot to put \"let\" before user // ... } catch ( err ) { alert ( \"JSON Error: \" + err ); // JSON Error: ReferenceError: user is not defined // (no JSON Error actually) } Of course, everything's possible! Programmers do make mistakes. Even in open-source utilities used by millions for decades -- suddenly a bug may be discovered that leads to terrible hacks. In our case, try...catch is placed to catch \"incorrect data\" errors. But by its nature, catch gets all errors from try . Here it gets an unexpected error, but still shows the same \"JSON Error\" message. That's wrong and also makes the code more difficult to debug. To avoid such problems, we can employ the \"rethrowing\" technique. The rule is simple: Catch should only process errors that it knows and \"rethrow\" all others. The \"rethrowing\" technique can be explained in more detail as: Catch gets all errors. In the catch (err) {...} block we analyze the error object err . If we don't know how to handle it, we do throw err . Usually, we can check the error type using the instanceof operator: try { user = { /*...*/ }; } catch ( err ) { *!* if ( err instanceof ReferenceError ) { * /!* alert ( 'ReferenceError' ); // \"ReferenceError\" for accessing an undefined variable } } We can also get the error class name from err.name property. All native errors have it. Another option is to read err.constructor.name . In the code below, we use rethrowing so that catch only handles SyntaxError : let json = '{ \"age\": 30 }' ; // incomplete data try { let user = JSON . parse ( json ); if ( ! user . name ) { throw new SyntaxError ( \"Incomplete data: no name\" ); } *!* blabla (); // unexpected error * /!* alert ( user . name ); } catch ( err ) { *!* if ( err instanceof SyntaxError ) { alert ( \"JSON Error: \" + err . message ); } else { throw err ; // rethrow (*) } * /!* } The error throwing on line (*) from inside catch block \"falls out\" of try...catch and can be either caught by an outer try...catch construct (if it exists), or it kills the script. So the catch block actually handles only errors that it knows how to deal with and \"skips\" all others. The example below demonstrates how such errors can be caught by one more level of try...catch : function readData () { let json = '{ \"age\": 30 }' ; try { // ... *!* blabla (); // error! * /!* } catch ( err ) { // ... if ( ! ( err instanceof SyntaxError )) { *!* throw err ; // rethrow (don't know how to deal with it) * /!* } } } try { readData (); } catch ( err ) { *!* alert ( \"External catch got: \" + err ); // caught it! * /!* } Here readData only knows how to handle SyntaxError , while the outer try...catch knows how to handle everything.","title":"Rethrowing"},{"location":"javascript_fundamentals/error/#trycatchfinally","text":"Wait, that's not all. The try...catch construct may have one more code clause: finally . If it exists, it runs in all cases: after try , if there were no errors, after catch , if there were errors. The extended syntax looks like this: *!* try * /!* { ... try to execute the code ... } *!* catch * /!* (err) { ... handle errors ... } *!* finally * /!* { ... execute always ... } Try running this code: try { alert ( \"try\" ); if ( confirm ( \"Make an error?\" )) BAD_CODE (); } catch ( err ) { alert ( \"catch\" ); } finally { alert ( \"finally\" ); } The code has two ways of execution: If you answer \"Yes\" to \"Make an error?\", then try -> catch -> finally . If you say \"No\", then try -> finally . The finally clause is often used when we start doing something and want to finalize it in any case of outcome. For instance, we want to measure the time that a Fibonacci numbers function fib(n) takes. Naturally, we can start measuring before it runs and finish afterwards. But what if there's an error during the function call? In particular, the implementation of fib(n) in the code below returns an error for negative or non-integer numbers. The finally clause is a great place to finish the measurements no matter what. Here finally guarantees that the time will be measured correctly in both situations -- in case of a successful execution of fib and in case of an error in it: let num = + prompt ( \"Enter a positive integer number?\" , 35 ) let diff , result ; function fib ( n ) { if ( n < 0 || Math . trunc ( n ) != n ) { throw new Error ( \"Must not be negative, and also an integer.\" ); } return n <= 1 ? n : fib ( n - 1 ) + fib ( n - 2 ); } let start = Date . now (); try { result = fib ( num ); } catch ( err ) { result = 0 ; *!* } finally { diff = Date . now () - start ; } * /!* alert ( result || \"error occurred\" ); alert ( `execution took ${ diff } ms` ); You can check by running the code with entering 35 into prompt -- it executes normally, finally after try . And then enter -1 -- there will be an immediate error, and the execution will take 0ms . Both measurements are done correctly. In other words, the function may finish with return or throw , that doesn't matter. The finally clause executes in both cases. Variables are local inside try...catch...finally Please note that result and diff variables in the code above are declared before try...catch . Otherwise, if we declared let in try block, it would only be visible inside of it. finally and return The finally clause works for any exit from try...catch . That includes an explicit return . In the example below, there's a return in try . In this case, finally is executed just before the control returns to the outer code. function func () { try { *!* return 1 ; * /!* } catch ( err ) { /* ... */ } finally { *!* alert ( 'finally' ); * /!* } } alert ( func () ); // first works alert from finally, and then this one try...finally The try...finally construct, without catch clause, is also useful. We apply it when we don't want to handle errors here (let them fall through), but want to be sure that processes that we started are finalized. function func () { // start doing something that needs completion (like measurements) try { // ... } finally { // complete that thing even if all dies } } In the code above, an error inside try always falls out, because there's no catch . But finally works before the execution flow leaves the function.","title":"try...catch...finally"},{"location":"javascript_fundamentals/error/#global-catch","text":"Environment-specific The information from this section is not a part of the core JavaScript. Let's imagine we've got a fatal error outside of try...catch , and the script died. Like a programming error or some other terrible thing. Is there a way to react on such occurrences? We may want to log the error, show something to the user (normally they don't see error messages), etc. There is none in the specification, but environments usually provide it, because it's really useful. For instance, Node.js has process.on(\"uncaughtException\") for that. And in the browser we can assign a function to the special window.onerror property, that will run in case of an uncaught error. The syntax: window . onerror = function ( message , url , line , col , error ) { // ... }; message : Error message. url : URL of the script where error happened. line , col : Line and column numbers where error happened. error : Error object. For instance: < script > *!* window . onerror = function ( message , url , line , col , error ) { alert ( ` ${ message } \\n At ${ line } : ${ col } of ${ url } ` ); }; * /!* function readData () { badFunc (); // Whoops, something went wrong! } readData (); </ script > The role of the global handler window.onerror is usually not to recover the script execution -- that's probably impossible in case of programming errors, but to send the error message to developers. There are also web-services that provide error-logging for such cases, like https://errorception.com or http://www.muscula.com . They work like this: We register at the service and get a piece of JS (or a script URL) from them to insert on pages. That JS script sets a custom window.onerror function. When an error occurs, it sends a network request about it to the service. We can log in to the service web interface and see errors.","title":"Global catch"},{"location":"javascript_fundamentals/error/#summary","text":"The try...catch construct allows to handle runtime errors. It literally allows to \"try\" running the code and \"catch\" errors that may occur in it. The syntax is: try { // run this code } catch ( err ) { // if an error happened, then jump here // err is the error object } finally { // do in any case after try/catch } There may be no catch section or no finally , so shorter constructs try...catch and try...finally are also valid. Error objects have following properties: message -- the human-readable error message. name -- the string with error name (error constructor name). stack (non-standard, but well-supported) -- the stack at the moment of error creation. If an error object is not needed, we can omit it by using catch { instead of catch (err) { . We can also generate our own errors using the throw operator. Technically, the argument of throw can be anything, but usually it's an error object inheriting from the built-in Error class. More on extending errors in the next chapter. Rethrowing is a very important pattern of error handling: a catch block usually expects and knows how to handle the particular error type, so it should rethrow errors it doesn't know. Even if we don't have try...catch , most environments allow us to setup a \"global\" error handler to catch errors that \"fall out\". In-browser, that's window.onerror .","title":"Summary"},{"location":"javascript_fundamentals/functional_programming/","text":"Functional Programming In this article, I will try to help you to have a very good understanding of the most common feature of JavaScript, functional programming . Functional programming allows you to write shorter code, clean code, and also to solve complicated problems which might be difficult to solve in a traditional way. In this article we will cover all JS functional programming methods: forEach map filter reduce find findIndex some every 1. forEach We use forEach when we like to iterate through an array of items. The forEach is a higher-order function and it takes call-back as a parameter. The forEach method is used only with array and we use forEach if you are interested in each item or index or both. // syntax in a normal or a function declaration function callback ( item , index , arr ) {} array . forEach ( callback ); // or syntax in an arrow function const callback = ( item , i , arr ) => {}; array . forEach ( callback ); The call back function could be a function declaration or an arrow function. Let see different examples const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; countries . forEach ( function ( country , index , arr ) { console . log ( i , country . toUpperCase ()); }); If there is no much code inside the code block we can use an arrow function and we can write it without a curly bracket. The index and the array parameters are optional, we can omit them. const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; countries . forEach (( country , i ) => console . log ( i , country . toUpperCase ())); 0 \"FINLAND\" 1 \"ESTONIA\" 2 \"SWEDEN\" 3 \"NORWAY\" For example if we like to change each country to uppercase and store it back to an array we write it as follows. const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; const newCountries = []; countries . forEach (( country ) => newCountries . push ( country )); console . log ( newCountries ); // [\"Finland\", \"Estonia\", \"Sweden\", \"Norway\"] Let us see more examples. For instance if we want to sum an array of numbers we can use forEach or reduce. Let us see how we use forEach to sum all numbers in an array. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; let sum = 0 ; numbers . forEach (( n ) => ( sum += n )); console . log ( sum ); // 15 Let us move to the next functional programming method which is going to be a map. 2. map We use the map method whenever we like to modify an array. We use the map method only with arrays and it always returns an array. // syntax in a normal or a function declaration function callback ( item , i ) { return ; // code goes here } const modifiedArray = array . map ( callback ); // or syntax in an arrow function const callback = ( item , i ) => { return ; // code goes here }; const modifiedArray = array . map ( callback ); Now, let us modify the countries array using the map method. The index is an optional parameter // Using function declaration const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; const newCountries = countries . map ( function ( country ) { return country . toUpperCase (); }); console . log ( newCountries ); // map using an arrow function call back const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; const newCountries = countries . map (( country ) => country . toUpperCase ()); console . log ( newCountries ); // [\"FINLAND\", \"ESTONIA\", \"SWEDEN\", \"NORWAY\"] As you can see that map is very handy to modify an array and to get an array back. Now, let us create an array of the length of the countries from the countries array. const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; const countriesLength = countries . map (( country ) => country . length ); console . log ( countriesLength ); // [7, 7, 6, 6] Let us see another more example const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const squares = numbers . map (( n ) => n ** 2 ); console . log ( squares ); // [1, 4, 9, 16, 25] 3. filter As you may understand from the literal meaning of filter, it filters out items based on some criteria. The filter method like forEach and map is used with an array and it returns an array of the filtered items. For instance if we want to filter out countries containing a substring land from an array of countries. See the example below: // syntax in a normal or a function declaration function callback ( item ) { return ; // boolean } const filteredArray = array . filter ( callback ); // or syntax in an arrow function const callback = ( item ) => { return ; // boolean }; const filteredArray = array . filter ( callback ); const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; const countriesWithLand = countries . filter (( country ) => country . includes ( \"land\" ) ); console . log ( countriesWithLand ); // [\"Finland\", \"Iceland\"] How about if we want to filter out countries not containing the substring land. We use negation to achieve that. const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; const countriesWithLand = countries . filter ( ( country ) => ! country . includes ( \"land\" ) ); console . log ( countriesWithLand ); // [\"Estonia\", \"Sweden\", \"Norway\"] Let's see an additional example about the filter, let us filter even or odd numbers from an array of numbers const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const evens = numbers . filter (( n ) => n % 2 === 0 ); const odds = numbers . filter (( n ) => n % 2 !== 0 ); console . log ( evens ); // [0, 2, 4, 6, 8, 10] console . log ( odds ); // [1, 3, 5, 7, 9] Now, you know how to filter let us move on to the next functional programming, reduce. 4. reduce Like forEach, map, and filter, reduce is also used with an array and it returns a single value. You can associate reduce with a blender. You put different fruits to a blend and you get a mix of fruit juice. The juice is the output from the reduction process. We use the reduce method to sum all numbers in an array together, or to multiply items in an array or to concatenate items in an array. Let us see the following different example to make this explanation more clear. // syntax in a normal or a function declaration function callback ( acc , cur ) { return // code goes here } const reduced = array . reduce ( callback , optionalInitialValue ) // or syntax in an arrow function const reduced = callback ( acc , cur ) => { return // code goes here } const reduced = array . reduce ( callback ) The default initial value is 0. We can change the initial value if we want to change it. For instance if we want to add all items in an array and if all the items are numbers we can use reduce. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const sum = numbers . reduce (( acc , cur ) => acc + cur ); console . log ( sum ); // 55 Reduce has a default initial value which is zero. Now, let us use a different initial value which is 5 in this case. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const sum = numbers . reduce (( acc , cur ) => acc + cur , 5 ); console . log ( sum ); // 60 Let us concatenate strings using reduce const strs = [ \"Hello\" , \"world\" , \"!\" ]; const helloWorld = strs . reduce (( acc , cur ) => acc + \" \" + cur ); console . log ( helloWorld ); // \"Hello world !\" We can multiply items of an array using reduce and we will return the value. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const value = numbers . reduce (( acc , cur ) => acc * cur ); console . log ( value ); // 120 Let us try it with an initial value const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const value = numbers . reduce (( acc , cur ) => acc * cur , 10 ); console . log ( value ); // 1200 5. find If we are interested in the first occurrence of a certain item or element in an array we can use find method. Unlike map and filter, find just return the first occurrence of an item instead of an array. // syntax in a normal or a function declaration function callback ( item ) { return // code goes here } const item = array . find ( callback ) // or syntax in an arrow function const reduced = callback ( item ) => { return // code goes here } const item = array . find ( callback ) Let find the first even number and the first odd number in the numbers array. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const firstEvenNum = numbers . find (( n ) => n % 2 === 0 ); const firstOddNum = numbers . find (( n ) => n % 2 !== 0 ); console . log ( firstEvenNum ); // 0 console . log ( firstOddNum ); // 1 Let us find the first country which contains a substring way const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; const countryWithWay = countries . find (( country ) => country . includes ( \"way\" )); console . log ( countriesWithWay ); // Norway Let us find the first country which has only six characters const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; const sixCharsCountry = countries . find (( country ) => country . length === 6 ); console . log ( sixCharsCountry ); // Sweden Let us find the first country in the array which has the letter 'o' const countries = [ 'Finland' , 'Estonia' , 'Sweden' , 'Norway' , 'Iceland' ] const index = countries . find (( country ) => country . includes ( 'o' )) console . log ( index // Estonia 6. findIndex The findIndex method works like find but findIndex returns the index of the item. If we are interested in the index of a certain item or element in an array we can use findIndex. The findIndex return the index of the first occurrence of an item. // syntax in a normal or a function declaration function callback ( item ) { return // code goes here } const index = array . findIndex ( callback ) // or syntax in an arrow function const reduced = callback ( item ) => { return // code goes here } const index = array . findIndex ( callback ) Let us find the index of the first even number and the index of the first odd number in the numbers array. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const firstEvenIndex = numbers . findIndex (( n ) => n % 2 === 0 ); const firstOddIndex = numbers . findIndex (( n ) => n % 2 !== 0 ); console . log ( firstEvenIndex ); // 0 console . log ( firstOddIndex ); // 1 Let us find the index of the first country in the array which has exactly six characters const countries = [ 'Finland' , 'Estonia' , 'Sweden' , 'Norway' , 'Iceland' ] const index = countries . findIndex (( country ) => country . length === 6 ) console . log ( index //2 Let us find the index of the first country in the array which has the letter 'o'. const countries = [ 'Finland' , 'Estonia' , 'Sweden' , 'Norway' , 'Iceland' ] const index = countries . findIndex (( country ) => country . includes ( 'o' )) console . log ( index // 1 Let us move on to the next functional programming, some. 7. some The some method is used with array and return a boolean. If one or some of the items satisfy the criteria the result will be true else it will be false. Let us see it with an example. In the following array some numbers are even and some are odd, so if I ask you a question, are there even numbers in the array then your answer will be yes. If I ask you also another question, are there odd numbers in the array then your answer will be yes. On the contrary, if I ask you, are all the numbers even or odd then your answer will be no because all the numbers are not even or odd. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const someAreEvens = numbers . some (( n ) => n % 2 === 0 ); const someAreOdds = numbers . some (( n ) => n % 2 !== 0 ); console . log ( someAreEvens ); // true console . log ( someAreOdds ); // true Let us another example const evens = [ 0 , 2 , 4 , 6 , 8 , 10 ]; const someAreEvens = evens . some (( n ) => n % 2 === 0 ); const someAreOdds = evens . some (( n ) => n % 2 !== 0 ); console . log ( someAreEvens ); // true console . log ( someAreOdds ); // false Now, let us see one more functional programming, every. 8. every The method every is somehow similar to some but every item must satisfy the criteria. The method every like some returns a boolean. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] const allAreEvens = numbers . every (( n ) => n % 2 === 0 ) const allAreOdd s = numbers . every (( n ) => n % 2 !== 0 ) console . log ( allAreEven ) // false console . log ( allAreOdd ) // false const evens = [ 0 , 2 , 4 , 6 , 8 , 10 ] const someAreEvens = evens . some (( n ) => n % 2 === 0 ) const someAreOdds = evens . some (( n ) => n % 2 !== 0 ) console . log ( someAreEvens ) // true console . log ( someAreOdds ) // false Exercises const products = [ { product : \"banana\" , price : 3 }, { product : \"mango\" , price : 6 }, { product : \"potato\" , price : \" \" }, { product : \"avocado\" , price : 8 }, { product : \"coffee\" , price : 10 }, { product : \"tea\" , price : \"\" }, ]; Print the price of each product using forEach Print the product items as follows using forEach The price of banana is 3 euros. The price of mango is 6 euros. The price of potato is unknown. The price of avocado is 8 euros. The price of coffee is 10 euros. The price of tea is unknown. Calculate the sum of all the prices using forEach Create an array of prices using map and store it in a variable prices Filter products with prices Use method chaining to get the sum of the prices(map, filter, reduce) Calculate the sum of all the prices using reduce only Find the first product which doesn't have a price value Find the index of the first product which does not have price value Check if some products do not have a price value Check if all the products have price value Explain the difference between forEach, map, filter and reduce Explain the difference between filter, find and findIndex Explain the difference between some and every","title":"Functional Programming"},{"location":"javascript_fundamentals/functional_programming/#functional-programming","text":"In this article, I will try to help you to have a very good understanding of the most common feature of JavaScript, functional programming . Functional programming allows you to write shorter code, clean code, and also to solve complicated problems which might be difficult to solve in a traditional way. In this article we will cover all JS functional programming methods: forEach map filter reduce find findIndex some every","title":"Functional Programming"},{"location":"javascript_fundamentals/functional_programming/#1-foreach","text":"We use forEach when we like to iterate through an array of items. The forEach is a higher-order function and it takes call-back as a parameter. The forEach method is used only with array and we use forEach if you are interested in each item or index or both. // syntax in a normal or a function declaration function callback ( item , index , arr ) {} array . forEach ( callback ); // or syntax in an arrow function const callback = ( item , i , arr ) => {}; array . forEach ( callback ); The call back function could be a function declaration or an arrow function. Let see different examples const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; countries . forEach ( function ( country , index , arr ) { console . log ( i , country . toUpperCase ()); }); If there is no much code inside the code block we can use an arrow function and we can write it without a curly bracket. The index and the array parameters are optional, we can omit them. const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; countries . forEach (( country , i ) => console . log ( i , country . toUpperCase ())); 0 \"FINLAND\" 1 \"ESTONIA\" 2 \"SWEDEN\" 3 \"NORWAY\" For example if we like to change each country to uppercase and store it back to an array we write it as follows. const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; const newCountries = []; countries . forEach (( country ) => newCountries . push ( country )); console . log ( newCountries ); // [\"Finland\", \"Estonia\", \"Sweden\", \"Norway\"] Let us see more examples. For instance if we want to sum an array of numbers we can use forEach or reduce. Let us see how we use forEach to sum all numbers in an array. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; let sum = 0 ; numbers . forEach (( n ) => ( sum += n )); console . log ( sum ); // 15 Let us move to the next functional programming method which is going to be a map.","title":"1. forEach"},{"location":"javascript_fundamentals/functional_programming/#2-map","text":"We use the map method whenever we like to modify an array. We use the map method only with arrays and it always returns an array. // syntax in a normal or a function declaration function callback ( item , i ) { return ; // code goes here } const modifiedArray = array . map ( callback ); // or syntax in an arrow function const callback = ( item , i ) => { return ; // code goes here }; const modifiedArray = array . map ( callback ); Now, let us modify the countries array using the map method. The index is an optional parameter // Using function declaration const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; const newCountries = countries . map ( function ( country ) { return country . toUpperCase (); }); console . log ( newCountries ); // map using an arrow function call back const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; const newCountries = countries . map (( country ) => country . toUpperCase ()); console . log ( newCountries ); // [\"FINLAND\", \"ESTONIA\", \"SWEDEN\", \"NORWAY\"] As you can see that map is very handy to modify an array and to get an array back. Now, let us create an array of the length of the countries from the countries array. const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" ]; const countriesLength = countries . map (( country ) => country . length ); console . log ( countriesLength ); // [7, 7, 6, 6] Let us see another more example const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const squares = numbers . map (( n ) => n ** 2 ); console . log ( squares ); // [1, 4, 9, 16, 25]","title":"2. map"},{"location":"javascript_fundamentals/functional_programming/#3-filter","text":"As you may understand from the literal meaning of filter, it filters out items based on some criteria. The filter method like forEach and map is used with an array and it returns an array of the filtered items. For instance if we want to filter out countries containing a substring land from an array of countries. See the example below: // syntax in a normal or a function declaration function callback ( item ) { return ; // boolean } const filteredArray = array . filter ( callback ); // or syntax in an arrow function const callback = ( item ) => { return ; // boolean }; const filteredArray = array . filter ( callback ); const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; const countriesWithLand = countries . filter (( country ) => country . includes ( \"land\" ) ); console . log ( countriesWithLand ); // [\"Finland\", \"Iceland\"] How about if we want to filter out countries not containing the substring land. We use negation to achieve that. const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; const countriesWithLand = countries . filter ( ( country ) => ! country . includes ( \"land\" ) ); console . log ( countriesWithLand ); // [\"Estonia\", \"Sweden\", \"Norway\"] Let's see an additional example about the filter, let us filter even or odd numbers from an array of numbers const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const evens = numbers . filter (( n ) => n % 2 === 0 ); const odds = numbers . filter (( n ) => n % 2 !== 0 ); console . log ( evens ); // [0, 2, 4, 6, 8, 10] console . log ( odds ); // [1, 3, 5, 7, 9] Now, you know how to filter let us move on to the next functional programming, reduce.","title":"3. filter"},{"location":"javascript_fundamentals/functional_programming/#4-reduce","text":"Like forEach, map, and filter, reduce is also used with an array and it returns a single value. You can associate reduce with a blender. You put different fruits to a blend and you get a mix of fruit juice. The juice is the output from the reduction process. We use the reduce method to sum all numbers in an array together, or to multiply items in an array or to concatenate items in an array. Let us see the following different example to make this explanation more clear. // syntax in a normal or a function declaration function callback ( acc , cur ) { return // code goes here } const reduced = array . reduce ( callback , optionalInitialValue ) // or syntax in an arrow function const reduced = callback ( acc , cur ) => { return // code goes here } const reduced = array . reduce ( callback ) The default initial value is 0. We can change the initial value if we want to change it. For instance if we want to add all items in an array and if all the items are numbers we can use reduce. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const sum = numbers . reduce (( acc , cur ) => acc + cur ); console . log ( sum ); // 55 Reduce has a default initial value which is zero. Now, let us use a different initial value which is 5 in this case. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const sum = numbers . reduce (( acc , cur ) => acc + cur , 5 ); console . log ( sum ); // 60 Let us concatenate strings using reduce const strs = [ \"Hello\" , \"world\" , \"!\" ]; const helloWorld = strs . reduce (( acc , cur ) => acc + \" \" + cur ); console . log ( helloWorld ); // \"Hello world !\" We can multiply items of an array using reduce and we will return the value. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const value = numbers . reduce (( acc , cur ) => acc * cur ); console . log ( value ); // 120 Let us try it with an initial value const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const value = numbers . reduce (( acc , cur ) => acc * cur , 10 ); console . log ( value ); // 1200","title":"4. reduce"},{"location":"javascript_fundamentals/functional_programming/#5-find","text":"If we are interested in the first occurrence of a certain item or element in an array we can use find method. Unlike map and filter, find just return the first occurrence of an item instead of an array. // syntax in a normal or a function declaration function callback ( item ) { return // code goes here } const item = array . find ( callback ) // or syntax in an arrow function const reduced = callback ( item ) => { return // code goes here } const item = array . find ( callback ) Let find the first even number and the first odd number in the numbers array. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const firstEvenNum = numbers . find (( n ) => n % 2 === 0 ); const firstOddNum = numbers . find (( n ) => n % 2 !== 0 ); console . log ( firstEvenNum ); // 0 console . log ( firstOddNum ); // 1 Let us find the first country which contains a substring way const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; const countryWithWay = countries . find (( country ) => country . includes ( \"way\" )); console . log ( countriesWithWay ); // Norway Let us find the first country which has only six characters const countries = [ \"Finland\" , \"Estonia\" , \"Sweden\" , \"Norway\" , \"Iceland\" ]; const sixCharsCountry = countries . find (( country ) => country . length === 6 ); console . log ( sixCharsCountry ); // Sweden Let us find the first country in the array which has the letter 'o' const countries = [ 'Finland' , 'Estonia' , 'Sweden' , 'Norway' , 'Iceland' ] const index = countries . find (( country ) => country . includes ( 'o' )) console . log ( index // Estonia","title":"5. find"},{"location":"javascript_fundamentals/functional_programming/#6-findindex","text":"The findIndex method works like find but findIndex returns the index of the item. If we are interested in the index of a certain item or element in an array we can use findIndex. The findIndex return the index of the first occurrence of an item. // syntax in a normal or a function declaration function callback ( item ) { return // code goes here } const index = array . findIndex ( callback ) // or syntax in an arrow function const reduced = callback ( item ) => { return // code goes here } const index = array . findIndex ( callback ) Let us find the index of the first even number and the index of the first odd number in the numbers array. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const firstEvenIndex = numbers . findIndex (( n ) => n % 2 === 0 ); const firstOddIndex = numbers . findIndex (( n ) => n % 2 !== 0 ); console . log ( firstEvenIndex ); // 0 console . log ( firstOddIndex ); // 1 Let us find the index of the first country in the array which has exactly six characters const countries = [ 'Finland' , 'Estonia' , 'Sweden' , 'Norway' , 'Iceland' ] const index = countries . findIndex (( country ) => country . length === 6 ) console . log ( index //2 Let us find the index of the first country in the array which has the letter 'o'. const countries = [ 'Finland' , 'Estonia' , 'Sweden' , 'Norway' , 'Iceland' ] const index = countries . findIndex (( country ) => country . includes ( 'o' )) console . log ( index // 1 Let us move on to the next functional programming, some.","title":"6. findIndex"},{"location":"javascript_fundamentals/functional_programming/#7-some","text":"The some method is used with array and return a boolean. If one or some of the items satisfy the criteria the result will be true else it will be false. Let us see it with an example. In the following array some numbers are even and some are odd, so if I ask you a question, are there even numbers in the array then your answer will be yes. If I ask you also another question, are there odd numbers in the array then your answer will be yes. On the contrary, if I ask you, are all the numbers even or odd then your answer will be no because all the numbers are not even or odd. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]; const someAreEvens = numbers . some (( n ) => n % 2 === 0 ); const someAreOdds = numbers . some (( n ) => n % 2 !== 0 ); console . log ( someAreEvens ); // true console . log ( someAreOdds ); // true Let us another example const evens = [ 0 , 2 , 4 , 6 , 8 , 10 ]; const someAreEvens = evens . some (( n ) => n % 2 === 0 ); const someAreOdds = evens . some (( n ) => n % 2 !== 0 ); console . log ( someAreEvens ); // true console . log ( someAreOdds ); // false Now, let us see one more functional programming, every.","title":"7. some"},{"location":"javascript_fundamentals/functional_programming/#8-every","text":"The method every is somehow similar to some but every item must satisfy the criteria. The method every like some returns a boolean. const numbers = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] const allAreEvens = numbers . every (( n ) => n % 2 === 0 ) const allAreOdd s = numbers . every (( n ) => n % 2 !== 0 ) console . log ( allAreEven ) // false console . log ( allAreOdd ) // false const evens = [ 0 , 2 , 4 , 6 , 8 , 10 ] const someAreEvens = evens . some (( n ) => n % 2 === 0 ) const someAreOdds = evens . some (( n ) => n % 2 !== 0 ) console . log ( someAreEvens ) // true console . log ( someAreOdds ) // false","title":"8. every"},{"location":"javascript_fundamentals/functional_programming/#exercises","text":"const products = [ { product : \"banana\" , price : 3 }, { product : \"mango\" , price : 6 }, { product : \"potato\" , price : \" \" }, { product : \"avocado\" , price : 8 }, { product : \"coffee\" , price : 10 }, { product : \"tea\" , price : \"\" }, ]; Print the price of each product using forEach Print the product items as follows using forEach The price of banana is 3 euros. The price of mango is 6 euros. The price of potato is unknown. The price of avocado is 8 euros. The price of coffee is 10 euros. The price of tea is unknown. Calculate the sum of all the prices using forEach Create an array of prices using map and store it in a variable prices Filter products with prices Use method chaining to get the sum of the prices(map, filter, reduce) Calculate the sum of all the prices using reduce only Find the first product which doesn't have a price value Find the index of the first product which does not have price value Check if some products do not have a price value Check if all the products have price value Explain the difference between forEach, map, filter and reduce Explain the difference between filter, find and findIndex Explain the difference between some and every","title":"Exercises"},{"location":"javascript_fundamentals/functions/","text":"Functions So far we have seen many builtin JavaScript functions. In this section, we will focus on custom functions. What is a function? Before we start making functions, lets understand what function is and why we need function? A function is a reusable block of code or programming statements designed to perform a certain task. A function is declared by a function key word followed by a name, followed by parentheses (). A parentheses can take a parameter. If a function take a parameter it will be called with argument. A function can also take a default parameter. To store a data to a function, a function has to return certain data types. To get the value we call or invoke a function. Function makes code: clean and easy to read reusable easy to test A function can be declared or created in couple of ways: Declaration function Expression function Anonymous function Arrow function Function Declaration Let us see how to declare a function and how to call a function. //declaring a function without a parameter function functionName () { // code goes here } functionName (); // calling function by its name and with parentheses Function without a parameter and return Function can be declared without a parameter. Example: // function without parameter, a function which make a number square function square () { let num = 2 ; let sq = num * num ; console . log ( sq ); } square (); // 4 // function without parameter function addTwoNumbers () { let numOne = 10 ; let numTwo = 20 ; let sum = numOne + numTwo ; console . log ( sum ); } addTwoNumbers (); // a function has to be called by its name to be executed function printFullName () { let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let space = \" \" ; let fullName = firstName + space + lastName ; console . log ( fullName ); } printFullName (); // calling a function Function returning value Function can also return values, if a function does not return values the value of the function is undefined. Let us write the above functions with return. From now on, we return value to a function instead of printing it. function printFullName () { let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let space = \" \" ; let fullName = firstName + space + lastName ; return fullName ; } console . log ( printFullName ()); function addTwoNumbers () { let numOne = 2 ; let numTwo = 3 ; let total = numOne + numTwo ; return total ; } console . log ( addTwoNumbers ()); Function with a parameter In a function we can pass different data types(number, string, boolean, object, function) as a parameter. // function with one parameter function functionName ( parm1 ) { //code goes her } functionName ( parm1 ); // during calling or invoking one argument needed function areaOfCircle ( r ) { let area = Math . PI * r * r ; return area ; } console . log ( areaOfCircle ( 10 )); // should be called with one argument function square ( number ) { return number * number ; } console . log ( square ( 10 )); Function with two parameters // function with two parameters function functionName ( parm1 , parm2 ) { //code goes her } functionName ( parm1 , parm2 ); // during calling or invoking two arguments needed // Function without parameter doesn't take input, so lets make a function with parameters function sumTwoNumbers ( numOne , numTwo ) { let sum = numOne + numTwo ; console . log ( sum ); } sumTwoNumbers ( 10 , 20 ); // calling functions // If a function doesn't return it doesn't store data, so it should return function sumTwoNumbers ( numOne , numTwo ) { let sum = numOne + numTwo ; return sum ; } console . log ( sumTwoNumbers ( 10 , 20 )); function printFullName ( firstName , lastName ) { return ` ${ firstName } ${ lastName } ` ; } console . log ( printFullName ( \"Asabeneh\" , \"Yetayeh\" )); Function with many parameters // function with multiple parameters function functionName ( parm1 , parm2 , parm3 ,...){ //code goes here } functionName ( parm1 , parm2 , parm3 ,...) // during calling or invoking three arguments needed // this function takes array as a parameter and sum up the numbers in the array function sumArrayValues ( arr ) { let sum = 0 ; for ( let i = 0 ; i < arr . length ; i ++ ) { sum = sum + arr [ i ]; } return sum ; } const numbers = [ 1 , 2 , 3 , 4 , 5 ]; //calling a function console . log ( sumArrayValues ( numbers )); const areaOfCircle = ( radius ) => { let area = Math . PI * radius * radius ; return area ; } console . log ( areaOfCircle ( 10 )) Function with unlimited number of parameters Sometimes we do not know how many arguments the user going to pass. Therefore, we should know how to write a function which can take unlimited number of arguments. The way we do it has a significant difference between a function declaration(regular function) and arrow function. Let us see examples both in function declaration and arrow function. Unlimited number of parameters in regular function A function declaration provides a function scoped arguments array like object. Any thing we passed as argument in the function can be accessed from arguments object inside the functions. Let us see an example // Let us access the arguments object \u200b function sumAllNums () { console . log ( arguments ) } sumAllNums ( 1 , 2 , 3 , 4 )) // Arguments(4) [1, 2, 3, 4, callee: \u0192, Symbol(Symbol.iterator): \u0192] // function declaration \u200b function sumAllNums () { let sum = 0 for ( let i = 0 ; i < arguments . length ; i ++ ) { sum += arguments [ i ] } return sum } console . log ( sumAllNums ( 1 , 2 , 3 , 4 )) // 10 console . log ( sumAllNums ( 10 , 20 , 13 , 40 , 10 )) // 93 console . log ( sumAllNums ( 15 , 20 , 30 , 25 , 10 , 33 , 40 )) // 173 Unlimited number of parameters in arrow function Arrow function does not have the function scoped arguments object. To implement a function which takes unlimited number of arguments in an arrow function we use spread operator followed by any parameter name. Any thing we passed as argument in the function can be accessed as array in the arrow function. Let us see an example // Let us access the arguments object \u200b const sumAllNums = (... args ) => { // console.log(arguments), arguments object not found in arrow function // instead we use an a parameter followed by spread operator console . log ( args ) } sumAllNums ( 1 , 2 , 3 , 4 )) // [1, 2, 3, 4] // function declaration \u200b const sumAllNums = (... args ) => { let sum = 0 for ( const element of args ) { sum += element } return sum } console . log ( sumAllNums ( 1 , 2 , 3 , 4 )) // 10 console . log ( sumAllNums ( 10 , 20 , 13 , 40 , 10 )) // 93 console . log ( sumAllNums ( 15 , 20 , 30 , 25 , 10 , 33 , 40 )) // 173 Anonymous Function Anonymous function or without name const anonymousFun = function () { console . log ( \"I am an anonymous function and my value is stored in anonymousFun\" ); }; Expression Function Expression functions are anonymous functions. After we create a function without a name and we assign it to a variable. To return a value from the function we should call the variable. Look at the example below. // Function expression const square = function ( n ) { return n * n ; }; console . log ( square ( 2 )); // -> 4 Self Invoking Functions Self invoking functions are anonymous functions which do not need to be called to return a value. ( function ( n ) { console . log ( n * n ); })( 2 ); // 4, but instead of just printing if we want to return and store the data, we do as shown below let squaredNum = ( function ( n ) { return n * n ; })( 10 ); console . log ( squaredNum ); Arrow Function Arrow function is an alternative to write a function, however function declaration and arrow function have some minor differences. Arrow function uses arrow instead of the keyword function to declare a function. Let us see both function declaration and arrow function. // This is how we write normal or declaration function // Let us change this declaration function to an arrow function function square ( n ) { return n * n ; } console . log ( square ( 2 )); // 4 const square = ( n ) => { return n * n ; }; console . log ( square ( 2 )); // -> 4 // if we have only one line in the code block, it can be written as follows, explicit return const square = ( n ) => n * n ; // -> 4 const changeToUpperCase = ( arr ) => { const newArr = []; for ( const element of arr ) { newArr . push ( element . toUpperCase ()); } return newArr ; }; const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" ]; console . log ( changeToUpperCase ( countries )); // [\"FINLAND\", \"SWEDEN\", \"NORWAY\", \"DENMARK\", \"ICELAND\"] const printFullName = ( firstName , lastName ) => { return ` ${ firstName } ${ lastName } ` ; }; console . log ( printFullName ( \"Asabeneh\" , \"Yetayeh\" )); The above function has only the return statement, therefore, we can explicitly return it as follows. const printFullName = ( firstName , lastName ) => ` ${ firstName } ${ lastName } ` ; console . log ( printFullName ( \"Asabeneh\" , \"Yetayeh\" )); Function with default parameters Sometimes we pass default values to parameters, when we invoke the function if we do not pass an argument the default value will be used. Both function declaration and arrow function can have a default value or values. // syntax // Declaring a function function functionName ( param = value ) { //codes } // Calling function functionName (); functionName ( arg ); Example: function greetings ( name = \"Peter\" ) { let message = ` ${ name } , welcome to 30 Days Of JavaScript!` ; return message ; } console . log ( greetings ()); console . log ( greetings ( \"Asabeneh\" )); function generateFullName ( firstName = \"Asabeneh\" , lastName = \"Yetayeh\" ) { let space = \" \" ; let fullName = firstName + space + lastName ; return fullName ; } console . log ( generateFullName ()); console . log ( generateFullName ( \"David\" , \"Smith\" )); function calculateAge ( birthYear , currentYear = 2019 ) { let age = currentYear - birthYear ; return age ; } console . log ( \"Age: \" , calculateAge ( 1819 )); function weightOfObject ( mass , gravity = 9.81 ) { let weight = mass * gravity + \" N\" ; // the value has to be changed to string first return weight ; } console . log ( \"Weight of an object in Newton: \" , weightOfObject ( 100 )); // 9.81 gravity at the surface of Earth console . log ( \"Weight of an object in Newton: \" , weightOfObject ( 100 , 1.62 )); // gravity at surface of Moon Let us see how we write the above functions with arrow functions // syntax // Declaring a function const functionName = ( param = value ) => { //codes }; // Calling function functionName (); functionName ( arg ); Example: const greetings = ( name = \"Peter\" ) => { let message = name + \", welcome to 30 Days Of JavaScript!\" ; return message ; }; console . log ( greetings ()); console . log ( greetings ( \"Asabeneh\" )); const generateFullName = ( firstName = \"Asabeneh\" , lastName = \"Yetayeh\" ) => { let space = \" \" ; let fullName = firstName + space + lastName ; return fullName ; }; console . log ( generateFullName ()); console . log ( generateFullName ( \"David\" , \"Smith\" )); const calculateAge = ( birthYear , currentYear = 2019 ) => currentYear - birthYear ; console . log ( \"Age: \" , calculateAge ( 1819 )); const weightOfObject = ( mass , gravity = 9.81 ) => mass * gravity + \" N\" ; console . log ( \"Weight of an object in Newton: \" , weightOfObject ( 100 )); // 9.81 gravity at the surface of Earth console . log ( \"Weight of an object in Newton: \" , weightOfObject ( 100 , 1.62 )); // gravity at surface of Moon Function declaration versus Arrow function It ill be covered in other time","title":"Functions"},{"location":"javascript_fundamentals/functions/#functions","text":"So far we have seen many builtin JavaScript functions. In this section, we will focus on custom functions. What is a function? Before we start making functions, lets understand what function is and why we need function? A function is a reusable block of code or programming statements designed to perform a certain task. A function is declared by a function key word followed by a name, followed by parentheses (). A parentheses can take a parameter. If a function take a parameter it will be called with argument. A function can also take a default parameter. To store a data to a function, a function has to return certain data types. To get the value we call or invoke a function. Function makes code: clean and easy to read reusable easy to test A function can be declared or created in couple of ways: Declaration function Expression function Anonymous function Arrow function","title":"Functions"},{"location":"javascript_fundamentals/functions/#function-declaration","text":"Let us see how to declare a function and how to call a function. //declaring a function without a parameter function functionName () { // code goes here } functionName (); // calling function by its name and with parentheses","title":"Function Declaration"},{"location":"javascript_fundamentals/functions/#function-without-a-parameter-and-return","text":"Function can be declared without a parameter. Example: // function without parameter, a function which make a number square function square () { let num = 2 ; let sq = num * num ; console . log ( sq ); } square (); // 4 // function without parameter function addTwoNumbers () { let numOne = 10 ; let numTwo = 20 ; let sum = numOne + numTwo ; console . log ( sum ); } addTwoNumbers (); // a function has to be called by its name to be executed function printFullName () { let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let space = \" \" ; let fullName = firstName + space + lastName ; console . log ( fullName ); } printFullName (); // calling a function","title":"Function without a parameter and return"},{"location":"javascript_fundamentals/functions/#function-returning-value","text":"Function can also return values, if a function does not return values the value of the function is undefined. Let us write the above functions with return. From now on, we return value to a function instead of printing it. function printFullName () { let firstName = \"Asabeneh\" ; let lastName = \"Yetayeh\" ; let space = \" \" ; let fullName = firstName + space + lastName ; return fullName ; } console . log ( printFullName ()); function addTwoNumbers () { let numOne = 2 ; let numTwo = 3 ; let total = numOne + numTwo ; return total ; } console . log ( addTwoNumbers ());","title":"Function returning value"},{"location":"javascript_fundamentals/functions/#function-with-a-parameter","text":"In a function we can pass different data types(number, string, boolean, object, function) as a parameter. // function with one parameter function functionName ( parm1 ) { //code goes her } functionName ( parm1 ); // during calling or invoking one argument needed function areaOfCircle ( r ) { let area = Math . PI * r * r ; return area ; } console . log ( areaOfCircle ( 10 )); // should be called with one argument function square ( number ) { return number * number ; } console . log ( square ( 10 ));","title":"Function with a parameter"},{"location":"javascript_fundamentals/functions/#function-with-two-parameters","text":"// function with two parameters function functionName ( parm1 , parm2 ) { //code goes her } functionName ( parm1 , parm2 ); // during calling or invoking two arguments needed // Function without parameter doesn't take input, so lets make a function with parameters function sumTwoNumbers ( numOne , numTwo ) { let sum = numOne + numTwo ; console . log ( sum ); } sumTwoNumbers ( 10 , 20 ); // calling functions // If a function doesn't return it doesn't store data, so it should return function sumTwoNumbers ( numOne , numTwo ) { let sum = numOne + numTwo ; return sum ; } console . log ( sumTwoNumbers ( 10 , 20 )); function printFullName ( firstName , lastName ) { return ` ${ firstName } ${ lastName } ` ; } console . log ( printFullName ( \"Asabeneh\" , \"Yetayeh\" ));","title":"Function with two parameters"},{"location":"javascript_fundamentals/functions/#function-with-many-parameters","text":"// function with multiple parameters function functionName ( parm1 , parm2 , parm3 ,...){ //code goes here } functionName ( parm1 , parm2 , parm3 ,...) // during calling or invoking three arguments needed // this function takes array as a parameter and sum up the numbers in the array function sumArrayValues ( arr ) { let sum = 0 ; for ( let i = 0 ; i < arr . length ; i ++ ) { sum = sum + arr [ i ]; } return sum ; } const numbers = [ 1 , 2 , 3 , 4 , 5 ]; //calling a function console . log ( sumArrayValues ( numbers )); const areaOfCircle = ( radius ) => { let area = Math . PI * radius * radius ; return area ; } console . log ( areaOfCircle ( 10 ))","title":"Function with many parameters"},{"location":"javascript_fundamentals/functions/#function-with-unlimited-number-of-parameters","text":"Sometimes we do not know how many arguments the user going to pass. Therefore, we should know how to write a function which can take unlimited number of arguments. The way we do it has a significant difference between a function declaration(regular function) and arrow function. Let us see examples both in function declaration and arrow function.","title":"Function with unlimited number of parameters"},{"location":"javascript_fundamentals/functions/#unlimited-number-of-parameters-in-regular-function","text":"A function declaration provides a function scoped arguments array like object. Any thing we passed as argument in the function can be accessed from arguments object inside the functions. Let us see an example // Let us access the arguments object \u200b function sumAllNums () { console . log ( arguments ) } sumAllNums ( 1 , 2 , 3 , 4 )) // Arguments(4) [1, 2, 3, 4, callee: \u0192, Symbol(Symbol.iterator): \u0192] // function declaration \u200b function sumAllNums () { let sum = 0 for ( let i = 0 ; i < arguments . length ; i ++ ) { sum += arguments [ i ] } return sum } console . log ( sumAllNums ( 1 , 2 , 3 , 4 )) // 10 console . log ( sumAllNums ( 10 , 20 , 13 , 40 , 10 )) // 93 console . log ( sumAllNums ( 15 , 20 , 30 , 25 , 10 , 33 , 40 )) // 173","title":"Unlimited number of parameters in regular function"},{"location":"javascript_fundamentals/functions/#unlimited-number-of-parameters-in-arrow-function","text":"Arrow function does not have the function scoped arguments object. To implement a function which takes unlimited number of arguments in an arrow function we use spread operator followed by any parameter name. Any thing we passed as argument in the function can be accessed as array in the arrow function. Let us see an example // Let us access the arguments object \u200b const sumAllNums = (... args ) => { // console.log(arguments), arguments object not found in arrow function // instead we use an a parameter followed by spread operator console . log ( args ) } sumAllNums ( 1 , 2 , 3 , 4 )) // [1, 2, 3, 4] // function declaration \u200b const sumAllNums = (... args ) => { let sum = 0 for ( const element of args ) { sum += element } return sum } console . log ( sumAllNums ( 1 , 2 , 3 , 4 )) // 10 console . log ( sumAllNums ( 10 , 20 , 13 , 40 , 10 )) // 93 console . log ( sumAllNums ( 15 , 20 , 30 , 25 , 10 , 33 , 40 )) // 173","title":"Unlimited number of parameters in arrow function"},{"location":"javascript_fundamentals/functions/#anonymous-function","text":"Anonymous function or without name const anonymousFun = function () { console . log ( \"I am an anonymous function and my value is stored in anonymousFun\" ); };","title":"Anonymous Function"},{"location":"javascript_fundamentals/functions/#expression-function","text":"Expression functions are anonymous functions. After we create a function without a name and we assign it to a variable. To return a value from the function we should call the variable. Look at the example below. // Function expression const square = function ( n ) { return n * n ; }; console . log ( square ( 2 )); // -> 4","title":"Expression Function"},{"location":"javascript_fundamentals/functions/#self-invoking-functions","text":"Self invoking functions are anonymous functions which do not need to be called to return a value. ( function ( n ) { console . log ( n * n ); })( 2 ); // 4, but instead of just printing if we want to return and store the data, we do as shown below let squaredNum = ( function ( n ) { return n * n ; })( 10 ); console . log ( squaredNum );","title":"Self Invoking Functions"},{"location":"javascript_fundamentals/functions/#arrow-function","text":"Arrow function is an alternative to write a function, however function declaration and arrow function have some minor differences. Arrow function uses arrow instead of the keyword function to declare a function. Let us see both function declaration and arrow function. // This is how we write normal or declaration function // Let us change this declaration function to an arrow function function square ( n ) { return n * n ; } console . log ( square ( 2 )); // 4 const square = ( n ) => { return n * n ; }; console . log ( square ( 2 )); // -> 4 // if we have only one line in the code block, it can be written as follows, explicit return const square = ( n ) => n * n ; // -> 4 const changeToUpperCase = ( arr ) => { const newArr = []; for ( const element of arr ) { newArr . push ( element . toUpperCase ()); } return newArr ; }; const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" ]; console . log ( changeToUpperCase ( countries )); // [\"FINLAND\", \"SWEDEN\", \"NORWAY\", \"DENMARK\", \"ICELAND\"] const printFullName = ( firstName , lastName ) => { return ` ${ firstName } ${ lastName } ` ; }; console . log ( printFullName ( \"Asabeneh\" , \"Yetayeh\" )); The above function has only the return statement, therefore, we can explicitly return it as follows. const printFullName = ( firstName , lastName ) => ` ${ firstName } ${ lastName } ` ; console . log ( printFullName ( \"Asabeneh\" , \"Yetayeh\" ));","title":"Arrow Function"},{"location":"javascript_fundamentals/functions/#function-with-default-parameters","text":"Sometimes we pass default values to parameters, when we invoke the function if we do not pass an argument the default value will be used. Both function declaration and arrow function can have a default value or values. // syntax // Declaring a function function functionName ( param = value ) { //codes } // Calling function functionName (); functionName ( arg ); Example: function greetings ( name = \"Peter\" ) { let message = ` ${ name } , welcome to 30 Days Of JavaScript!` ; return message ; } console . log ( greetings ()); console . log ( greetings ( \"Asabeneh\" )); function generateFullName ( firstName = \"Asabeneh\" , lastName = \"Yetayeh\" ) { let space = \" \" ; let fullName = firstName + space + lastName ; return fullName ; } console . log ( generateFullName ()); console . log ( generateFullName ( \"David\" , \"Smith\" )); function calculateAge ( birthYear , currentYear = 2019 ) { let age = currentYear - birthYear ; return age ; } console . log ( \"Age: \" , calculateAge ( 1819 )); function weightOfObject ( mass , gravity = 9.81 ) { let weight = mass * gravity + \" N\" ; // the value has to be changed to string first return weight ; } console . log ( \"Weight of an object in Newton: \" , weightOfObject ( 100 )); // 9.81 gravity at the surface of Earth console . log ( \"Weight of an object in Newton: \" , weightOfObject ( 100 , 1.62 )); // gravity at surface of Moon Let us see how we write the above functions with arrow functions // syntax // Declaring a function const functionName = ( param = value ) => { //codes }; // Calling function functionName (); functionName ( arg ); Example: const greetings = ( name = \"Peter\" ) => { let message = name + \", welcome to 30 Days Of JavaScript!\" ; return message ; }; console . log ( greetings ()); console . log ( greetings ( \"Asabeneh\" )); const generateFullName = ( firstName = \"Asabeneh\" , lastName = \"Yetayeh\" ) => { let space = \" \" ; let fullName = firstName + space + lastName ; return fullName ; }; console . log ( generateFullName ()); console . log ( generateFullName ( \"David\" , \"Smith\" )); const calculateAge = ( birthYear , currentYear = 2019 ) => currentYear - birthYear ; console . log ( \"Age: \" , calculateAge ( 1819 )); const weightOfObject = ( mass , gravity = 9.81 ) => mass * gravity + \" N\" ; console . log ( \"Weight of an object in Newton: \" , weightOfObject ( 100 )); // 9.81 gravity at the surface of Earth console . log ( \"Weight of an object in Newton: \" , weightOfObject ( 100 , 1.62 )); // gravity at surface of Moon","title":"Function with default parameters"},{"location":"javascript_fundamentals/functions/#function-declaration-versus-arrow-function","text":"It ill be covered in other time","title":"Function declaration versus Arrow function"},{"location":"javascript_fundamentals/higher_order_functions/","text":"Higher Order Function Higher order functions are functions which take other function as a parameter or return a function as a value. The function passed as a parameter is called callback. Callback A callback is a function which can be passed as parameter to other function. See the example below. // a callback function, the function could be any name const callback = ( n ) => { return n ** 2 } \u200b // function take other function as a callback function cube ( callback , n ) { return callback ( n ) * n } \u200b console . log ( cube ( callback , 3 )) Returning function Higher order functions return function as a value \u200b // Higher order function returning an other function const higherOrder = n => { const doSomething = m => { const doWhatEver = t => { return 2 * n + 3 * m + t } return doWhatEver } \u200b return doSomething } console . log ( higherOrder ( 2 )( 3 )( 10 )) Let us see were we use call back functions.For instance the forEach method uses call back. const numbers = [ 1 , 2 , 3 , 4 ]; const sumArray = ( arr ) => { let sum = 0 ; const callback = function ( element ) { sum += element ; }; arr . forEach ( callback ); return sum ; }; console . log ( sumArray ( numbers )); 10 The above example can be simplified as follows: const numbers = [ 1 , 2 , 3 , 4 ] \u200b const sumArray = arr => { let sum = 0 arr . forEach ( function ( element ) { sum += element }) return sum } console . log ( sumArray ( numbers )) 10 setting time In JavaScript we can execute some activity on certain interval of time or we can schedule(wait) for sometime to execute some activities. setInterval setTimeout setInterval In JavaScript, we use setInterval higher order function to do some activity continuously with in some interval of time. The setInterval global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback will be always called in that interval of time. // syntax function callback () { // code goes here } setInterval ( callback , duration ); function sayHello () { console . log ( \"Hello\" ); } setInterval ( sayHello , 2000 ); // it prints hello in every 2 seconds setTimeout In JavaScript, we use setTimeout higher order function to execute some action at some time in the future. The setTimeout global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback wait for that amount of time. // syntax function callback () { // code goes here } setTimeout ( callback , duration ); // duration in milliseconds function sayHello () { console . log ( \"Hello\" ); } setTimeout ( sayHello , 2000 ); // it prints hello after it waits for 2 seconds.","title":"Higher Order Function"},{"location":"javascript_fundamentals/higher_order_functions/#higher-order-function","text":"Higher order functions are functions which take other function as a parameter or return a function as a value. The function passed as a parameter is called callback.","title":"Higher Order Function"},{"location":"javascript_fundamentals/higher_order_functions/#callback","text":"A callback is a function which can be passed as parameter to other function. See the example below. // a callback function, the function could be any name const callback = ( n ) => { return n ** 2 } \u200b // function take other function as a callback function cube ( callback , n ) { return callback ( n ) * n } \u200b console . log ( cube ( callback , 3 ))","title":"Callback"},{"location":"javascript_fundamentals/higher_order_functions/#returning-function","text":"Higher order functions return function as a value \u200b // Higher order function returning an other function const higherOrder = n => { const doSomething = m => { const doWhatEver = t => { return 2 * n + 3 * m + t } return doWhatEver } \u200b return doSomething } console . log ( higherOrder ( 2 )( 3 )( 10 )) Let us see were we use call back functions.For instance the forEach method uses call back. const numbers = [ 1 , 2 , 3 , 4 ]; const sumArray = ( arr ) => { let sum = 0 ; const callback = function ( element ) { sum += element ; }; arr . forEach ( callback ); return sum ; }; console . log ( sumArray ( numbers )); 10 The above example can be simplified as follows: const numbers = [ 1 , 2 , 3 , 4 ] \u200b const sumArray = arr => { let sum = 0 arr . forEach ( function ( element ) { sum += element }) return sum } console . log ( sumArray ( numbers )) 10","title":"Returning function"},{"location":"javascript_fundamentals/higher_order_functions/#setting-time","text":"In JavaScript we can execute some activity on certain interval of time or we can schedule(wait) for sometime to execute some activities. setInterval setTimeout","title":"setting time"},{"location":"javascript_fundamentals/higher_order_functions/#setinterval","text":"In JavaScript, we use setInterval higher order function to do some activity continuously with in some interval of time. The setInterval global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback will be always called in that interval of time. // syntax function callback () { // code goes here } setInterval ( callback , duration ); function sayHello () { console . log ( \"Hello\" ); } setInterval ( sayHello , 2000 ); // it prints hello in every 2 seconds","title":"setInterval"},{"location":"javascript_fundamentals/higher_order_functions/#settimeout","text":"In JavaScript, we use setTimeout higher order function to execute some action at some time in the future. The setTimeout global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback wait for that amount of time. // syntax function callback () { // code goes here } setTimeout ( callback , duration ); // duration in milliseconds function sayHello () { console . log ( \"Hello\" ); } setTimeout ( sayHello , 2000 ); // it prints hello after it waits for 2 seconds.","title":"setTimeout"},{"location":"javascript_fundamentals/loops/","text":"Loops In programming we use different loops to carry out repetitive tasks. Therefore, loop can help us to automate tedious and repetitive task. JavaScript has also different types of loops which we can use to work on repetitive task. Imagine if your are asked to print Hello world one thousand times without a loop, it may take an hour or two to do this tedious task. However, using loop we can print it in less than a second. Loops: for while do while for of forEach for in A loop usually goes until the condition gets false. But sometimes we like to interrupt the loop or skip an item during iteration. We use break to interrupt the loop and continue to skip an item during iteration. Types of Loops 1. for We use for loop when we know how many iteration we go. Let's see the following example // for loop syntax for ( initialization , condition , increment / decrement ) { code goes here } This code prints from 0 to 5. for ( let i = 0 ; i < 6 ; i ++ ) { console . log ( i ); } For example if we want to sum all the numbers from 0 to 100. let sum = 0 ; for ( let i = 0 ; i < 101 ; i ++ ) { sum += i ; } console . log ( sum ); If we want to sum only even numbers: let sum = 0 ; for ( let i = 0 ; i < 101 ; i += 2 ) { sum += i ; } console . log ( sum ); // or another way let total = 0 ; for ( let i = 0 ; i < 101 ; i ++ ) { if ( i % 2 == 0 ) { total += i ; } } console . log ( total ); This code iterates through the array const nums = [ 1 , 2 , 3 , 4 , 5 ]; for ( let i = 0 ; i < 6 ; i ++ ) { console . log ( nums [ i ]); } This code prints 5 to 0. Looping in reverse order for ( let i = 5 ; i >= 0 ; i -- ) { console . log ( i ); } The Code below can reverse an array. const nums = [ 1 , 2 , 3 , 4 , 5 ]; const lastIndex = nums . length - 1 ; const newArray = []; for ( let i = lastIndex ; i >= 0 ; i -- ) { newArray . push ( nums [ i ]); } console . log ( newArray ); 2. while We use the while loop when we do not know how man iteration we go in advance. let count = prompt ( \"Enter a positive number: \" ); while ( count > 0 ) { console . log ( count ); count -- ; } 3. do while Do while run at least once if the condition is true or false let count = 0 ; do { console . log ( count ); count ++ ; } while ( count < 11 ); The code below runs ones though the condition is false let count = 11 ; do { console . log ( count ); count ++ ; } while ( count < 11 ); While loop is the least important loop in many programming languages. 4. for of The for of loop is very handy to use it with array. If we are not interested in the index of the array a for of loop is preferable to regular for loop or forEach loop. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; for ( const number of numbers ) { console . log ( number ); } const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" ]; for ( const country of countries ) { console . log ( country . toUpperCase ()); } 5. forEach If we are interested in the index of the array forEach is preferable to for of loop. The forEach array method takes a callback function, the callback function takes three arguments: the item, the index and the array itself. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . forEach (( number , i ) => { console . log ( number , i ); }); const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" ]; countries . forEach (( country , i , arr ) => { console . log ( i , country . toUpperCase ()); }); 6. for in The for in loop can be used with object literals to get the keys of the object. const user = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , skills : [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Node\" , \"Python\" , \"D3.js\" ], }; for ( const key in user ) { console . log ( key , user [ key ]); } Interrupting a loop and skipping an item break Break is used to interrupt a loop. for ( let i = 0 ; i <= 5 ; i ++ ) { if ( i == 3 ) { break ; } console . log ( i ); } // 0 1 2 The above code stops if 3 found in the iteration process. continue We use the keyword continue to skip a certain iterations. for ( let i = 0 ; i <= 5 ; i ++ ) { if ( i == 3 ) { continue ; } console . log ( i ); } // 0 1 2 4 5 Conclusions Regular for loop can be used anywhere when the number of iteration is known. While loop when the number of iteration is not know Do while loop and while loop are almost the same but do while loop run at least once even when the condition is false for of is used only for array forEach is used for array for in is used for object","title":"Loops"},{"location":"javascript_fundamentals/loops/#loops","text":"In programming we use different loops to carry out repetitive tasks. Therefore, loop can help us to automate tedious and repetitive task. JavaScript has also different types of loops which we can use to work on repetitive task. Imagine if your are asked to print Hello world one thousand times without a loop, it may take an hour or two to do this tedious task. However, using loop we can print it in less than a second. Loops: for while do while for of forEach for in A loop usually goes until the condition gets false. But sometimes we like to interrupt the loop or skip an item during iteration. We use break to interrupt the loop and continue to skip an item during iteration.","title":"Loops"},{"location":"javascript_fundamentals/loops/#types-of-loops","text":"","title":"Types of Loops"},{"location":"javascript_fundamentals/loops/#1-for","text":"We use for loop when we know how many iteration we go. Let's see the following example // for loop syntax for ( initialization , condition , increment / decrement ) { code goes here } This code prints from 0 to 5. for ( let i = 0 ; i < 6 ; i ++ ) { console . log ( i ); } For example if we want to sum all the numbers from 0 to 100. let sum = 0 ; for ( let i = 0 ; i < 101 ; i ++ ) { sum += i ; } console . log ( sum ); If we want to sum only even numbers: let sum = 0 ; for ( let i = 0 ; i < 101 ; i += 2 ) { sum += i ; } console . log ( sum ); // or another way let total = 0 ; for ( let i = 0 ; i < 101 ; i ++ ) { if ( i % 2 == 0 ) { total += i ; } } console . log ( total ); This code iterates through the array const nums = [ 1 , 2 , 3 , 4 , 5 ]; for ( let i = 0 ; i < 6 ; i ++ ) { console . log ( nums [ i ]); } This code prints 5 to 0. Looping in reverse order for ( let i = 5 ; i >= 0 ; i -- ) { console . log ( i ); } The Code below can reverse an array. const nums = [ 1 , 2 , 3 , 4 , 5 ]; const lastIndex = nums . length - 1 ; const newArray = []; for ( let i = lastIndex ; i >= 0 ; i -- ) { newArray . push ( nums [ i ]); } console . log ( newArray );","title":"1. for"},{"location":"javascript_fundamentals/loops/#2-while","text":"We use the while loop when we do not know how man iteration we go in advance. let count = prompt ( \"Enter a positive number: \" ); while ( count > 0 ) { console . log ( count ); count -- ; }","title":"2. while"},{"location":"javascript_fundamentals/loops/#3-do-while","text":"Do while run at least once if the condition is true or false let count = 0 ; do { console . log ( count ); count ++ ; } while ( count < 11 ); The code below runs ones though the condition is false let count = 11 ; do { console . log ( count ); count ++ ; } while ( count < 11 ); While loop is the least important loop in many programming languages.","title":"3. do while"},{"location":"javascript_fundamentals/loops/#4-for-of","text":"The for of loop is very handy to use it with array. If we are not interested in the index of the array a for of loop is preferable to regular for loop or forEach loop. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; for ( const number of numbers ) { console . log ( number ); } const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" ]; for ( const country of countries ) { console . log ( country . toUpperCase ()); }","title":"4. for of"},{"location":"javascript_fundamentals/loops/#5-foreach","text":"If we are interested in the index of the array forEach is preferable to for of loop. The forEach array method takes a callback function, the callback function takes three arguments: the item, the index and the array itself. const numbers = [ 1 , 2 , 3 , 4 , 5 ]; numbers . forEach (( number , i ) => { console . log ( number , i ); }); const countries = [ \"Finland\" , \"Sweden\" , \"Norway\" , \"Denmark\" , \"Iceland\" ]; countries . forEach (( country , i , arr ) => { console . log ( i , country . toUpperCase ()); });","title":"5. forEach"},{"location":"javascript_fundamentals/loops/#6-for-in","text":"The for in loop can be used with object literals to get the keys of the object. const user = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , skills : [ \"HTML\" , \"CSS\" , \"JS\" , \"React\" , \"Node\" , \"Python\" , \"D3.js\" ], }; for ( const key in user ) { console . log ( key , user [ key ]); }","title":"6. for in"},{"location":"javascript_fundamentals/loops/#interrupting-a-loop-and-skipping-an-item","text":"","title":"Interrupting a loop and skipping an item"},{"location":"javascript_fundamentals/loops/#break","text":"Break is used to interrupt a loop. for ( let i = 0 ; i <= 5 ; i ++ ) { if ( i == 3 ) { break ; } console . log ( i ); } // 0 1 2 The above code stops if 3 found in the iteration process.","title":"break"},{"location":"javascript_fundamentals/loops/#continue","text":"We use the keyword continue to skip a certain iterations. for ( let i = 0 ; i <= 5 ; i ++ ) { if ( i == 3 ) { continue ; } console . log ( i ); } // 0 1 2 4 5","title":"continue"},{"location":"javascript_fundamentals/loops/#conclusions","text":"Regular for loop can be used anywhere when the number of iteration is known. While loop when the number of iteration is not know Do while loop and while loop are almost the same but do while loop run at least once even when the condition is false for of is used only for array forEach is used for array for in is used for object","title":"Conclusions"},{"location":"javascript_fundamentals/object/","text":"Object Everything can be an object and objects do have properties and properties have values, so an object is a key value pair. The order of the key is not reserved, or there is no order. To create an object literal, we use two curly brackets. Creating an empty object An empty object const person = {}; Creating an objecting with values Now, the person object has firstName, lastName, age, location, skills and isMarried properties. The value of properties or keys could be a string, number, boolean, an object, null, undefined or a function. Let us see some examples of object. Each key has a value in the object. const rectangle = { length : 20 , width : 20 , }; console . log ( rectangle ); // {length: 20, width: 20} const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], isMarried : true , }; console . log ( person ); Getting values from an object We can access values of object using two methods: using . followed by key name if the key-name is a one word using square bracket and a quote const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], getFullName : function () { return ` ${ this . firstName }${ this . lastName } ` ; }, \"phone number\" : \"+3584545454545\" , }; // accessing values using . console . log ( person . firstName ); console . log ( person . lastName ); console . log ( person . age ); console . log ( person . location ); // value can be accessed using square bracket and key name console . log ( person [ \"firstName\" ]); console . log ( person [ \"lastName\" ]); console . log ( person [ \"age\" ]); console . log ( person [ \"age\" ]); console . log ( person [ \"location\" ]); // for instance to access the phone number we only use the square bracket method console . log ( person [ \"phone number\" ]); Creating object methods Now, the person object has getFullName properties. The getFullName is function inside the person object and we call it an object method. The this key word refers to the object itself. We can use the word this to access the values of different properties of the object. We can not use an arrow function as object method because the word this refers to the window inside an arrow function instead of the object itself. Example of object: const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], getFullName : function () { return ` ${ this . firstName } ${ this . lastName } ` ; }, }; console . log ( person . getFullName ()); // Asabeneh Yetayeh Setting new key for an object An object is a mutable data structure and we can modify the content of an object after it gets created. Setting a new keys in an object const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], getFullName : function () { return ` ${ this . firstName } ${ this . lastName } ` ; }, }; person . nationality = \"Ethiopian\" ; person . country = \"Finland\" ; person . title = \"teacher\" ; person . skills . push ( \"Meteor\" ); person . skills . push ( \"SasS\" ); person . isMarried = true ; person . getPersonInfo = function () { let skillsWithoutLastSkill = this . skills . slice ( 0 , this . skills . length - 1 ) . join ( \", \" ); let lastSkill = this . skills . slice ( this . skills . length - 1 )[ 0 ]; let skills = ` ${ skillsWithoutLastSkill } , and ${ lastSkill } ` ; let fullName = this . getFullName (); let statement = ` ${ fullName } is a ${ this . title } .\\nHe lives in ${ this . country } .\\nHe teaches ${ skills } .` ; return statement ; }; console . log ( person ); console . log ( person . getPersonInfo ()); Asabeneh Yetayeh is a teacher. He lives in Finland. He teaches HTML, CSS, JavaScript, React, Node, MongoDB, Python, D3.js, Meteor, and SasS. Object Methods There are different methods to manipulate an object. Let us see some of the available methods. Object.assign : To copy an object without modifying the original object const person = { firstName : \"Asabeneh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JS\" ], title : \"teacher\" , address : { street : \"Heitamienkatu 16\" , pobox : 2002 , city : \"Helsinki\" , }, getPersonInfo : function () { return `I am ${ this . firstName } and I live in ${ this . city } , ${ this . country } . I am ${ this . age } .` ; }, }; //Object methods: Object.assign, Object.keys, Object.values, Object.entries //hasOwnProperty const copyPerson = Object . assign ({}, person ); console . log ( copyPerson ); Getting object keys using Object.keys() Object.keys : To get the keys or properties of an object as an array const keys = Object . keys ( copyPerson ); console . log ( keys ); //['name', 'age', 'country', 'skills', 'address', 'getPersonInfo'] const address = Object . keys ( copyPerson . address ); console . log ( address ); //['street', 'pobox', 'city'] Getting object values using Object.values() Object.values :To get values of an object as an array const values = Object . values ( copyPerson ); console . log ( values ); Getting object keys and values using Object.entries() Object.entries :To get the keys and values in an array const entries = Object . entries ( copyPerson ); console . log ( entries ); Checking properties using hasOwnProperty() hasOwnProperty : To check if a specific key or property exist in an object console . log ( copyPerson . hasOwnProperty ( \"name\" )); console . log ( copyPerson . hasOwnProperty ( \"score\" ));","title":"Object"},{"location":"javascript_fundamentals/object/#object","text":"Everything can be an object and objects do have properties and properties have values, so an object is a key value pair. The order of the key is not reserved, or there is no order. To create an object literal, we use two curly brackets.","title":"Object"},{"location":"javascript_fundamentals/object/#creating-an-empty-object","text":"An empty object const person = {};","title":"Creating an empty object"},{"location":"javascript_fundamentals/object/#creating-an-objecting-with-values","text":"Now, the person object has firstName, lastName, age, location, skills and isMarried properties. The value of properties or keys could be a string, number, boolean, an object, null, undefined or a function. Let us see some examples of object. Each key has a value in the object. const rectangle = { length : 20 , width : 20 , }; console . log ( rectangle ); // {length: 20, width: 20} const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], isMarried : true , }; console . log ( person );","title":"Creating an objecting with values"},{"location":"javascript_fundamentals/object/#getting-values-from-an-object","text":"We can access values of object using two methods: using . followed by key name if the key-name is a one word using square bracket and a quote const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], getFullName : function () { return ` ${ this . firstName }${ this . lastName } ` ; }, \"phone number\" : \"+3584545454545\" , }; // accessing values using . console . log ( person . firstName ); console . log ( person . lastName ); console . log ( person . age ); console . log ( person . location ); // value can be accessed using square bracket and key name console . log ( person [ \"firstName\" ]); console . log ( person [ \"lastName\" ]); console . log ( person [ \"age\" ]); console . log ( person [ \"age\" ]); console . log ( person [ \"location\" ]); // for instance to access the phone number we only use the square bracket method console . log ( person [ \"phone number\" ]);","title":"Getting values from an object"},{"location":"javascript_fundamentals/object/#creating-object-methods","text":"Now, the person object has getFullName properties. The getFullName is function inside the person object and we call it an object method. The this key word refers to the object itself. We can use the word this to access the values of different properties of the object. We can not use an arrow function as object method because the word this refers to the window inside an arrow function instead of the object itself. Example of object: const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], getFullName : function () { return ` ${ this . firstName } ${ this . lastName } ` ; }, }; console . log ( person . getFullName ()); // Asabeneh Yetayeh","title":"Creating object methods"},{"location":"javascript_fundamentals/object/#setting-new-key-for-an-object","text":"An object is a mutable data structure and we can modify the content of an object after it gets created. Setting a new keys in an object const person = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JavaScript\" , \"React\" , \"Node\" , \"MongoDB\" , \"Python\" , \"D3.js\" , ], getFullName : function () { return ` ${ this . firstName } ${ this . lastName } ` ; }, }; person . nationality = \"Ethiopian\" ; person . country = \"Finland\" ; person . title = \"teacher\" ; person . skills . push ( \"Meteor\" ); person . skills . push ( \"SasS\" ); person . isMarried = true ; person . getPersonInfo = function () { let skillsWithoutLastSkill = this . skills . slice ( 0 , this . skills . length - 1 ) . join ( \", \" ); let lastSkill = this . skills . slice ( this . skills . length - 1 )[ 0 ]; let skills = ` ${ skillsWithoutLastSkill } , and ${ lastSkill } ` ; let fullName = this . getFullName (); let statement = ` ${ fullName } is a ${ this . title } .\\nHe lives in ${ this . country } .\\nHe teaches ${ skills } .` ; return statement ; }; console . log ( person ); console . log ( person . getPersonInfo ()); Asabeneh Yetayeh is a teacher. He lives in Finland. He teaches HTML, CSS, JavaScript, React, Node, MongoDB, Python, D3.js, Meteor, and SasS.","title":"Setting new key for an object"},{"location":"javascript_fundamentals/object/#object-methods","text":"There are different methods to manipulate an object. Let us see some of the available methods. Object.assign : To copy an object without modifying the original object const person = { firstName : \"Asabeneh\" , age : 250 , country : \"Finland\" , city : \"Helsinki\" , skills : [ \"HTML\" , \"CSS\" , \"JS\" ], title : \"teacher\" , address : { street : \"Heitamienkatu 16\" , pobox : 2002 , city : \"Helsinki\" , }, getPersonInfo : function () { return `I am ${ this . firstName } and I live in ${ this . city } , ${ this . country } . I am ${ this . age } .` ; }, }; //Object methods: Object.assign, Object.keys, Object.values, Object.entries //hasOwnProperty const copyPerson = Object . assign ({}, person ); console . log ( copyPerson );","title":"Object Methods"},{"location":"javascript_fundamentals/object/#getting-object-keys-using-objectkeys","text":"Object.keys : To get the keys or properties of an object as an array const keys = Object . keys ( copyPerson ); console . log ( keys ); //['name', 'age', 'country', 'skills', 'address', 'getPersonInfo'] const address = Object . keys ( copyPerson . address ); console . log ( address ); //['street', 'pobox', 'city']","title":"Getting object keys using Object.keys()"},{"location":"javascript_fundamentals/object/#getting-object-values-using-objectvalues","text":"Object.values :To get values of an object as an array const values = Object . values ( copyPerson ); console . log ( values );","title":"Getting object values using Object.values()"},{"location":"javascript_fundamentals/object/#getting-object-keys-and-values-using-objectentries","text":"Object.entries :To get the keys and values in an array const entries = Object . entries ( copyPerson ); console . log ( entries );","title":"Getting object keys and values using Object.entries()"},{"location":"javascript_fundamentals/object/#checking-properties-using-hasownproperty","text":"hasOwnProperty : To check if a specific key or property exist in an object console . log ( copyPerson . hasOwnProperty ( \"name\" )); console . log ( copyPerson . hasOwnProperty ( \"score\" ));","title":"Checking properties using hasOwnProperty()"},{"location":"javascript_fundamentals/promises/","text":"Promise We human give or receive a promise to do some activity at some point in time. If we keep the promise we make others happy but if we do not keep the promise, it may lead discontentment. Promise in JavaScript has something in common with the above examples. A Promise is a way to handle asynchronous operations in JavaScript. It allows handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future. A Promise is in one of these states: pending: initial state, neither fulfilled nor rejected. fulfilled: meaning that the operation completed successfully. rejected: meaning that the operation failed. A pending promise can either be fulfilled with a value, or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise's then method are called. (If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.) As the Promise.prototype.then() and Promise.prototype.catch() methods return promises, they can be chained. Callbacks To understand promise very well let us understand callback first. Let's see the following callbacks. From the following code blocks you will notice, the difference between callback and promises. call back Let us see a callback function which can take two parameters. The first parameter is err and the second is result. If the err parameter is false, there will not be error other wise it will return an error. In this case the err has a value and it will return the err block. //Callback const doSomething = ( callback ) => { setTimeout (() => { const skills = [ \"HTML\" , \"CSS\" , \"JS\" ]; callback ( \"It did not go well\" , skills ); }, 2000 ); }; const callback = ( err , result ) => { if ( err ) { return console . log ( err ); } return console . log ( result ); }; doSomething ( callback ); // after 2 seconds it will print It did not go well In this case the err is false and it will return the else block which is the result. const doSomething = ( callback ) => { setTimeout (() => { const skills = [ \"HTML\" , \"CSS\" , \"JS\" ]; callback ( false , skills ); }, 2000 ); }; doSomething (( err , result ) => { if ( err ) { return console . log ( err ); } return console . log ( result ); }); // after 2 seconds it will print the skills [ \"HTML\" , \"CSS\" , \"JS\" ] Promise constructor We can create a promise using the Promise constructor. We can create a new promise using the key word new followed by the word Promise and followed by a parenthesis. Inside the parenthesis, it takes a callback function. The promise callback function has two parameters which are the resolve and reject functions. // syntax const promise = new Promise (( resolve , reject ) => { resolve ( \"success\" ); reject ( \"failure\" ); }); // Promise const doPromise = new Promise (( resolve , reject ) => { setTimeout (() => { const skills = [ \"HTML\" , \"CSS\" , \"JS\" ]; if ( skills . length > 0 ) { resolve ( skills ); } else { reject ( \"Something wrong has happened\" ); } }, 2000 ); }); doPromise . then (( result ) => { console . log ( result ); }) . catch (( error ) => console . log ( error )); [ \"HTML\" , \"CSS\" , \"JS\" ] The above promise has been settled with resolve. Let us another example when the promise is settled with reject. // Promise const doPromise = new Promise (( resolve , reject ) => { setTimeout (() => { const skills = [ \"HTML\" , \"CSS\" , \"JS\" ]; if ( skills . includes ( \"Node\" )) { resolve ( \"fullstack developer\" ); } else { reject ( \"Something wrong has happened\" ); } }, 2000 ); }); doPromise . then (( result ) => { console . log ( result ); }) . catch (( error ) => console . error ( error )); Something wrong has happened Fetch API The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set. In this challenge we will use fetch to request url and APIS. In addition to that let us see demonstrate use case of promises in accessing network resources using the fetch API. const url = \"https://restcountries.com/v2/all\" ; // countries api fetch ( url ) . then (( response ) => response . json ()) // accessing the API data as JSON . then (( data ) => { // getting the data console . log ( data ); }) . catch (( error ) => console . error ( error )); // handling error if something wrong happens Async and Await Async and await is an elegant way to handle promises. It is easy to understand and it clean to write. const square = async function ( n ) { return n * n ; }; square ( 2 ); Promise { <resolved>: 4 } The word async in front of a function means that function will return a promise. The above square function instead of a value it returns a promise. How do we access the value from the promise? To access the value from the promise, we will use the keyword await . const square = async function ( n ) { return n * n ; }; const value = await square ( 2 ); console . log ( value ); 4 Now, as you can see from the above example writing async in front of a function create a promise and to get the value from a promise we use await. Async and await go together, one can not exist without the other. Let us fetch API data using both promise method and async and await method. promise const url = \"https://restcountries.com/v2/all\" ; fetch ( url ) . then (( response ) => response . json ()) . then (( data ) => { console . log ( data ); }) . catch (( error ) => console . error ( error )); async and await const fetchData = async () => { try { const response = await fetch ( url ); const countries = await response . json (); console . log ( countries ); } catch ( err ) { console . error ( err ); } }; console . log ( \"===== async and await\" ); fetchData ();","title":"Promise"},{"location":"javascript_fundamentals/promises/#promise","text":"We human give or receive a promise to do some activity at some point in time. If we keep the promise we make others happy but if we do not keep the promise, it may lead discontentment. Promise in JavaScript has something in common with the above examples. A Promise is a way to handle asynchronous operations in JavaScript. It allows handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future. A Promise is in one of these states: pending: initial state, neither fulfilled nor rejected. fulfilled: meaning that the operation completed successfully. rejected: meaning that the operation failed. A pending promise can either be fulfilled with a value, or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise's then method are called. (If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.) As the Promise.prototype.then() and Promise.prototype.catch() methods return promises, they can be chained.","title":"Promise"},{"location":"javascript_fundamentals/promises/#callbacks","text":"To understand promise very well let us understand callback first. Let's see the following callbacks. From the following code blocks you will notice, the difference between callback and promises. call back Let us see a callback function which can take two parameters. The first parameter is err and the second is result. If the err parameter is false, there will not be error other wise it will return an error. In this case the err has a value and it will return the err block. //Callback const doSomething = ( callback ) => { setTimeout (() => { const skills = [ \"HTML\" , \"CSS\" , \"JS\" ]; callback ( \"It did not go well\" , skills ); }, 2000 ); }; const callback = ( err , result ) => { if ( err ) { return console . log ( err ); } return console . log ( result ); }; doSomething ( callback ); // after 2 seconds it will print It did not go well In this case the err is false and it will return the else block which is the result. const doSomething = ( callback ) => { setTimeout (() => { const skills = [ \"HTML\" , \"CSS\" , \"JS\" ]; callback ( false , skills ); }, 2000 ); }; doSomething (( err , result ) => { if ( err ) { return console . log ( err ); } return console . log ( result ); }); // after 2 seconds it will print the skills [ \"HTML\" , \"CSS\" , \"JS\" ]","title":"Callbacks"},{"location":"javascript_fundamentals/promises/#promise-constructor","text":"We can create a promise using the Promise constructor. We can create a new promise using the key word new followed by the word Promise and followed by a parenthesis. Inside the parenthesis, it takes a callback function. The promise callback function has two parameters which are the resolve and reject functions. // syntax const promise = new Promise (( resolve , reject ) => { resolve ( \"success\" ); reject ( \"failure\" ); }); // Promise const doPromise = new Promise (( resolve , reject ) => { setTimeout (() => { const skills = [ \"HTML\" , \"CSS\" , \"JS\" ]; if ( skills . length > 0 ) { resolve ( skills ); } else { reject ( \"Something wrong has happened\" ); } }, 2000 ); }); doPromise . then (( result ) => { console . log ( result ); }) . catch (( error ) => console . log ( error )); [ \"HTML\" , \"CSS\" , \"JS\" ] The above promise has been settled with resolve. Let us another example when the promise is settled with reject. // Promise const doPromise = new Promise (( resolve , reject ) => { setTimeout (() => { const skills = [ \"HTML\" , \"CSS\" , \"JS\" ]; if ( skills . includes ( \"Node\" )) { resolve ( \"fullstack developer\" ); } else { reject ( \"Something wrong has happened\" ); } }, 2000 ); }); doPromise . then (( result ) => { console . log ( result ); }) . catch (( error ) => console . error ( error )); Something wrong has happened","title":"Promise constructor"},{"location":"javascript_fundamentals/promises/#fetch-api","text":"The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set. In this challenge we will use fetch to request url and APIS. In addition to that let us see demonstrate use case of promises in accessing network resources using the fetch API. const url = \"https://restcountries.com/v2/all\" ; // countries api fetch ( url ) . then (( response ) => response . json ()) // accessing the API data as JSON . then (( data ) => { // getting the data console . log ( data ); }) . catch (( error ) => console . error ( error )); // handling error if something wrong happens","title":"Fetch API"},{"location":"javascript_fundamentals/promises/#async-and-await","text":"Async and await is an elegant way to handle promises. It is easy to understand and it clean to write. const square = async function ( n ) { return n * n ; }; square ( 2 ); Promise { <resolved>: 4 } The word async in front of a function means that function will return a promise. The above square function instead of a value it returns a promise. How do we access the value from the promise? To access the value from the promise, we will use the keyword await . const square = async function ( n ) { return n * n ; }; const value = await square ( 2 ); console . log ( value ); 4 Now, as you can see from the above example writing async in front of a function create a promise and to get the value from a promise we use await. Async and await go together, one can not exist without the other. Let us fetch API data using both promise method and async and await method. promise const url = \"https://restcountries.com/v2/all\" ; fetch ( url ) . then (( response ) => response . json ()) . then (( data ) => { console . log ( data ); }) . catch (( error ) => console . error ( error )); async and await const fetchData = async () => { try { const response = await fetch ( url ); const countries = await response . json (); console . log ( countries ); } catch ( err ) { console . error ( err ); } }; console . log ( \"===== async and await\" ); fetchData ();","title":"Async and Await"},{"location":"javascript_fundamentals/scope/","text":"Scope Variable is the fundamental part in programming. We declare variable to store different data types. To declare a variable we use the key word var , let and const . A variable can declared at different scope. In this section we will see the scope, scope of variables when we use var or let. Variables scopes can be: Window Global Local Variable can be declared globally or locally or window scope. We will see both global and local scope. Anything declared without let, var or const is scoped at window level. Let us image we have a scope.js file. Window Scope Without using console.log() open your browser and check, you will see the value of a and b if you write a or b on the browser. That means a and b are already available in the window. //scope.js a = \"JavaScript\" ; // is a window scope this found anywhere b = 10 ; // this is a window scope variable function letsLearnScope () { console . log ( a , b ); if ( true ) { console . log ( a , b ); } } console . log ( a , b ); // accessible Global scope A globally declared variable can be accessed every where in the same file. But the term global is relative. It can be global to the file or it can be global relative to some block of codes. //scope.js let a = \"JavaScript\" ; // is a global scope it will be found anywhere in this file let b = 10 ; // is a global scope it will be found anywhere in this file function letsLearnScope () { console . log ( a , b ); // JavaScript 10, accessible if ( true ) { let a = \"Python\" ; let b = 100 ; console . log ( a , b ); // Python 100 } console . log ( a , b ); } letsLearnScope (); console . log ( a , b ); // JavaScript 10, accessible Local scope A variable declared as local can be accessed only in certain block code. //scope.js let a = \"JavaScript\" ; // is a global scope it will be found anywhere in this file let b = 10 ; // is a global scope it will be found anywhere in this file function letsLearnScope () { console . log ( a , b ); // JavaScript 10, accessible let c = 30 ; if ( true ) { // we can access from the function and outside the function but // variables declared inside the if will not be accessed outside the if block let a = \"Python\" ; let b = 20 ; let d = 40 ; console . log ( a , b , c ); // Python 20 30 } // we can not access c because c's scope is only the if block console . log ( a , b ); // JavaScript 10 } letsLearnScope (); console . log ( a , b ); // JavaScript 10, accessible Now, you have an understanding of scope. A variable declared with var only scoped to function but variable declared with let or const is block scope(function block, if block, loop etc). Block in JavaScript is a code in between two curly brackets ({}). //scope.js function letsLearnScope () { var gravity = 9.81 ; console . log ( gravity ); } // console.log(gravity), Uncaught ReferenceError: gravity is not defined if ( true ) { var gravity = 9.81 ; console . log ( gravity ); // 9.81 } console . log ( gravity ); // 9.81 for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( i ); // 1, 2, 3 } console . log ( i ); In ES6 and above there is let and const , so you will not suffer from the sneakiness of var . When we use let our variable is block scoped and it will not infect other parts of our code. //scope.js function letsLearnScope () { // you can use let or const, but gravity is constant I prefer to use const const gravity = 9.81 ; console . log ( gravity ); } // console.log(gravity), Uncaught ReferenceError: gravity is not defined if ( true ) { const gravity = 9.81 ; console . log ( gravity ); // 9.81 } // console.log(gravity), Uncaught ReferenceError: gravity is not defined for ( let i = 0 ; i < 3 ; i ++ ) { console . log ( i ); // 1, 2, 3 } // console.log(i), Uncaught ReferenceError: gravity is not defined The scope let and const is the same. The difference is only reassigning. We can not change or reassign the value of const variable. I would strongly suggest you to use let and const , by using let and const you will writ clean code and avoid hard to debug mistakes. As a rule of thumb, you can use let for any value which change, const for any constant value, and for array, object, arrow function and function expression.","title":"Scope"},{"location":"javascript_fundamentals/scope/#scope","text":"Variable is the fundamental part in programming. We declare variable to store different data types. To declare a variable we use the key word var , let and const . A variable can declared at different scope. In this section we will see the scope, scope of variables when we use var or let. Variables scopes can be: Window Global Local Variable can be declared globally or locally or window scope. We will see both global and local scope. Anything declared without let, var or const is scoped at window level. Let us image we have a scope.js file.","title":"Scope"},{"location":"javascript_fundamentals/scope/#window-scope","text":"Without using console.log() open your browser and check, you will see the value of a and b if you write a or b on the browser. That means a and b are already available in the window. //scope.js a = \"JavaScript\" ; // is a window scope this found anywhere b = 10 ; // this is a window scope variable function letsLearnScope () { console . log ( a , b ); if ( true ) { console . log ( a , b ); } } console . log ( a , b ); // accessible","title":"Window Scope"},{"location":"javascript_fundamentals/scope/#global-scope","text":"A globally declared variable can be accessed every where in the same file. But the term global is relative. It can be global to the file or it can be global relative to some block of codes. //scope.js let a = \"JavaScript\" ; // is a global scope it will be found anywhere in this file let b = 10 ; // is a global scope it will be found anywhere in this file function letsLearnScope () { console . log ( a , b ); // JavaScript 10, accessible if ( true ) { let a = \"Python\" ; let b = 100 ; console . log ( a , b ); // Python 100 } console . log ( a , b ); } letsLearnScope (); console . log ( a , b ); // JavaScript 10, accessible","title":"Global scope"},{"location":"javascript_fundamentals/scope/#local-scope","text":"A variable declared as local can be accessed only in certain block code. //scope.js let a = \"JavaScript\" ; // is a global scope it will be found anywhere in this file let b = 10 ; // is a global scope it will be found anywhere in this file function letsLearnScope () { console . log ( a , b ); // JavaScript 10, accessible let c = 30 ; if ( true ) { // we can access from the function and outside the function but // variables declared inside the if will not be accessed outside the if block let a = \"Python\" ; let b = 20 ; let d = 40 ; console . log ( a , b , c ); // Python 20 30 } // we can not access c because c's scope is only the if block console . log ( a , b ); // JavaScript 10 } letsLearnScope (); console . log ( a , b ); // JavaScript 10, accessible Now, you have an understanding of scope. A variable declared with var only scoped to function but variable declared with let or const is block scope(function block, if block, loop etc). Block in JavaScript is a code in between two curly brackets ({}). //scope.js function letsLearnScope () { var gravity = 9.81 ; console . log ( gravity ); } // console.log(gravity), Uncaught ReferenceError: gravity is not defined if ( true ) { var gravity = 9.81 ; console . log ( gravity ); // 9.81 } console . log ( gravity ); // 9.81 for ( var i = 0 ; i < 3 ; i ++ ) { console . log ( i ); // 1, 2, 3 } console . log ( i ); In ES6 and above there is let and const , so you will not suffer from the sneakiness of var . When we use let our variable is block scoped and it will not infect other parts of our code. //scope.js function letsLearnScope () { // you can use let or const, but gravity is constant I prefer to use const const gravity = 9.81 ; console . log ( gravity ); } // console.log(gravity), Uncaught ReferenceError: gravity is not defined if ( true ) { const gravity = 9.81 ; console . log ( gravity ); // 9.81 } // console.log(gravity), Uncaught ReferenceError: gravity is not defined for ( let i = 0 ; i < 3 ; i ++ ) { console . log ( i ); // 1, 2, 3 } // console.log(i), Uncaught ReferenceError: gravity is not defined The scope let and const is the same. The difference is only reassigning. We can not change or reassign the value of const variable. I would strongly suggest you to use let and const , by using let and const you will writ clean code and avoid hard to debug mistakes. As a rule of thumb, you can use let for any value which change, const for any constant value, and for array, object, arrow function and function expression.","title":"Local scope"},{"location":"javascript_fundamentals/setup/","text":"Setup I believe you have the motivation and a strong desire to be a developer, a computer and Internet. If you have those, then you have everything to get started. Install Node.js You may not need Node.js right now but you may need it for later. Install node.js . After downloading double click and install We can check if node is installed on our local machine by opening our device terminal or command prompt. asabeneh $ node -v v12.14.0 When making this tutorial I was using Node version 12.14.0, but now the recommended version of Node.js for download is v14.17.6, by the time you use this material you may have a higher Node.js version. Browsers and Engines There are many browsers out there. However, I strongly recommend Firefox. Following engines are used by the browsers: V8 from Google is the most used JavaScript engine. Google Chrome and the many other Chromium-based browsers use it, as do applications built with CEF, Electron, or any other framework that embeds Chromium. Other uses include the Node.js and Deno runtime systems. SpiderMonkey is developed by Mozilla for use in Firefox and its forks. The GNOME Shell uses it for extension support. JavaScriptCore is Apple's engine for its Safari browser. Other WebKit-based browsers also use it. KJS from KDE was the starting point for its development.[7] Chakra is the engine of the Internet Explorer browser. It was also forked by Microsoft for the original Edge browser, but Edge was later rebuilt as a Chromium-based browser and thus now uses V8.[8][9] Installing Firefox Install Firefox if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications. Opening Developer Tools You can open Developer Tools either by clicking three dots at the top right corner of the browser, selecting More tools -> Developer tools or using a keyboard shortcut. I prefer using shortcuts. To open the Firefox Developer Tools using a keyboard shortcut. Mac Command+Option+I Windows/Linux: Ctl+Shift+I After you open the Firefox Developer Tools, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Spidermonkey engine changes your JavaScript code to machine code. Console.log To write our first JavaScript code, we used a built-in function console.log() . We passed an argument as input data, and the function displays the output. We passed 'Hello, World' as input data or argument in the console.log() function. console . log ( \"Hello, World!\" ); Console.log with Multiple Arguments The console.log() function can take multiple parameters separated by commas. The syntax looks like as follows: console.log(param1, param2, param3) console . log ( \"Hello\" , \"World\" , \"!\" ); console . log ( \"HAPPY\" , \"NEW\" , \"YEAR\" , 2020 ); console . log ( \"Welcome\" , \"to\" , 30 , \"Days\" , \"Of\" , \"JavaScript\" ); As you can see from the snippet code above, console.log() can take multiple arguments. Congratulations! You wrote your first JavaScript code using console.log() .","title":"Setup"},{"location":"javascript_fundamentals/setup/#setup","text":"I believe you have the motivation and a strong desire to be a developer, a computer and Internet. If you have those, then you have everything to get started.","title":"Setup"},{"location":"javascript_fundamentals/setup/#install-nodejs","text":"You may not need Node.js right now but you may need it for later. Install node.js . After downloading double click and install We can check if node is installed on our local machine by opening our device terminal or command prompt. asabeneh $ node -v v12.14.0 When making this tutorial I was using Node version 12.14.0, but now the recommended version of Node.js for download is v14.17.6, by the time you use this material you may have a higher Node.js version.","title":"Install Node.js"},{"location":"javascript_fundamentals/setup/#browsers-and-engines","text":"There are many browsers out there. However, I strongly recommend Firefox. Following engines are used by the browsers: V8 from Google is the most used JavaScript engine. Google Chrome and the many other Chromium-based browsers use it, as do applications built with CEF, Electron, or any other framework that embeds Chromium. Other uses include the Node.js and Deno runtime systems. SpiderMonkey is developed by Mozilla for use in Firefox and its forks. The GNOME Shell uses it for extension support. JavaScriptCore is Apple's engine for its Safari browser. Other WebKit-based browsers also use it. KJS from KDE was the starting point for its development.[7] Chakra is the engine of the Internet Explorer browser. It was also forked by Microsoft for the original Edge browser, but Edge was later rebuilt as a Chromium-based browser and thus now uses V8.[8][9]","title":"Browsers and Engines"},{"location":"javascript_fundamentals/setup/#installing-firefox","text":"Install Firefox if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.","title":"Installing Firefox"},{"location":"javascript_fundamentals/setup/#opening-developer-tools","text":"You can open Developer Tools either by clicking three dots at the top right corner of the browser, selecting More tools -> Developer tools or using a keyboard shortcut. I prefer using shortcuts. To open the Firefox Developer Tools using a keyboard shortcut. Mac Command+Option+I Windows/Linux: Ctl+Shift+I After you open the Firefox Developer Tools, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Spidermonkey engine changes your JavaScript code to machine code.","title":"Opening Developer Tools"},{"location":"javascript_fundamentals/setup/#consolelog","text":"To write our first JavaScript code, we used a built-in function console.log() . We passed an argument as input data, and the function displays the output. We passed 'Hello, World' as input data or argument in the console.log() function. console . log ( \"Hello, World!\" );","title":"Console.log"},{"location":"javascript_fundamentals/setup/#consolelog-with-multiple-arguments","text":"The console.log() function can take multiple parameters separated by commas. The syntax looks like as follows: console.log(param1, param2, param3) console . log ( \"Hello\" , \"World\" , \"!\" ); console . log ( \"HAPPY\" , \"NEW\" , \"YEAR\" , 2020 ); console . log ( \"Welcome\" , \"to\" , 30 , \"Days\" , \"Of\" , \"JavaScript\" ); As you can see from the snippet code above, console.log() can take multiple arguments. Congratulations! You wrote your first JavaScript code using console.log() .","title":"Console.log with Multiple Arguments"},{"location":"javascript_fundamentals/variables/","text":"Variables We use var , let and const to declare a variable. The var is functions scope, however let and const are block scope. In this challenge we use ES6 and above features of JavaScript. Avoid using var . let firstName = \"Asabeneh\" ; firstName = \"Eyob\" ; const PI = 3.14 ; // Not allowed to reassign PI to a new value // PI = 3.","title":"Variables"},{"location":"javascript_fundamentals/variables/#variables","text":"We use var , let and const to declare a variable. The var is functions scope, however let and const are block scope. In this challenge we use ES6 and above features of JavaScript. Avoid using var . let firstName = \"Asabeneh\" ; firstName = \"Eyob\" ; const PI = 3.14 ; // Not allowed to reassign PI to a new value // PI = 3.","title":"Variables"},{"location":"react/chakra-ui/","text":"Chakra UI TBD","title":"Chakra UI"},{"location":"react/chakra-ui/#chakra-ui","text":"TBD","title":"Chakra UI"},{"location":"react/component_lifecycles/","text":"Component Lifecycles Here are the component lifecycles listed. Let's talk about that a little bit deeper: import * as ReactDOM from \"react-dom/client\"; function Component({ prop }) { const [state, setState] = useState(); React.useEffect(() => { console.log(\"this runs only on component mount\"); return () => { console.log(\"this run when the component unmounts\"); }; }, []); React.useEffect(() => { console.log(\"this runs on every update of prop or state\"); }, [prop, state]); return <div></div>; } const root = createRoot(<Component />); root.render(document.getElementById(\"app\")); // <-- first time render","title":"Component Lifecycles"},{"location":"react/component_lifecycles/#component-lifecycles","text":"Here are the component lifecycles listed. Let's talk about that a little bit deeper: import * as ReactDOM from \"react-dom/client\"; function Component({ prop }) { const [state, setState] = useState(); React.useEffect(() => { console.log(\"this runs only on component mount\"); return () => { console.log(\"this run when the component unmounts\"); }; }, []); React.useEffect(() => { console.log(\"this runs on every update of prop or state\"); }, [prop, state]); return <div></div>; } const root = createRoot(<Component />); root.render(document.getElementById(\"app\")); // <-- first time render","title":"Component Lifecycles"},{"location":"react/components/","text":"Components A React component is a small, reusable code, which is responsible for one part of the application UI. A React application is an aggregation of components. React can help us to build reusable components. The following diagram shows different components. All the components have different border colors. In React we assemble different components together to create an application. We use JavaScript functions or classes to make components. If we use a function, the component will be a functional component, but if we use a class, the component will be a class-based component. Components can be: Functional Component / Presentational Component / Stateless Component / Dumb Component Class Component / Container Component / Stateful Component / Smart Component The classification of components above does not work for the latest version of React, but it is good to know the former definition and how the previous versions work. So, let us change all the JSX to components. Components in React are JavaScript functions, that return a JSX. Component name must start with an uppercase, and if the name is two words, it should be CamelCase - a camel with two humps. In general class components will fade away in the future, therefore use only functional components ! Big picture of components In the previous section we agreed, that a website or an application is made of buttons, forms, texts, media objects, header, section, article and footer. If we have a million-dollar button, we can use this button all the time, instead of recreating it all over again, whenever we need a button. The same goes for input fields, forms, header or footer. That is where the power of the component comes. In the following diagram, the header, main and footer are components. Inside the main there is also a user card component and a text section component. All the different colors represent different components. How many colors do you see? Each color represent a single component. We have four components in this diagram, but they are reused multiple times. Creating React Components Using a JavaScript function, we can make a functional React component. function ComponentName() { return <p>Content</p>; } The following expressions are a JSX element. function Header() { const title = \"Getting Started React\"; const author = { firstName: \"Michael\", lastName: \"Bykovski\", }; const content = ( <header> <div> <h1>Welcome to Webengineering</h1> <h2>{title}</h2> <p> Instructor: {author.firstName} {author.lastName} </p> </div> </header> ); return content; } function Header() { return ( <header> <div> <h1>Welcome to Webengineering</h1> <h2>Getting Started React</h2> <p>Instructor: Michael Bykovski</p> </div> </header> ); } Rendering components Now, lets change all the JSX elements we had to components. When we call JSX element we use curly brackets and when we call components we do as follows <ComponentName /> . If we pass an attribute, when we call the component name, we call it props <ComponentName propsName={'propsValue'} /> . Let's render first the Header component. index.js import React from \"react\"; import ReactDOM from \"react-dom\"; function Header() ( <header> <div> <h1>Welcome to Web Engineering</h1> </div> </header> ); const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render(<React.StrictMode><Header/></React.StrictMode>); Now, let's create an App component, that will wrap the Header, Main and Footer. Then the App component will be render on the DOM. index.js import React from \"react\"; import ReactDOM from \"react-dom/client\"; const author = { firstName: \"Michael\", lastName: \"Bykovski\", }; function Header() { const welcome = \"Welcome to Webengineering\"; const title = \"Getting Started React\"; const subtitle = \"JavaScript Library\"; const date = \"18. August 2022\"; return ( <header> <div> <h1>{welcome}</h1> <h2>{title}</h2> <h3>{subtitle}</h3> <p> Instructor: {author.firstName} {author.lastName} </p> <small>Date: {date}</small> </div> </header> ); } function Main() { const numOne = 3; const numTwo = 2; const result = ( <p> {numOne} + {numTwo} = {numOne + numTwo} </p> ); const yearBorn = 1994; const currentYear = new Date().getFullYear(); const age = currentYear - yearBorn; const personAge = ( <p> {author.firstName} {author.lastName} is {age} years old </p> ); const techs = [\"HTML\", \"CSS\", \"JavaScript\"]; const techsFormatted = techs.map((tech) => <li>{tech}</li>); return ( <main> <div> <p> Prerequisite to get started{\" \"} <strong> <em>react.js</em> </strong> : </p> <ul>{techsFormatted}</ul> {result} {personAge} </div> </main> ); } function Footer() { const copyRight = \"Copyright 2022\"; return ( <footer> <div className=\"footer-wrapper\"> <p>{copyRight}</p> </div> </footer> ); } function App() { return ( <div> <Header /> <Main /> <Footer /> </div> ); } const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render( <React.StrictMode> <App /> </React.StrictMode> ); Injecting data to JSX in React Component So far, we used static data on the JSX elements. Now let's pass different data types as dynamic data. The dynamic data could be strings, numbers, booleans, arrays or objects. Let us see each of the data types step by step. To inject data to a JSX we use the {} bracket. In this section we inject only strings import React from \"react\" ; import ReactDOM from \"react-dom\" ; const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const firstName = \"Asabeneh\" ; const lastName = \"Yetayeh\" ; const date = \"Oct 3, 2020\" ; // JSX element, header const header = () => { return ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { firstName } { lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); }; const rootElement = document . getElementById ( \"root\" ); // we render the App component using the ReactDOM package ReactDOM . render ( < Header /> , rootElement ); Further on Functional components Let's create more components. What is the smallest size of a component? A component that returns only a single HTML as JSX is considered as a small component. A button component or an alert box component, or just an input field component. const Button = () => < button > action < /button>; The Button component is made of a single HTML button element. Let's style this button using JavaScript style object. All CSS properties should be camelCase to make a JavaScript CSS object. If we pass a number without unit as CSS value, it is considered as px. See the example below. const buttonStyles = { padding : \"10px 20px\" , background : \"rgb(0, 255, 0\" , border : \"none\" , borderRadius : 5 , }; const Button = () => < button style = { buttonStyles } > action < /button>; The Button component is a dumb component, because it does not take any parameters and we cannot change the action text dynamically. We need to pass props to the button, to change the value dynamically. We will see props in the next section. Before we close today's lesson let's make another, more functional component, which displays a random hexadecimal number. import React from \"react\"; import ReactDOM from \"react-dom/client\"; // Hexadecimal color generator const hexaColor = () => { let str = \"0123456789abcdef\"; let color = \"\"; for (let i = 0; i < 6; i++) { let index = Math.floor(Math.random() * str.length); color += str[index]; } return \"#\" + color; }; const HexaColor = () => <div>{hexaColor()}</div>; const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render( <React.StrictMode> <HexaColor /> </React.StrictMode> );","title":"Components"},{"location":"react/components/#components","text":"A React component is a small, reusable code, which is responsible for one part of the application UI. A React application is an aggregation of components. React can help us to build reusable components. The following diagram shows different components. All the components have different border colors. In React we assemble different components together to create an application. We use JavaScript functions or classes to make components. If we use a function, the component will be a functional component, but if we use a class, the component will be a class-based component. Components can be: Functional Component / Presentational Component / Stateless Component / Dumb Component Class Component / Container Component / Stateful Component / Smart Component The classification of components above does not work for the latest version of React, but it is good to know the former definition and how the previous versions work. So, let us change all the JSX to components. Components in React are JavaScript functions, that return a JSX. Component name must start with an uppercase, and if the name is two words, it should be CamelCase - a camel with two humps. In general class components will fade away in the future, therefore use only functional components !","title":"Components"},{"location":"react/components/#big-picture-of-components","text":"In the previous section we agreed, that a website or an application is made of buttons, forms, texts, media objects, header, section, article and footer. If we have a million-dollar button, we can use this button all the time, instead of recreating it all over again, whenever we need a button. The same goes for input fields, forms, header or footer. That is where the power of the component comes. In the following diagram, the header, main and footer are components. Inside the main there is also a user card component and a text section component. All the different colors represent different components. How many colors do you see? Each color represent a single component. We have four components in this diagram, but they are reused multiple times.","title":"Big picture of components"},{"location":"react/components/#creating-react-components","text":"Using a JavaScript function, we can make a functional React component. function ComponentName() { return <p>Content</p>; } The following expressions are a JSX element. function Header() { const title = \"Getting Started React\"; const author = { firstName: \"Michael\", lastName: \"Bykovski\", }; const content = ( <header> <div> <h1>Welcome to Webengineering</h1> <h2>{title}</h2> <p> Instructor: {author.firstName} {author.lastName} </p> </div> </header> ); return content; } function Header() { return ( <header> <div> <h1>Welcome to Webengineering</h1> <h2>Getting Started React</h2> <p>Instructor: Michael Bykovski</p> </div> </header> ); }","title":"Creating React Components"},{"location":"react/components/#rendering-components","text":"Now, lets change all the JSX elements we had to components. When we call JSX element we use curly brackets and when we call components we do as follows <ComponentName /> . If we pass an attribute, when we call the component name, we call it props <ComponentName propsName={'propsValue'} /> . Let's render first the Header component. index.js import React from \"react\"; import ReactDOM from \"react-dom\"; function Header() ( <header> <div> <h1>Welcome to Web Engineering</h1> </div> </header> ); const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render(<React.StrictMode><Header/></React.StrictMode>); Now, let's create an App component, that will wrap the Header, Main and Footer. Then the App component will be render on the DOM. index.js import React from \"react\"; import ReactDOM from \"react-dom/client\"; const author = { firstName: \"Michael\", lastName: \"Bykovski\", }; function Header() { const welcome = \"Welcome to Webengineering\"; const title = \"Getting Started React\"; const subtitle = \"JavaScript Library\"; const date = \"18. August 2022\"; return ( <header> <div> <h1>{welcome}</h1> <h2>{title}</h2> <h3>{subtitle}</h3> <p> Instructor: {author.firstName} {author.lastName} </p> <small>Date: {date}</small> </div> </header> ); } function Main() { const numOne = 3; const numTwo = 2; const result = ( <p> {numOne} + {numTwo} = {numOne + numTwo} </p> ); const yearBorn = 1994; const currentYear = new Date().getFullYear(); const age = currentYear - yearBorn; const personAge = ( <p> {author.firstName} {author.lastName} is {age} years old </p> ); const techs = [\"HTML\", \"CSS\", \"JavaScript\"]; const techsFormatted = techs.map((tech) => <li>{tech}</li>); return ( <main> <div> <p> Prerequisite to get started{\" \"} <strong> <em>react.js</em> </strong> : </p> <ul>{techsFormatted}</ul> {result} {personAge} </div> </main> ); } function Footer() { const copyRight = \"Copyright 2022\"; return ( <footer> <div className=\"footer-wrapper\"> <p>{copyRight}</p> </div> </footer> ); } function App() { return ( <div> <Header /> <Main /> <Footer /> </div> ); } const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render( <React.StrictMode> <App /> </React.StrictMode> );","title":"Rendering components"},{"location":"react/components/#injecting-data-to-jsx-in-react-component","text":"So far, we used static data on the JSX elements. Now let's pass different data types as dynamic data. The dynamic data could be strings, numbers, booleans, arrays or objects. Let us see each of the data types step by step. To inject data to a JSX we use the {} bracket. In this section we inject only strings import React from \"react\" ; import ReactDOM from \"react-dom\" ; const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const firstName = \"Asabeneh\" ; const lastName = \"Yetayeh\" ; const date = \"Oct 3, 2020\" ; // JSX element, header const header = () => { return ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { firstName } { lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); }; const rootElement = document . getElementById ( \"root\" ); // we render the App component using the ReactDOM package ReactDOM . render ( < Header /> , rootElement );","title":"Injecting data to JSX in React Component"},{"location":"react/components/#further-on-functional-components","text":"Let's create more components. What is the smallest size of a component? A component that returns only a single HTML as JSX is considered as a small component. A button component or an alert box component, or just an input field component. const Button = () => < button > action < /button>; The Button component is made of a single HTML button element. Let's style this button using JavaScript style object. All CSS properties should be camelCase to make a JavaScript CSS object. If we pass a number without unit as CSS value, it is considered as px. See the example below. const buttonStyles = { padding : \"10px 20px\" , background : \"rgb(0, 255, 0\" , border : \"none\" , borderRadius : 5 , }; const Button = () => < button style = { buttonStyles } > action < /button>; The Button component is a dumb component, because it does not take any parameters and we cannot change the action text dynamically. We need to pass props to the button, to change the value dynamically. We will see props in the next section. Before we close today's lesson let's make another, more functional component, which displays a random hexadecimal number. import React from \"react\"; import ReactDOM from \"react-dom/client\"; // Hexadecimal color generator const hexaColor = () => { let str = \"0123456789abcdef\"; let color = \"\"; for (let i = 0; i < 6; i++) { let index = Math.floor(Math.random() * str.length); color += str[index]; } return \"#\" + color; }; const HexaColor = () => <div>{hexaColor()}</div>; const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render( <React.StrictMode> <HexaColor /> </React.StrictMode> );","title":"Further on Functional components"},{"location":"react/conditional_rendering/","text":"Conditional Rendering As we can understand from the term, conditional rendering is a way to render different JSX or component at different condition. We can implement conditional rendering using regular if and else statement, ternary operator and &&. Let's implement a different conditional rendering. Conditional Rendering using If and Else statement Exercises Exercises: Level 1 What is conditional rendering? How do you implement conditional rendering? Which method of conditional rendering do you prefer to use? Exercises: Level 2 Make a single page application which changes the body of the background based on the season of the year(Autumn, Winter, Spring, Summer) Make a single page application which change the body of the background based on the time of the day(Morning, Noon, Evening, Night) Exercises: Level 3","title":"Conditional Rendering"},{"location":"react/conditional_rendering/#conditional-rendering","text":"As we can understand from the term, conditional rendering is a way to render different JSX or component at different condition. We can implement conditional rendering using regular if and else statement, ternary operator and &&. Let's implement a different conditional rendering.","title":"Conditional Rendering"},{"location":"react/conditional_rendering/#conditional-rendering-using-if-and-else-statement","text":"","title":"Conditional Rendering using If and Else statement"},{"location":"react/conditional_rendering/#exercises","text":"","title":"Exercises"},{"location":"react/conditional_rendering/#exercises-level-1","text":"What is conditional rendering? How do you implement conditional rendering? Which method of conditional rendering do you prefer to use?","title":"Exercises: Level 1"},{"location":"react/conditional_rendering/#exercises-level-2","text":"Make a single page application which changes the body of the background based on the season of the year(Autumn, Winter, Spring, Summer) Make a single page application which change the body of the background based on the time of the day(Morning, Noon, Evening, Night)","title":"Exercises: Level 2"},{"location":"react/conditional_rendering/#exercises-level-3","text":"","title":"Exercises: Level 3"},{"location":"react/context/","text":"Context Context is a very important tool to pass states and props to underlying components.","title":"Context"},{"location":"react/context/#context","text":"Context is a very important tool to pass states and props to underlying components.","title":"Context"},{"location":"react/controlled_versus_uncontrolled/","text":"Controlled vs. Uncontrolled If a React component has an element which changes by itself, it's called uncontrolled. If you handle the rendering with React it's called controlled. Examples Controlled You influence controlled inputs by using state and props. Uncontrolled You can influence uncontrolled inputs by using ref and manipulating the DOM element directly. Pitfalls It often happens, when you define a state with an empty default value and use this state as value for your input field. Then you set this state via the onChange method of the input field. What happens then is that a value is being set from undefined -> string . If a prop is undefined it's not defined and there it won't be considered in the DOM element. If you then set the prop the element changes from an uncontrolled to a controlled element. React warns you about this problem. Enter text in the following textfield and check the console.","title":"Controlled vs. Uncontrolled"},{"location":"react/controlled_versus_uncontrolled/#controlled-vs-uncontrolled","text":"If a React component has an element which changes by itself, it's called uncontrolled. If you handle the rendering with React it's called controlled.","title":"Controlled vs. Uncontrolled"},{"location":"react/controlled_versus_uncontrolled/#examples","text":"","title":"Examples"},{"location":"react/controlled_versus_uncontrolled/#controlled","text":"You influence controlled inputs by using state and props.","title":"Controlled"},{"location":"react/controlled_versus_uncontrolled/#uncontrolled","text":"You can influence uncontrolled inputs by using ref and manipulating the DOM element directly.","title":"Uncontrolled"},{"location":"react/controlled_versus_uncontrolled/#pitfalls","text":"It often happens, when you define a state with an empty default value and use this state as value for your input field. Then you set this state via the onChange method of the input field. What happens then is that a value is being set from undefined -> string . If a prop is undefined it's not defined and there it won't be considered in the DOM element. If you then set the prop the element changes from an uncontrolled to a controlled element. React warns you about this problem. Enter text in the following textfield and check the console.","title":"Pitfalls"},{"location":"react/custom_hooks/","text":"Custom Hooks Lets image you want to have a scroll tracker in a lot of components, but you don't want to implement it in every component. Therefore you can implement a custom hook to outsource the logic and have a \"reactive\" hook.","title":"Custom Hooks"},{"location":"react/custom_hooks/#custom-hooks","text":"Lets image you want to have a scroll tracker in a lot of components, but you don't want to implement it in every component. Therefore you can implement a custom hook to outsource the logic and have a \"reactive\" hook.","title":"Custom Hooks"},{"location":"react/events/","text":"Events What is an event? An event is an action or occurrence recognized by a software. To make an event more clear let's use the daily activities we do when we use a computer such as clicking on a button, hover on an image, pressing a keyboard, scrolling the mouse wheel and etc. The react documentation has already a detail note about events . Handling events in React is very similar to handling elements on DOM elements using pure JavaScript. Some of the syntax difference between handling event in React and pure JavaScript: React events are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string. Let's see some examples to understand event handling. Event handling in HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> </ head > < body > < button > onclick=\"greetPeople()\">Greet People </ button > < script > const greetPeople = () => { alert ( \"Welcome\" ); }; </ script > </ body > </ html > In React, it is slightly different import React from \"react\" ; // if it is functional components const App = () => { const greetPeople = ( event ) => { alert ( \"Welcome\" ); }; return < button onClick = { greetPeople } > Welcome < /button>; }; Another difference between HTML and React event is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. For example, with plain HTML, to prevent the default link behavior of opening a new page, you can write: Plain HTML < a href = \"#\" onclick = \"console.log('The link was clicked.'); return false\" > Click me </ a > However, in React it could be as follows:","title":"Events"},{"location":"react/events/#events","text":"","title":"Events"},{"location":"react/events/#what-is-an-event","text":"An event is an action or occurrence recognized by a software. To make an event more clear let's use the daily activities we do when we use a computer such as clicking on a button, hover on an image, pressing a keyboard, scrolling the mouse wheel and etc. The react documentation has already a detail note about events . Handling events in React is very similar to handling elements on DOM elements using pure JavaScript. Some of the syntax difference between handling event in React and pure JavaScript: React events are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string. Let's see some examples to understand event handling. Event handling in HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> </ head > < body > < button > onclick=\"greetPeople()\">Greet People </ button > < script > const greetPeople = () => { alert ( \"Welcome\" ); }; </ script > </ body > </ html > In React, it is slightly different import React from \"react\" ; // if it is functional components const App = () => { const greetPeople = ( event ) => { alert ( \"Welcome\" ); }; return < button onClick = { greetPeople } > Welcome < /button>; }; Another difference between HTML and React event is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. For example, with plain HTML, to prevent the default link behavior of opening a new page, you can write: Plain HTML < a href = \"#\" onclick = \"console.log('The link was clicked.'); return false\" > Click me </ a > However, in React it could be as follows:","title":"What is an event?"},{"location":"react/fetch_and_useQuery/","text":"Requests and Responses To retrieve data from a server, you can use HTTP. The browser has already a pretty \"okayish\" request client called fetch . Fetch React Query Let's build it from scratch! Installation","title":"Requests and Responses"},{"location":"react/fetch_and_useQuery/#requests-and-responses","text":"To retrieve data from a server, you can use HTTP. The browser has already a pretty \"okayish\" request client called fetch .","title":"Requests and Responses"},{"location":"react/fetch_and_useQuery/#fetch","text":"","title":"Fetch"},{"location":"react/fetch_and_useQuery/#react-query","text":"Let's build it from scratch! Installation","title":"React Query"},{"location":"react/forms/","text":"Forms Forms are important to save input from a user and JavaScript was introduced back in the late 90s, to validate input data. Let's first check an example: React Hook Forms React Hook Forms is the goto library for React forms Link . It brings a lot of nice functionality like error handling, states and watches.","title":"Forms"},{"location":"react/forms/#forms","text":"Forms are important to save input from a user and JavaScript was introduced back in the late 90s, to validate input data. Let's first check an example:","title":"Forms"},{"location":"react/forms/#react-hook-forms","text":"React Hook Forms is the goto library for React forms Link . It brings a lot of nice functionality like error handling, states and watches.","title":"React Hook Forms"},{"location":"react/getting_started/","text":"Getting Started This section covers prerequisites to get started with React. You should have a good understanding of the following technologies: HTML CSS JavaScript If you have the skills mentioned above, you will enjoy doing React. The 30 Days Of React challenge contains everything you need to know about react. In every section, it has some exercises and mini-projects, and it is recommended to work on them. This 30 Days Of React challenge will help you learn the latest version of React and the old version, step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples and many hands-on exercises. This challenge is designed for beginners and professionals who want to build a web application using React and JavaScript. Once in a while you may need different dummy data to work with React. You can use the following dummy data generator to generate different data. 1. What is React? React is a JavaScript library for building a reusable user interface(UI). It was initially released on May 29, 2013. The current version is 18.x.x and it is stable. React was created by Facebook. React makes creating UI components very easy. The official React documentation can be found here . When we work with React we do not interact directly with the DOM. React has its own way to handle the DOM(Document Object Model) manipulation. React uses its virtual DOM to make new changes and it updates only the element, that needs changing. Do not directly interact with DOM when you build a React Application and leave the DOM manipulation job for the React virtual DOM. A web application, or a website, is made of buttons, links, forms with different input fields, header, footer, sections, articles, texts, images, audios, videos and boxes with different shapes. We use react to make a reusable UI components of a website. To summarize: React was released in May 2013 React was created by Facebook React is a JavaScript library for building user interfaces React is used to build single page applications - An application which has only one HTML page. React allows us to create reusable UI components React latest release is 18.x.x React versions React official documentation can be found here 2. Why React? React is one of the most popular JavaScript libraries. Many developers and companies have been using it for the last couple of years. Its popularity has been growing fast and it has a huge community. How do we measure popularity? One measure of popularity could be GitHub repository stars, watchers and forks. Let us compare the popularity of React and Vue . As of today, the popularity between the two most popular JavaScript looks like as shown on the diagram. From the diagram, you can speculate the most popular JavaScript library. You may look at the number of watchers, stars and forks for both React and Vue. These alone will not be a very good measure of popularity, but still it tells a little bit about the popularity of the two technologies. If I have to recommend another JavaScript library next to React, it would be Vue.js. React vs Vue popularity in October 2020 React Official GitHub Repository Vue Official GitHub Repository Angular Official GitHub Repository Why we choose to use React ? We use it because of the following reasons: fast modular scalable flexible big community and popular open source High job opportunity 3. JSX JSX stands for JavaScript XML. JSX allows us to write HTML elements with JavaScript code. An HTML element has an opening and closing tags, content, and attribute in the opening tag. However, some HTML elements may not have content and a closing tag - they are self closing elements. To create HTML elements in React we do not use the createElement() instead we just use JSX elements. Therefore, JSX makes it easier to write and add HTML elements in React. JSX will be converted to JavaScript on browser using a transpiler - babel.js . Babel is a library which transpiles JSX to pure JavaScript and latest JavaScript to older version. See the JSX code below. // JSX syntax // we don't need to use quotes with JSX const jsxElement = < h1 > I am a JSX element < /h1>; const welcome = < h1 > Welcome to 30 Days of React Challenge < /h1>; const data = < small > Oct 2 , 2020 < /small>; The above strange looking code seems like JavaScript and it seems like , but it is not JavaScript and it seems like HTML but not completely an HTML element. It is a mix of JavaScript and an HTML elements. JSX can allow us to use HTML in JavaScript. The HTML element in the JSX above is h1 and small . JSX Element As you have seen in the example above, JSX has a JavaScript and HTML like syntax. JSX element could be a single HTML element or many HTML elements wrapped in a parent HTML element. This JSX element has only one HTML element which is h1 . const jsxElement = < h1 > I am a JSX element < /h1>; / / JS with HTML Let's make more JSX elements by declaring a new variable named title and content inside h2 . const title = < h2 > Getting Started React < /h2>; Let us add a subtitles and other contents to this JSX element by adding additional HTML elements. Every HTML element should be wrapped by an outer HTML element to create a valid JSX element. The name title variable also should be changed to header because our JSX element is containing almost all of the header of the application. const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < /header> ); Let us keep adding more elements. Additional HTML elements to display the author name and year. const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); As you can see the header element is a parent element for all the inner HTML elements and JSX must be wrapped by an outer parent element. Without the header HTML element or other parent HTML element the above JSX is invalid. Commenting a JSX element We comment codes for different reasons and it is also good to know how to comment out JSX elements in React. { /* <header> <h1>Welcome to 30 Days Of React</h1> <h2>Getting Started React</h2> <h3>JavaScript Library</h3> <p>Asabeneh Yetayeh</p> <small>Oct 2, 2020</small> </header> */ } Rendering a JSX Element To render a JSX element to HTML document, we should first create an index HTML. The index.html is the only HTML file you will have in any React Application. That is why we say that every React Application is a single page application. Let us create an index.html file. We can get started with React in two ways - either by using CDN or create-react-app. The create-react-app creates a React project boilerplate outbox and because of that, many people do have a hard time to understand how React works. In order to make things clear for absolute beginners I would like to start with a CDN. We use CDN only in this section and we will use the create-reap-app in the rest of the challenge and I also recommend you to use only create-react-app all the time. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script ></ script > </ body > </ html > As you can see from the above index.html, we have one div with a class root and script. The root div is the gateway to connect all react components to the index.html. In the script tag we will write our JavaScript, but the script type will be babel . Babel will transpile the react JSX to pure JavaScript on the browser. Let us add babel to the script. Inside the babel, we can write any pure JavaScript, JSX and in general any React code. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // our code goes here </ script > </ body > </ html > The babel library is linked to our document and now we can make use of it. The next step is importing React and ReactDOM using CDN or link. In order to link React and ReactDOM, we attach both packages from CDN to the body of index.html. To test if React is linked to the index.html, try to check it by doing console.log(React). Open the browser console and you should get an object. If you see an object containing React methods then you managed to link your project with React CDN and you are ready to use React. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > console . log ( React ); </ script > </ body > </ html > Now the index.html has everything we need to write React code. Let us get the root element using document.querySelect('.root') and assign it to a variable name rootElement. The is the only place we directly interact with DOM. Now, you knew JSX and JSX element. Let us render the JSX element on the browser, in order to do so we need the React and ReactDOM library. In addition to the React and ReactDOM we need babel to transpile the JSX to JavaScript code. The ReactDOM package has a method render. The render method takes two arguments:a JSX element or a component and the root document. See the code below. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element const jsxElement = < h1 > I am a JSX element < /h1>; // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two arguments ReactDOM . render ( jsxElement , rootElement ); </ script > </ body > </ html > Let us render more content. To render more content, the JSX element should have more HTML elements. For instance, we can create a header of a website and header may have a title, subtitle, author or date etc. Remember, we can render only one JSX element at a time. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two arguments ReactDOM . render ( header , rootElement ); </ script > </ body > </ html > We have created a JSX element for the header of the website. How about the main and the footer for the website? Similar to the header, let us create a JSX element for the main and the footer. JSX element for the main part of the website. // JSX element const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); JSX element for the footer part of the website. // JSX element const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); Now, we have three JSX elements: the header, main and footer. The best way to render all of the three JSX elements is by wrapping them all in a parent JSX element or putting them in an array. To include JSX element inside another JSX element we use the curly bracket, {} and call the name of the JSX inside the curly bracket. // JSX element for the header part of the website const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // JSX element for the main part of the website const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); // JSX element for the footer part of the website const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); // JSX element which contain all, it is a container or parent const app = ( < div > { header } { main } { footer } < /div> ); Now, let us put everything together and render it to the browser. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // JSX element, main const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); // JSX element, footer const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); // JSX element, app, a container or a parent const app = ( < div > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two argument ReactDOM . render ( app , rootElement ); // or // ReactDOM.render([header, main, footer], rootElement) </ script > </ body > </ html > Let us apply some style to our JSX elements and see the result. . Now, lets us apply style the header part only Live on code pen . Style and className in JSX So far, we did not apply any style in the JSX elements. Now, let us add style to our JSX elements. Inline style became very popular after the emergence of react. Let us add border to the header JSX element. To add style to a JSX element we use inline style or className. We inject the style object using {}. Every CSS property becomes a key and every CSS property value becomes a value for the the object. For instance, in the example below, border is a key and '2px solid orange' is a value, color is a key and 'black' is a value, fontSize is a key and '18px' is a value. All two word CSS properties will change to camelCase when we use them as key in the CSS object in React or JavaScript. Live on code pen . const header = ( < header style = {{ border : \"2px solid orange\" , color : \"black\" , fontSize : \"18px\" }} > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // or we can write it this way const style = { border : \"2px solid orange\" , color : \"black\" , fontSize : \"18px\" }; const header = ( < header style = { style } > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); It is good practice to open the browser console while you are developing your application to know, if everything goes well. Let us keep styling all the JSX elements we have created: the header, main and the footer. We can also use regular internal styling to style our application. Using regular style, to target an HTML element we use tag name, id, class, an attribute and other methods. It is very common in the React developer community - people use classes quite a lot instead of id. In this material, I will use only class instead of id. In JSX element we write className instead of class because class is a reserved word in JavaScript. Similar to className, htmlFor instead of for in label tag. See the example below. const title = < h1 className = \"title\" > Getting Started React < /h1>; const inputField = ( < div > < label htmlFor = \"firstname\" > First Name < /label> < input type = \"text\" id = \"firstname\" placeholder = \"First Name\" /> < /div> ); The id used in the input element is not for styling purpose, instead to refer the label to the input field. If class is used instead of className or for instead of htmlFor you will see such kind of warning. Now, you know how to use the inline style and how to use className. Let us style all the JSX elements. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // style const headerStyles = { backgroundColor : \"#61DBFB\" , fontFamily : \"Helvetica Neue\" , padding : 25 , lineHeight : 1.5 , }; // JSX element, header const header = ( < header style = { headerStyles } > < div className = \"header-wrapper\" > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /div> < /header> ); // JSX element, main const mainStyles = { backgroundColor : \"#F3F0F5\" , }; const main = ( < main style = { mainStyles } > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); const footerStyles = { backgroundColor : \"#61DBFB\" , }; // JSX element, footer const footer = ( < footer style = { footerStyles } > < p > Copyright 2020 < /p> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Instead of style object using regular styling method is more easy than the one above. Now, let us use internal style to style all the JSX. It is also possible to use external styling method. Live on code pen <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px ; padding-bottom : 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Instructor : Asabeneh Yetayeh < /p> < small > Date : Oct 1 , 2020 < /small> < /div> < /header> ); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /div> < /main> ); // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > Copyright 2020 < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Injecting data to a JSX Element So far, we used static data on the JSX elements, but we can also pass different data types as a dynamic data. The dynamic data could be string, number, boolean, array or object. Let us see each of the data types step by step. To inject data to a JSX we use the {} bracket. const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const authorFirstName = \"Asabeneh\" ; const authorLastName = \"Yetayeh\" ; const date = \"Oct 1, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { authorFirstName } { authorLastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); Similar to the header JSX element, we can implement data injection to main and footer JSX elements. Injecting a string to a JSX Element In this section we inject only strings const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const firstName = \"Asabeneh\" ; const lastName = \"Yetayeh\" ; const date = \"Oct 2, 2020\" ; // JSX element, header // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { firstName } { lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); Injecting a number to a JSX Element const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = < p > { age } < /p>; As you can see in the example above, it is possible to do some arithmetic calculations and ternary operations. Injecting an array to a JSX Element To give an example for an array, let us change the HTML, CSS, JavaScript to an array and inject it to the main JSX element below. We will cover more in much detail later, in rendering lists section. const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techs } < /ul> < /div> < /main> ); Injecting an object to a JSX Element We can inject string, number, boolean, array data to JSX but we cannot directly inject an object. We should extract object values first or destructure the content of the object before we inject the data to the JSX element. For instance, let us write firstName and lastName inside an object and extract them to use them inside JSX. Now, let us put everything together. Here, in the example below, the data is injected dynamically to the JSX. Live on code pen <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px 10 px 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techs } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > As you can see the lists are all in one line. Therefore, we should format the list the way we want, before we inject it to JSX. In order to format the list, we should modify the array before we will inject it to JSX. We can modify the array using map . As a react developer you should have a very good understanding of functional programming(map, filter, reduce, find, some, every). If you don't have good understanding of functional programming, check out day 1. const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); In the following code example, the list is now containing list elements and it is formatted properly. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px 10 px 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React Challenge\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Rendering lists As you can see above, now the lists are formatted properly, but there is a warning on the console, which says each list child should have a unique key. In the array, we do not have id, but it is common to pass id as a unique value, when you have id in your data. Now, let us just pass each item with a unique key to remove the warning. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px ; padding-bottom : 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React Challenge\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = 2020 ; const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li key = { tech } > { tech } < /li>); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html >","title":"Getting Started"},{"location":"react/getting_started/#getting-started","text":"This section covers prerequisites to get started with React. You should have a good understanding of the following technologies: HTML CSS JavaScript If you have the skills mentioned above, you will enjoy doing React. The 30 Days Of React challenge contains everything you need to know about react. In every section, it has some exercises and mini-projects, and it is recommended to work on them. This 30 Days Of React challenge will help you learn the latest version of React and the old version, step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples and many hands-on exercises. This challenge is designed for beginners and professionals who want to build a web application using React and JavaScript. Once in a while you may need different dummy data to work with React. You can use the following dummy data generator to generate different data.","title":"Getting Started"},{"location":"react/getting_started/#1-what-is-react","text":"React is a JavaScript library for building a reusable user interface(UI). It was initially released on May 29, 2013. The current version is 18.x.x and it is stable. React was created by Facebook. React makes creating UI components very easy. The official React documentation can be found here . When we work with React we do not interact directly with the DOM. React has its own way to handle the DOM(Document Object Model) manipulation. React uses its virtual DOM to make new changes and it updates only the element, that needs changing. Do not directly interact with DOM when you build a React Application and leave the DOM manipulation job for the React virtual DOM. A web application, or a website, is made of buttons, links, forms with different input fields, header, footer, sections, articles, texts, images, audios, videos and boxes with different shapes. We use react to make a reusable UI components of a website. To summarize: React was released in May 2013 React was created by Facebook React is a JavaScript library for building user interfaces React is used to build single page applications - An application which has only one HTML page. React allows us to create reusable UI components React latest release is 18.x.x React versions React official documentation can be found here","title":"1. What is React?"},{"location":"react/getting_started/#2-why-react","text":"React is one of the most popular JavaScript libraries. Many developers and companies have been using it for the last couple of years. Its popularity has been growing fast and it has a huge community. How do we measure popularity? One measure of popularity could be GitHub repository stars, watchers and forks. Let us compare the popularity of React and Vue . As of today, the popularity between the two most popular JavaScript looks like as shown on the diagram. From the diagram, you can speculate the most popular JavaScript library. You may look at the number of watchers, stars and forks for both React and Vue. These alone will not be a very good measure of popularity, but still it tells a little bit about the popularity of the two technologies. If I have to recommend another JavaScript library next to React, it would be Vue.js.","title":"2. Why React?"},{"location":"react/getting_started/#react-vs-vue-popularity-in-october-2020","text":"React Official GitHub Repository Vue Official GitHub Repository Angular Official GitHub Repository Why we choose to use React ? We use it because of the following reasons: fast modular scalable flexible big community and popular open source High job opportunity","title":"React vs Vue popularity in October 2020"},{"location":"react/getting_started/#3-jsx","text":"JSX stands for JavaScript XML. JSX allows us to write HTML elements with JavaScript code. An HTML element has an opening and closing tags, content, and attribute in the opening tag. However, some HTML elements may not have content and a closing tag - they are self closing elements. To create HTML elements in React we do not use the createElement() instead we just use JSX elements. Therefore, JSX makes it easier to write and add HTML elements in React. JSX will be converted to JavaScript on browser using a transpiler - babel.js . Babel is a library which transpiles JSX to pure JavaScript and latest JavaScript to older version. See the JSX code below. // JSX syntax // we don't need to use quotes with JSX const jsxElement = < h1 > I am a JSX element < /h1>; const welcome = < h1 > Welcome to 30 Days of React Challenge < /h1>; const data = < small > Oct 2 , 2020 < /small>; The above strange looking code seems like JavaScript and it seems like , but it is not JavaScript and it seems like HTML but not completely an HTML element. It is a mix of JavaScript and an HTML elements. JSX can allow us to use HTML in JavaScript. The HTML element in the JSX above is h1 and small .","title":"3. JSX"},{"location":"react/getting_started/#jsx-element","text":"As you have seen in the example above, JSX has a JavaScript and HTML like syntax. JSX element could be a single HTML element or many HTML elements wrapped in a parent HTML element. This JSX element has only one HTML element which is h1 . const jsxElement = < h1 > I am a JSX element < /h1>; / / JS with HTML Let's make more JSX elements by declaring a new variable named title and content inside h2 . const title = < h2 > Getting Started React < /h2>; Let us add a subtitles and other contents to this JSX element by adding additional HTML elements. Every HTML element should be wrapped by an outer HTML element to create a valid JSX element. The name title variable also should be changed to header because our JSX element is containing almost all of the header of the application. const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < /header> ); Let us keep adding more elements. Additional HTML elements to display the author name and year. const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); As you can see the header element is a parent element for all the inner HTML elements and JSX must be wrapped by an outer parent element. Without the header HTML element or other parent HTML element the above JSX is invalid.","title":"JSX Element"},{"location":"react/getting_started/#commenting-a-jsx-element","text":"We comment codes for different reasons and it is also good to know how to comment out JSX elements in React. { /* <header> <h1>Welcome to 30 Days Of React</h1> <h2>Getting Started React</h2> <h3>JavaScript Library</h3> <p>Asabeneh Yetayeh</p> <small>Oct 2, 2020</small> </header> */ }","title":"Commenting a JSX element"},{"location":"react/getting_started/#rendering-a-jsx-element","text":"To render a JSX element to HTML document, we should first create an index HTML. The index.html is the only HTML file you will have in any React Application. That is why we say that every React Application is a single page application. Let us create an index.html file. We can get started with React in two ways - either by using CDN or create-react-app. The create-react-app creates a React project boilerplate outbox and because of that, many people do have a hard time to understand how React works. In order to make things clear for absolute beginners I would like to start with a CDN. We use CDN only in this section and we will use the create-reap-app in the rest of the challenge and I also recommend you to use only create-react-app all the time. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script ></ script > </ body > </ html > As you can see from the above index.html, we have one div with a class root and script. The root div is the gateway to connect all react components to the index.html. In the script tag we will write our JavaScript, but the script type will be babel . Babel will transpile the react JSX to pure JavaScript on the browser. Let us add babel to the script. Inside the babel, we can write any pure JavaScript, JSX and in general any React code. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // our code goes here </ script > </ body > </ html > The babel library is linked to our document and now we can make use of it. The next step is importing React and ReactDOM using CDN or link. In order to link React and ReactDOM, we attach both packages from CDN to the body of index.html. To test if React is linked to the index.html, try to check it by doing console.log(React). Open the browser console and you should get an object. If you see an object containing React methods then you managed to link your project with React CDN and you are ready to use React. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > console . log ( React ); </ script > </ body > </ html > Now the index.html has everything we need to write React code. Let us get the root element using document.querySelect('.root') and assign it to a variable name rootElement. The is the only place we directly interact with DOM. Now, you knew JSX and JSX element. Let us render the JSX element on the browser, in order to do so we need the React and ReactDOM library. In addition to the React and ReactDOM we need babel to transpile the JSX to JavaScript code. The ReactDOM package has a method render. The render method takes two arguments:a JSX element or a component and the root document. See the code below. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element const jsxElement = < h1 > I am a JSX element < /h1>; // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two arguments ReactDOM . render ( jsxElement , rootElement ); </ script > </ body > </ html > Let us render more content. To render more content, the JSX element should have more HTML elements. For instance, we can create a header of a website and header may have a title, subtitle, author or date etc. Remember, we can render only one JSX element at a time. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two arguments ReactDOM . render ( header , rootElement ); </ script > </ body > </ html > We have created a JSX element for the header of the website. How about the main and the footer for the website? Similar to the header, let us create a JSX element for the main and the footer. JSX element for the main part of the website. // JSX element const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); JSX element for the footer part of the website. // JSX element const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); Now, we have three JSX elements: the header, main and footer. The best way to render all of the three JSX elements is by wrapping them all in a parent JSX element or putting them in an array. To include JSX element inside another JSX element we use the curly bracket, {} and call the name of the JSX inside the curly bracket. // JSX element for the header part of the website const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // JSX element for the main part of the website const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); // JSX element for the footer part of the website const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); // JSX element which contain all, it is a container or parent const app = ( < div > { header } { main } { footer } < /div> ); Now, let us put everything together and render it to the browser. Live on code pen . <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const header = ( < header > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // JSX element, main const main = ( < main > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); // JSX element, footer const footer = ( < footer > < p > Copyright 2020 < /p> < /footer> ); // JSX element, app, a container or a parent const app = ( < div > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package // ReactDOM has the render method and the render method takes two argument ReactDOM . render ( app , rootElement ); // or // ReactDOM.render([header, main, footer], rootElement) </ script > </ body > </ html > Let us apply some style to our JSX elements and see the result. . Now, lets us apply style the header part only Live on code pen .","title":"Rendering a JSX Element"},{"location":"react/getting_started/#style-and-classname-in-jsx","text":"So far, we did not apply any style in the JSX elements. Now, let us add style to our JSX elements. Inline style became very popular after the emergence of react. Let us add border to the header JSX element. To add style to a JSX element we use inline style or className. We inject the style object using {}. Every CSS property becomes a key and every CSS property value becomes a value for the the object. For instance, in the example below, border is a key and '2px solid orange' is a value, color is a key and 'black' is a value, fontSize is a key and '18px' is a value. All two word CSS properties will change to camelCase when we use them as key in the CSS object in React or JavaScript. Live on code pen . const header = ( < header style = {{ border : \"2px solid orange\" , color : \"black\" , fontSize : \"18px\" }} > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); // or we can write it this way const style = { border : \"2px solid orange\" , color : \"black\" , fontSize : \"18px\" }; const header = ( < header style = { style } > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /header> ); It is good practice to open the browser console while you are developing your application to know, if everything goes well. Let us keep styling all the JSX elements we have created: the header, main and the footer. We can also use regular internal styling to style our application. Using regular style, to target an HTML element we use tag name, id, class, an attribute and other methods. It is very common in the React developer community - people use classes quite a lot instead of id. In this material, I will use only class instead of id. In JSX element we write className instead of class because class is a reserved word in JavaScript. Similar to className, htmlFor instead of for in label tag. See the example below. const title = < h1 className = \"title\" > Getting Started React < /h1>; const inputField = ( < div > < label htmlFor = \"firstname\" > First Name < /label> < input type = \"text\" id = \"firstname\" placeholder = \"First Name\" /> < /div> ); The id used in the input element is not for styling purpose, instead to refer the label to the input field. If class is used instead of className or for instead of htmlFor you will see such kind of warning. Now, you know how to use the inline style and how to use className. Let us style all the JSX elements. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < title > 30 Days Of React Challenge </ title > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // style const headerStyles = { backgroundColor : \"#61DBFB\" , fontFamily : \"Helvetica Neue\" , padding : 25 , lineHeight : 1.5 , }; // JSX element, header const header = ( < header style = { headerStyles } > < div className = \"header-wrapper\" > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Asabeneh Yetayeh < /p> < small > Oct 2 , 2020 < /small> < /div> < /header> ); // JSX element, main const mainStyles = { backgroundColor : \"#F3F0F5\" , }; const main = ( < main style = { mainStyles } > < p > Prerequisite to get started react . js :< /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /main> ); const footerStyles = { backgroundColor : \"#61DBFB\" , }; // JSX element, footer const footer = ( < footer style = { footerStyles } > < p > Copyright 2020 < /p> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Instead of style object using regular styling method is more easy than the one above. Now, let us use internal style to style all the JSX. It is also possible to use external styling method. Live on code pen <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px ; padding-bottom : 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > Welcome to 30 Days Of React < /h1> < h2 > Getting Started React < /h2> < h3 > JavaScript Library < /h3> < p > Instructor : Asabeneh Yetayeh < /p> < small > Date : Oct 1 , 2020 < /small> < /div> < /header> ); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > < li > HTML < /li> < li > CSS < /li> < li > JavaScript < /li> < /ul> < /div> < /main> ); // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > Copyright 2020 < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html >","title":"Style and className in JSX"},{"location":"react/getting_started/#injecting-data-to-a-jsx-element","text":"So far, we used static data on the JSX elements, but we can also pass different data types as a dynamic data. The dynamic data could be string, number, boolean, array or object. Let us see each of the data types step by step. To inject data to a JSX we use the {} bracket. const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const authorFirstName = \"Asabeneh\" ; const authorLastName = \"Yetayeh\" ; const date = \"Oct 1, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { authorFirstName } { authorLastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); Similar to the header JSX element, we can implement data injection to main and footer JSX elements.","title":"Injecting data to a JSX Element"},{"location":"react/getting_started/#injecting-a-string-to-a-jsx-element","text":"In this section we inject only strings const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const firstName = \"Asabeneh\" ; const lastName = \"Yetayeh\" ; const date = \"Oct 2, 2020\" ; // JSX element, header // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { firstName } { lastName } < /p> < small > Date : { date } < /small> < /div> < /header> );","title":"Injecting a string to a JSX Element"},{"location":"react/getting_started/#injecting-a-number-to-a-jsx-element","text":"const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = < p > { age } < /p>; As you can see in the example above, it is possible to do some arithmetic calculations and ternary operations.","title":"Injecting a number to a JSX Element"},{"location":"react/getting_started/#injecting-an-array-to-a-jsx-element","text":"To give an example for an array, let us change the HTML, CSS, JavaScript to an array and inject it to the main JSX element below. We will cover more in much detail later, in rendering lists section. const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techs } < /ul> < /div> < /main> );","title":"Injecting an array to a JSX Element"},{"location":"react/getting_started/#injecting-an-object-to-a-jsx-element","text":"We can inject string, number, boolean, array data to JSX but we cannot directly inject an object. We should extract object values first or destructure the content of the object before we inject the data to the JSX element. For instance, let us write firstName and lastName inside an object and extract them to use them inside JSX. Now, let us put everything together. Here, in the example below, the data is injected dynamically to the JSX. Live on code pen <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px 10 px 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techs } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > As you can see the lists are all in one line. Therefore, we should format the list the way we want, before we inject it to JSX. In order to format the list, we should modify the array before we will inject it to JSX. We can modify the array using map . As a react developer you should have a very good understanding of functional programming(map, filter, reduce, find, some, every). If you don't have good understanding of functional programming, check out day 1. const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); In the following code example, the list is now containing list elements and it is formatted properly. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px 10 px 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React Challenge\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html > Rendering lists As you can see above, now the lists are formatted properly, but there is a warning on the console, which says each list child should have a unique key. In the array, we do not have id, but it is common to pass id as a unique value, when you have id in your data. Now, let us just pass each item with a unique key to remove the warning. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link href = \"https://fonts.googleapis.com/css?family=Montserrat:300,400,500|Roboto:300,400,500&display=swap\" rel = \"stylesheet\" /> < title > 30 Days Of React Challenge </ title > < style > /* == General style === */ * { box-sizing : border-box ; padding : 0 ; margin : 0 ; } html , body { height : 100 % ; line-height : 1.5 ; font-family : \"Montserrat\" ; font-weight : 300 ; color : black ; } . root { min-height : 100 % ; position : relative ; } . header-wrapper , . main-wrapper , . footer-wrapper { width : 85 % ; margin : auto ; } . header-wrapper , . main-wrapper { padding : 10 px ; margin : 2 px auto ; } h1 { font-size : 70 px ; font-weight : 300 ; } h2 , h3 { font-weight : 300 ; } header { background-color : #61dbfb ; padding : 10 px ; } main { padding : 10 px ; padding-bottom : 60 px ; /* Height of the footer */ } ul { margin-left : 15 px ; } ul li { list-style : none ; } footer { position : absolute ; bottom : 0 ; width : 100 % ; height : 60 px ; /* Height of the footer */ background : #6cf ; } . footer-wrapper { font-weight : 400 ; text-align : center ; line-height : 60 px ; } </ style > </ head > < body > < div class = \"root\" ></ div > < script crossorigin src = \"https://unpkg.com/react@16/umd/react.development.js\" ></ script > < script crossorigin src = \"https://unpkg.com/react-dom@16/umd/react-dom.development.js\" ></ script > < script src = \"https://unpkg.com/@babel/standalone/babel.min.js\" ></ script > < script type = \"text/babel\" > // To get the root element from the HTML document const rootElement = document . querySelector ( \".root\" ); // JSX element, header const welcome = \"Welcome to 30 Days Of React Challenge\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 2, 2020\" ; // JSX element, header const header = ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1820 ; const currentYear = 2020 ; const age = currentYear - yearBorn ; const personAge = ( < p > { \" \" } { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li key = { tech } > { tech } < /li>); // JSX element, main const main = ( < main > < div className = \"main-wrapper\" > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2020\" ; // JSX element, footer const footer = ( < footer > < div className = \"footer-wrapper\" > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div className = \"app\" > { header } { main } { footer } < /div> ); // we render the JSX element using the ReactDOM package ReactDOM . render ( app , rootElement ); </ script > </ body > </ html >","title":"Injecting an object to a JSX Element"},{"location":"react/hooks/","text":"React Hooks Hooks are a new addition in React 16.8. They allow you use state, life cycle methods and other React features without writing a class component. If we are using hooks we can have only a functional component in the entire application. For more detail explanation you check React documentation . Different hooks have been introduced to React: Basic hooks and additional hooks Basic Hooks The basic hooks are: useState useEffect useContext State Hook Using hooks we can access state. To use hooks, first we should import the useState hooks from react. The useState is a function which takes one argument (the initial value) and returns an array of the current state and a function that lets you update it. State with Data Types If you use useState with primitive data types, there is no problem by using operators to set the state with the current value, like in our example above. But if you use non-primitive data types you can't just change the value and set it, you have to create a \"new\" object or copy the old one and set it: Here is a bad example, which won't work: Here is the fixed example: The same happens to arrays: Here is the fixed examle: When a state changes, React will check if the state is used somewhere and update the element . Effect Hook Effects happen, when a state or a prop changes. To watch for changes and do a sideeffect (not computing a value or not preparing a callback) you can use useEffect . Context useContext will be discussed later in the Context chapter. Additional Hooks Additional Hooks can be used to express specific statements or to speed up your code. useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue useDeferredValue useTransition useId Reducer Reducer are handy if you have multiple actions for the same state. For example, if you work on the same state with different functions, then a reducer can be used to define the actions on a state in one place: Callbacks Callbacks are important to pass a behaviour into a component from an outer scope. Let's check this example first: You see that an update of our states results in an update for our buttons. Let's improve the code by using useCallback to listen for specific changes: Now the buttons does not update if the other button gets clicked. This can lead to massive performance improvements. Memo If you have some operations, which take a lot of computing time, useMemo . Actually I would say, use always useMemo if you calculate something depending on a state or prop. Here is a bad example: Here we use useMemo , additionally we define the dependency: Ref What if you need to access to the actual html element in the dom, to call a function on the element? You can useRef for that: Imperative Handle Layout Effect useLayoutEffect works the same way useEffect works. The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint. Debug Value useDebugValue shows a value in React DevTools. function useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); // Show a label in DevTools next to this Hook // e.g. \"FriendStatus: Online\" useDebugValue(isOnline ? \"Online\" : \"Offline\"); return isOnline; } Deferred Value useDeferredValue receives a state variable and returns a new state variable, which will wait until all rendering finishes for the given state variable and then rerenders the deferred value. function Typeahead() { const query = useSearchQuery(\"\"); const deferredQuery = useDeferredValue(query); // Memoizing tells React to only re-render when deferredQuery changes, // not when query changes. const suggestions = useMemo( () => <SearchSuggestions query={deferredQuery} />, [deferredQuery] ); return ( <> <SearchInput query={query} /> <Suspense fallback=\"Loading results...\">{suggestions}</Suspense> </> ); } Transition useTransition can handle loading states. ID useId is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches. Warning useId is not for generating keys in a list. Keys should be generated from your data. function Checkbox() { const id = useId(); return ( <> <label htmlFor={id}>Do you like React?</label> <input id={id} type=\"checkbox\" name=\"react\" /> </> ); }","title":"React Hooks"},{"location":"react/hooks/#react-hooks","text":"Hooks are a new addition in React 16.8. They allow you use state, life cycle methods and other React features without writing a class component. If we are using hooks we can have only a functional component in the entire application. For more detail explanation you check React documentation . Different hooks have been introduced to React: Basic hooks and additional hooks","title":"React Hooks"},{"location":"react/hooks/#basic-hooks","text":"The basic hooks are: useState useEffect useContext","title":"Basic Hooks"},{"location":"react/hooks/#state-hook","text":"Using hooks we can access state. To use hooks, first we should import the useState hooks from react. The useState is a function which takes one argument (the initial value) and returns an array of the current state and a function that lets you update it.","title":"State Hook"},{"location":"react/hooks/#state-with-data-types","text":"If you use useState with primitive data types, there is no problem by using operators to set the state with the current value, like in our example above. But if you use non-primitive data types you can't just change the value and set it, you have to create a \"new\" object or copy the old one and set it: Here is a bad example, which won't work: Here is the fixed example: The same happens to arrays: Here is the fixed examle: When a state changes, React will check if the state is used somewhere and update the element .","title":"State with Data Types"},{"location":"react/hooks/#effect-hook","text":"Effects happen, when a state or a prop changes. To watch for changes and do a sideeffect (not computing a value or not preparing a callback) you can use useEffect .","title":"Effect Hook"},{"location":"react/hooks/#context","text":"useContext will be discussed later in the Context chapter.","title":"Context"},{"location":"react/hooks/#additional-hooks","text":"Additional Hooks can be used to express specific statements or to speed up your code. useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue useDeferredValue useTransition useId","title":"Additional Hooks"},{"location":"react/hooks/#reducer","text":"Reducer are handy if you have multiple actions for the same state. For example, if you work on the same state with different functions, then a reducer can be used to define the actions on a state in one place:","title":"Reducer"},{"location":"react/hooks/#callbacks","text":"Callbacks are important to pass a behaviour into a component from an outer scope. Let's check this example first: You see that an update of our states results in an update for our buttons. Let's improve the code by using useCallback to listen for specific changes: Now the buttons does not update if the other button gets clicked. This can lead to massive performance improvements.","title":"Callbacks"},{"location":"react/hooks/#memo","text":"If you have some operations, which take a lot of computing time, useMemo . Actually I would say, use always useMemo if you calculate something depending on a state or prop. Here is a bad example: Here we use useMemo , additionally we define the dependency:","title":"Memo"},{"location":"react/hooks/#ref","text":"What if you need to access to the actual html element in the dom, to call a function on the element? You can useRef for that:","title":"Ref"},{"location":"react/hooks/#imperative-handle","text":"","title":"Imperative Handle"},{"location":"react/hooks/#layout-effect","text":"useLayoutEffect works the same way useEffect works. The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.","title":"Layout Effect"},{"location":"react/hooks/#debug-value","text":"useDebugValue shows a value in React DevTools. function useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); // Show a label in DevTools next to this Hook // e.g. \"FriendStatus: Online\" useDebugValue(isOnline ? \"Online\" : \"Offline\"); return isOnline; }","title":"Debug Value"},{"location":"react/hooks/#deferred-value","text":"useDeferredValue receives a state variable and returns a new state variable, which will wait until all rendering finishes for the given state variable and then rerenders the deferred value. function Typeahead() { const query = useSearchQuery(\"\"); const deferredQuery = useDeferredValue(query); // Memoizing tells React to only re-render when deferredQuery changes, // not when query changes. const suggestions = useMemo( () => <SearchSuggestions query={deferredQuery} />, [deferredQuery] ); return ( <> <SearchInput query={query} /> <Suspense fallback=\"Loading results...\">{suggestions}</Suspense> </> ); }","title":"Deferred Value"},{"location":"react/hooks/#transition","text":"useTransition can handle loading states.","title":"Transition"},{"location":"react/hooks/#id","text":"useId is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches. Warning useId is not for generating keys in a list. Keys should be generated from your data. function Checkbox() { const id = useId(); return ( <> <label htmlFor={id}>Do you like React?</label> <input id={id} type=\"checkbox\" name=\"react\" /> </> ); }","title":"ID"},{"location":"react/map_list_keys/","text":"Mapping arrays An array is the most frequently used data structure to handle many kinds of problems. In React, we use map to modify an array to list of JSX by adding a certain HTML elements to each element of an array. Mapping and rendering arrays Most of the time data is in the form of an array or an array of objects. To render this array or array of objects most of the time we modify the data using .map() . In the previous section, we have rendered the techs list using a map method. In this section, we will see more examples. In the following examples, you will see how we render an array of numbers, an array of strings, an array of countries and an array of skills on the browser. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App () { return ( < div > < h1 > Numbers List < /h1> {[ 1 , 2 , 3 , 4 , 5 ]} < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); If you check the browser, you will see the numbers are attached together in one line. To avoid this, we modify the array and change the array elements to JSX element. See the example below, the array has been modified to a list of JSX elements. Mapping array of numbers import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Numbers ({ numbers }) { const list = numbers . map (( number ) => < li > { number } < /li>); return list ; } function App () { return ( < div > < h1 > Numbers List < /h1> < Numbers numbers = {[ 1 , 2 , 3 , 4 , 5 ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Mapping array of objects Rendering array of objects import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Country ({ country : { name , city } }) { return ( < div key = { name } > < h1 > { name } < /h1> < small > { city } < /small> < /div> ); } function Countries ({ countries }) { return ( < div > { countries . map (( country ) => ( < Country country = { country } /> ))} < /div> ); } function App () { return ( < div > < h1 > Countries List < /h1> < Countries countries = {[ { name : \"Finland\" , city : \"Helsinki\" }, { name : \"Sweden\" , city : \"Stockholm\" }, { name : \"Denmark\" , city : \"Copenhagen\" }, { name : \"Norway\" , city : \"Oslo\" }, { name : \"Iceland\" , city : \"Reykjav\u00edk\" }, ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Key in mapping arrays Keys help React to identify items which have changed, added, or removed. Keys should be given to the elements inside the array to give the elements a stable identity. The key should be unique. Mostly data will come with as an id and we can use id as key. If we do not pass key to React during mapping it raises a warning on the browser. If the data does not have an id we have to find a way to create a unique identifier for each element when we map it. See the following example: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Country ({ country : { name , city } }) { return ( < div key = { name } > < h1 > { name } < /h1> < small > { city } < /small> < /div> ); } function Countries ({ countries }) { return ( < div > { countries . map (( country ) => ( < Country key = { country . name } country = { country } /> ))} < /div> ); } function App () { return ( < div > < h1 > Countries List < /h1> < Countries countries = {[ { name : \"Finland\" , city : \"Helsinki\" }, { name : \"Sweden\" , city : \"Stockholm\" }, { name : \"Denmark\" , city : \"Copenhagen\" }, { name : \"Norway\" , city : \"Oslo\" }, { name : \"Iceland\" , city : \"Reykjav\u00edk\" }, ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Mapping arrays"},{"location":"react/map_list_keys/#mapping-arrays","text":"An array is the most frequently used data structure to handle many kinds of problems. In React, we use map to modify an array to list of JSX by adding a certain HTML elements to each element of an array.","title":"Mapping arrays"},{"location":"react/map_list_keys/#mapping-and-rendering-arrays","text":"Most of the time data is in the form of an array or an array of objects. To render this array or array of objects most of the time we modify the data using .map() . In the previous section, we have rendered the techs list using a map method. In this section, we will see more examples. In the following examples, you will see how we render an array of numbers, an array of strings, an array of countries and an array of skills on the browser. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App () { return ( < div > < h1 > Numbers List < /h1> {[ 1 , 2 , 3 , 4 , 5 ]} < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); If you check the browser, you will see the numbers are attached together in one line. To avoid this, we modify the array and change the array elements to JSX element. See the example below, the array has been modified to a list of JSX elements.","title":"Mapping and rendering arrays"},{"location":"react/map_list_keys/#mapping-array-of-numbers","text":"import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Numbers ({ numbers }) { const list = numbers . map (( number ) => < li > { number } < /li>); return list ; } function App () { return ( < div > < h1 > Numbers List < /h1> < Numbers numbers = {[ 1 , 2 , 3 , 4 , 5 ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Mapping array of numbers"},{"location":"react/map_list_keys/#mapping-array-of-objects","text":"Rendering array of objects import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Country ({ country : { name , city } }) { return ( < div key = { name } > < h1 > { name } < /h1> < small > { city } < /small> < /div> ); } function Countries ({ countries }) { return ( < div > { countries . map (( country ) => ( < Country country = { country } /> ))} < /div> ); } function App () { return ( < div > < h1 > Countries List < /h1> < Countries countries = {[ { name : \"Finland\" , city : \"Helsinki\" }, { name : \"Sweden\" , city : \"Stockholm\" }, { name : \"Denmark\" , city : \"Copenhagen\" }, { name : \"Norway\" , city : \"Oslo\" }, { name : \"Iceland\" , city : \"Reykjav\u00edk\" }, ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Mapping array of objects"},{"location":"react/map_list_keys/#key-in-mapping-arrays","text":"Keys help React to identify items which have changed, added, or removed. Keys should be given to the elements inside the array to give the elements a stable identity. The key should be unique. Mostly data will come with as an id and we can use id as key. If we do not pass key to React during mapping it raises a warning on the browser. If the data does not have an id we have to find a way to create a unique identifier for each element when we map it. See the following example: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Country ({ country : { name , city } }) { return ( < div key = { name } > < h1 > { name } < /h1> < small > { city } < /small> < /div> ); } function Countries ({ countries }) { return ( < div > { countries . map (( country ) => ( < Country key = { country . name } country = { country } /> ))} < /div> ); } function App () { return ( < div > < h1 > Countries List < /h1> < Countries countries = {[ { name : \"Finland\" , city : \"Helsinki\" }, { name : \"Sweden\" , city : \"Stockholm\" }, { name : \"Denmark\" , city : \"Copenhagen\" }, { name : \"Norway\" , city : \"Oslo\" }, { name : \"Iceland\" , city : \"Reykjav\u00edk\" }, ]} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> );","title":"Key in mapping arrays"},{"location":"react/project_structure/","text":"Project Structure TBD","title":"Project Structure"},{"location":"react/project_structure/#project-structure","text":"TBD","title":"Project Structure"},{"location":"react/props/","text":"Props What is props? Props is a special keyword in React that stands for properties and is being used to pass data from one component to another and mostly from parent component to child component. We can say props is a data carrier or a means to transport data. I hope you are familiar with the JavaScript function. Most of the time, functions with parameters are smart and they can take dynamic data likewise props is a way we pass data or parameter to a component. Let's see the difference between a function and a component. // function syntax const getUserInfo = (firstName, lastName, country) => { return `${firstName} ${lastName}. Lives in ${country}.`; }; // calling a functons getUserInfo(\"Asabeneh\", \"Yeteyeh\", \"Finland\"); //component syntax // User component, component should start with an uppercase function User(props) { return ( <div> <h1> {props.firstName} {props.lastName} </h1> <small>{props.country}</small> </div> ); } // calling or instantiating a component, this component has three properties and we call them props:firstName, lastName, country <User firstName={\"Asabeneh\"} lastName={\"Yetayeh\"} country={\"Finland\"} />; In the previous section, we injected data as follows and today we will change these data to props. const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 4, 2020\" ; // Header Component function Header () { return ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > { author . firstName } { author . lastName } < /p> < small > { date } < /small> < /div> < /header> ); } Instead of injecting data we can also pass the data as props. React props are similar to parameters in functions. Props object React props is an object which you get instantly when you create a React component. Before we pass properties to the component, let's check what do we get in the props object. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Header ( props ) { console . log ( props ); // empty object, {} return ( < header > < div > < h1 > {} < /h1> < h2 > {} < /h2> < h3 > {} < /h3> < p > {} {} < /p> < small > {} < /small> < /div> < /header> ); } function App () { return ( < div > < Header /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); In the above console.log(props), you would get an empty object({}). That means if you do not pass any attributes or properties when you instantiate the component, the props will be empty otherwise it will be populated with the data you passed as attributes and the proper name of these attributes are props. Let's start with a simple example. In the example below, the welcome string has been passed as props in the Header components. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Header ( props ) { console . log ( props ); // empty object, {} return ( < header > < div > < h1 > { props . welcome } < /h1> < p > { props . firstName } { props . lastName } < /p> < /div> < /header> ); } function App () { return ( < div > < Header welcome = { \"Welcome to Webengineering\" } author = {{ firstName : \"Michael\" , lastName : \"Bykovski\" }} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Now, when you do console.log(props) you should get the following object, that means the welcome property we passed to the Header component can be found inside the props object. { \"welcome\" : \"Welcome to Webengineering\" , \"author\" : { \"firstName\" : \"Michael\" , \"lastName\" : \"Bykovski\" } } As you can see in the above code, we passed only single props to Header component, the welcome props. A component can have one or many props. Props could be different data types. It could be a string, number, boolean, array, object or a function. We will cover different kind of props in the next sections. Different data type props String props type The data type of the props we pass an attribute to the component is a string. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . text } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App text = { \"Hello World!\" } /> < /React.StrictMode> ); Since you are a JavaScript ninja by now, you know what do do with this object. As you can see from the above example, the value of the props are written statically. However, if we want to apply some logic it is hard to implement with statically written data, so it will be better to use a variable as props. Let's see the following example: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . text } < /div>; } const text = \"Hello World\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App text = { text } /> < /React.StrictMode> ); Number props type Let's use a number props to a component import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . year } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App year = { 2022 } /> < /React.StrictMode> ); Boolean props type We can pass boolean data types to a React component. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . show ? \"Is shown\" : \"Not shown\" } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App show = { true } /> < /React.StrictMode> ); Array props type In programming arrays and objects are the most frequently used data structure to solve different problems and store data in a more structured way. Therefore, we encounter data in the form of an array quite often. Let's pass an array as props to a component import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . skills } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App skills = {[ \"HTML\" , \"CSS\" , \"JavaScript\" ]} /> < /React.StrictMode> ); If you see the result on the browser, the skills elements needs formatting. Therefore before we render, it should have some elements between each skill. To modify the array and to add a li element we can use map method. You should be very familiar with the functional programming map, filter and reduce to feel good at React if not please go back to day 1 JavaScript refresher. Let's apply map to modify the array. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return ( < ul > { props . skills . map (( skill ) => ( < li > { skill } < /li> ))} < /ul> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App skills = {[ \"HTML\" , \"CSS\" , \"JavaScript\" ]} /> < /React.StrictMode> ); We will go in-depth about list and map in other sections. Now, let's see an object as a props. Object props type We may pass an object as props to a React component. Let's see an example. We can change the previous Header props to object. For the time being let's change a few properties for better understanding. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return ( < div > { props . author . firstName } { props . author . age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); When we use an object as props we usually destructure the data to access the values. Destructuring makes our code easy to read. We will soon see the destructuring of props but before that let's see function as props for a React component. Function prop types We can pass a function as props type to a React component. Let's see some examples import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < button onClick = { props . onClick } > Click < /button>; } const sayHi = ( event ) => { console . log ( event ); console . log ( \"Hi\" ); }; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App onClick = { sayHi } /> < /React.StrictMode> ); Even we can write a function inside the curly bracket import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < button onClick = { props . onClick } > Click < /button>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App onClick = {( event ) => { console . log ( event ); console . log ( \"Hi\" ); }} /> < /React.StrictMode> ); Destructuring props By now, I believe you are a JavaScript ninja and you know about destructing arrays and objects. Destructuring code to some extent makes easy to read. Let us destructure the props in Header component. Everything we passed as props is stored in props object. Therefore, props is an object and we can destructure the properties. Let's destructure some of the props we wrote in object props example. We can destructure in many ways: Step by step destructuring import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { const { author : { firstName , age }, } = props ; return ( < div > { firstName } { age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); Destructuring in one line import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ({ author : { firstName , age } }) { return ( < div > { firstName } { age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); Default Props You can define default or optional props, by assigning values or defining undefined to them: import React from \"react\"; import ReactDOM from \"react-dom/client\"; function App({ author: { firstName = \"Default\", age = null } }) { return ( <div> {firstName} {age === null ? \"No age defined\" : age} </div> ); } const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render( <React.StrictMode> <App author={{ firstName: \"Michael\" }} /> </React.StrictMode> );","title":"Props"},{"location":"react/props/#props","text":"","title":"Props"},{"location":"react/props/#what-is-props","text":"Props is a special keyword in React that stands for properties and is being used to pass data from one component to another and mostly from parent component to child component. We can say props is a data carrier or a means to transport data. I hope you are familiar with the JavaScript function. Most of the time, functions with parameters are smart and they can take dynamic data likewise props is a way we pass data or parameter to a component. Let's see the difference between a function and a component. // function syntax const getUserInfo = (firstName, lastName, country) => { return `${firstName} ${lastName}. Lives in ${country}.`; }; // calling a functons getUserInfo(\"Asabeneh\", \"Yeteyeh\", \"Finland\"); //component syntax // User component, component should start with an uppercase function User(props) { return ( <div> <h1> {props.firstName} {props.lastName} </h1> <small>{props.country}</small> </div> ); } // calling or instantiating a component, this component has three properties and we call them props:firstName, lastName, country <User firstName={\"Asabeneh\"} lastName={\"Yetayeh\"} country={\"Finland\"} />; In the previous section, we injected data as follows and today we will change these data to props. const welcome = \"Welcome to 30 Days Of React\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Asabeneh\" , lastName : \"Yetayeh\" , }; const date = \"Oct 4, 2020\" ; // Header Component function Header () { return ( < header > < div className = \"header-wrapper\" > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > { author . firstName } { author . lastName } < /p> < small > { date } < /small> < /div> < /header> ); } Instead of injecting data we can also pass the data as props. React props are similar to parameters in functions.","title":"What is props?"},{"location":"react/props/#props-object","text":"React props is an object which you get instantly when you create a React component. Before we pass properties to the component, let's check what do we get in the props object. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Header ( props ) { console . log ( props ); // empty object, {} return ( < header > < div > < h1 > {} < /h1> < h2 > {} < /h2> < h3 > {} < /h3> < p > {} {} < /p> < small > {} < /small> < /div> < /header> ); } function App () { return ( < div > < Header /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); In the above console.log(props), you would get an empty object({}). That means if you do not pass any attributes or properties when you instantiate the component, the props will be empty otherwise it will be populated with the data you passed as attributes and the proper name of these attributes are props. Let's start with a simple example. In the example below, the welcome string has been passed as props in the Header components. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function Header ( props ) { console . log ( props ); // empty object, {} return ( < header > < div > < h1 > { props . welcome } < /h1> < p > { props . firstName } { props . lastName } < /p> < /div> < /header> ); } function App () { return ( < div > < Header welcome = { \"Welcome to Webengineering\" } author = {{ firstName : \"Michael\" , lastName : \"Bykovski\" }} /> < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); Now, when you do console.log(props) you should get the following object, that means the welcome property we passed to the Header component can be found inside the props object. { \"welcome\" : \"Welcome to Webengineering\" , \"author\" : { \"firstName\" : \"Michael\" , \"lastName\" : \"Bykovski\" } } As you can see in the above code, we passed only single props to Header component, the welcome props. A component can have one or many props. Props could be different data types. It could be a string, number, boolean, array, object or a function. We will cover different kind of props in the next sections.","title":"Props object"},{"location":"react/props/#different-data-type-props","text":"","title":"Different data type props"},{"location":"react/props/#string-props-type","text":"The data type of the props we pass an attribute to the component is a string. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . text } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App text = { \"Hello World!\" } /> < /React.StrictMode> ); Since you are a JavaScript ninja by now, you know what do do with this object. As you can see from the above example, the value of the props are written statically. However, if we want to apply some logic it is hard to implement with statically written data, so it will be better to use a variable as props. Let's see the following example: import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . text } < /div>; } const text = \"Hello World\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App text = { text } /> < /React.StrictMode> );","title":"String props type"},{"location":"react/props/#number-props-type","text":"Let's use a number props to a component import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . year } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App year = { 2022 } /> < /React.StrictMode> );","title":"Number props type"},{"location":"react/props/#boolean-props-type","text":"We can pass boolean data types to a React component. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . show ? \"Is shown\" : \"Not shown\" } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App show = { true } /> < /React.StrictMode> );","title":"Boolean props type"},{"location":"react/props/#array-props-type","text":"In programming arrays and objects are the most frequently used data structure to solve different problems and store data in a more structured way. Therefore, we encounter data in the form of an array quite often. Let's pass an array as props to a component import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < div > { props . skills } < /div>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App skills = {[ \"HTML\" , \"CSS\" , \"JavaScript\" ]} /> < /React.StrictMode> ); If you see the result on the browser, the skills elements needs formatting. Therefore before we render, it should have some elements between each skill. To modify the array and to add a li element we can use map method. You should be very familiar with the functional programming map, filter and reduce to feel good at React if not please go back to day 1 JavaScript refresher. Let's apply map to modify the array. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return ( < ul > { props . skills . map (( skill ) => ( < li > { skill } < /li> ))} < /ul> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App skills = {[ \"HTML\" , \"CSS\" , \"JavaScript\" ]} /> < /React.StrictMode> ); We will go in-depth about list and map in other sections. Now, let's see an object as a props.","title":"Array props type"},{"location":"react/props/#object-props-type","text":"We may pass an object as props to a React component. Let's see an example. We can change the previous Header props to object. For the time being let's change a few properties for better understanding. import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return ( < div > { props . author . firstName } { props . author . age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); When we use an object as props we usually destructure the data to access the values. Destructuring makes our code easy to read. We will soon see the destructuring of props but before that let's see function as props for a React component.","title":"Object props type"},{"location":"react/props/#function-prop-types","text":"We can pass a function as props type to a React component. Let's see some examples import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < button onClick = { props . onClick } > Click < /button>; } const sayHi = ( event ) => { console . log ( event ); console . log ( \"Hi\" ); }; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App onClick = { sayHi } /> < /React.StrictMode> ); Even we can write a function inside the curly bracket import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { return < button onClick = { props . onClick } > Click < /button>; } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App onClick = {( event ) => { console . log ( event ); console . log ( \"Hi\" ); }} /> < /React.StrictMode> );","title":"Function prop types"},{"location":"react/props/#destructuring-props","text":"By now, I believe you are a JavaScript ninja and you know about destructing arrays and objects. Destructuring code to some extent makes easy to read. Let us destructure the props in Header component. Everything we passed as props is stored in props object. Therefore, props is an object and we can destructure the properties. Let's destructure some of the props we wrote in object props example. We can destructure in many ways: Step by step destructuring import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ( props ) { const { author : { firstName , age }, } = props ; return ( < div > { firstName } { age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> ); Destructuring in one line import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; function App ({ author : { firstName , age } }) { return ( < div > { firstName } { age } < /div> ); } const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App author = {{ firstName : \"Michael\" , age : 28 }} /> < /React.StrictMode> );","title":"Destructuring props"},{"location":"react/props/#default-props","text":"You can define default or optional props, by assigning values or defining undefined to them: import React from \"react\"; import ReactDOM from \"react-dom/client\"; function App({ author: { firstName = \"Default\", age = null } }) { return ( <div> {firstName} {age === null ? \"No age defined\" : age} </div> ); } const root = ReactDOM.createRoot(document.getElementById(\"root\")); root.render( <React.StrictMode> <App author={{ firstName: \"Michael\" }} /> </React.StrictMode> );","title":"Default Props"},{"location":"react/react-router/","text":"React Router Let's build it from scratch! https://reactrouter.com/en/main","title":"React Router"},{"location":"react/react-router/#react-router","text":"Let's build it from scratch! https://reactrouter.com/en/main","title":"React Router"},{"location":"react/setting_up/","text":"Setting Up In the previous section, we learned about JSX and we accessed the React and ReactDOM package using CDN. However, in real projects instead of CDN you will use the create-react-app package to generate a React project starter(boilerplate). The initial create-react-app was released on Jul 22, 2016. Before this time, developers used to configure webpack with a JavaScript module bundler, babel and all the necessary packages manually and this used to take half an hour or maybe more. Now, create-react-app will take care of everything and you will be in charge of only developing the product, instead of spending too much time configuring and setting up projects. Before we start using different tools, let's have a brief introduction to all the tools we are going to use in this challenge. You do not have to understand everything, but I will try to give a very short introduction to some of the tools and technologies that we use when we work with React. Module A single or multiple functions, that can be exported and imported when needed, can be included in a project. In React we do not use link to access modules or packages, instead we import the module. Let's see how to import and export a module or modules: // math.js export const addTwo = ( a , b ) => a + b ; export const multiply = ( a , b ) => a * b ; export const subtract = ( a , b ) => a - b ; export default ( function doSomeMath () { return { addTwo , multiply , subtract , }; })(); Now let's import the math.js modules to a different file: // index.js // to import the doSomeMath from the math.js with or without extension import doSomeMath from \"./math.js\" ; // to import the other modules // since these modules were not exported as default we have to desctructure import { addTwo , multiply , subtract } from \"./math.js\" ; import * as everything from \"./math.js\" ; // to import everything remaining console . log ( addTwo ( 5 , 5 )); console . log ( doSomeMath . addTwo ( 5 , 5 )); console . log ( everything ); After this, when you see import React from 'react' or import ReactDOM from 'react-dom' you will not be surprised. Package A Package is a module or a collection of modules. For instance, React, ReactDOM are packages. Node Package Manager(NPM) NPM was created in 2010. You do not need to install NPM separately - when you install node you will have also NPM. NPM is a default package manager for Node.js. It allows users to consume and distribute JavaScript modules that are available in the registry. NPM allows to create packages, use packages and distribute packages. NMP also played quite a big role in the growth of JavaScript. Currently, there is more than 350,000 packages in the NPM registry. Let's see the create-react-app on NPM registry. The number of downloads show the popularity of the package. Visual Studio Code We will use Visual Studio Code as a code editor. Download and install it if you do not have one yet. Browser We will use Firefox Visual Studio Extensions You may need to install these extensions from Visual Studio Code Prettier ESLint Bracket Pair Colorizer ES7 React/Redux/GraphQL/React-Native snippets Create React App To create a react project you can use one of the following ways. Let's assume you installed node. Open the command line interface (CLI), git bash or terminal on Mac or Linux. Then run the following command. I am using git bash. $ npx create-react-app name-of-your-project If you do not like to write npx every time you create a project you may install create-react-app package globally in your computer using the following command. $ npm install -g create-react-app After you installed create-react-app, you create a React application as follows: $ create-react-app name-of-project Your first React App $ cd Desktop/ $ npx create-react-app react-app $ cd react-app $ yarn start Now your React app should run at localhost 3000. Go to the App.js and modify the content by writing some text, you will see the latest changes on the browser. To stop the server, press Ctr + C in the CLI. React Boilerplate Let's see the React boilerplate, which has been created by create-react-app. Whenever you create a new project, you run create-react-app and name of the project. In the following React boilerplate, there are three folders: node_modules, public and src. In addition, there are .gitignore, README.md, package.json and yarn.lock. Some of you, instead of yarn.lock, you may have package-lock.json. It is good to know these folders and files. node_modules - stores all the necessary node packages of the React applications. /public index.html - the only HTML file we have in the entire application favicon.ico - an icon file manifest.json - is used to make the application a progressive web app other images - open graph images(open graph images are images which are visible when a link share on social media) robots.txt - information, if the website allows web scraping /src App.css, index.css - are different CSS files index.js - a file which allows to connect all the components with index.html App.js - A file where we usually import most of the presentational components App.test.js - Tests with testing library and jest reportWebVitals.js: is useful to collect Web Vitals information setupTests.js - to write testing cases logo.svg - just a svg file package.json - List of packages the applications uses .gitignore - React boilerplate comes with git initiated, and the .gitingore allows files and folders not to be pushed to GitHub README.md - Markdown file to write documentation yarn.lock or package-lock.json - a means to lock the version of the package index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; import \"./index.css\" ; import App from \"./App\" ; import reportWebVitals from \"./reportWebVitals\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < link rel = \"icon\" href = \"%PUBLIC_URL%/favicon.ico\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < meta name = \"theme-color\" content = \"#000000\" /> < meta name = \"description\" content = \"Web site created using create-react-app\" /> < link rel = \"apple-touch-icon\" href = \"%PUBLIC_URL%/logo192.png\" /> <!-- manifest.json provides metadata used when your web app is installed on a user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/ --> < link rel = \"manifest\" href = \"%PUBLIC_URL%/manifest.json\" /> <!-- Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the `public` folder during the build. Only files inside the `public` folder can be referenced from the HTML. Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will work correctly both with client-side routing and a non-root public URL. Learn how to configure a non-root public URL by running `npm run build`. --> < title > React App </ title > </ head > < body > < noscript > You need to enable JavaScript to run this app. </ noscript > < div id = \"root\" ></ div > <!-- This HTML file is a template. If you open it directly in the browser, you will see an empty page. You can add webfonts, meta tags, or analytics to this file. The build step will place the bundled scripts into the <body> tag. To begin the development, run `npm start` or `yarn start`. To create a production bundle, use `npm run build` or `yarn build`. --> </ body > </ html > Injecting data to JSX elements index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; const welcome = \"Welcome to Webengineering\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Michael\" , lastName : \"Bykovski\" , }; const date = \"18. August 2022\" ; // JSX element, header const header = ( < header > < div > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1994 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); // JSX element, main const main = ( < main > < div > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2022\" ; // JSX element, footer const footer = ( < footer > < div > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div > { header } { main } { footer } < /div> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > { app } < /React.StrictMode>); Importing Media Objects in React How do we import images, video and audio in React? Let's see how we import images first. Create images folder in the src folder and save an image inside. For instance let's save react.jpg image and let's import this image to index.js. After importing we will inject it to a JSX expression, user. See the code below. // index.js import React from \"react\" ; import ReactDOM from \"react-dom\" ; import reactJPG from \"./images/react.jpg\" ; const app = ( < div > < img src = { reactJPG } alt = \"react\" /> < /div> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > { app } < /React.StrictMode>); See more possibilities in the documentation of create-react-app","title":"Setting Up"},{"location":"react/setting_up/#setting-up","text":"In the previous section, we learned about JSX and we accessed the React and ReactDOM package using CDN. However, in real projects instead of CDN you will use the create-react-app package to generate a React project starter(boilerplate). The initial create-react-app was released on Jul 22, 2016. Before this time, developers used to configure webpack with a JavaScript module bundler, babel and all the necessary packages manually and this used to take half an hour or maybe more. Now, create-react-app will take care of everything and you will be in charge of only developing the product, instead of spending too much time configuring and setting up projects. Before we start using different tools, let's have a brief introduction to all the tools we are going to use in this challenge. You do not have to understand everything, but I will try to give a very short introduction to some of the tools and technologies that we use when we work with React.","title":"Setting Up"},{"location":"react/setting_up/#module","text":"A single or multiple functions, that can be exported and imported when needed, can be included in a project. In React we do not use link to access modules or packages, instead we import the module. Let's see how to import and export a module or modules: // math.js export const addTwo = ( a , b ) => a + b ; export const multiply = ( a , b ) => a * b ; export const subtract = ( a , b ) => a - b ; export default ( function doSomeMath () { return { addTwo , multiply , subtract , }; })(); Now let's import the math.js modules to a different file: // index.js // to import the doSomeMath from the math.js with or without extension import doSomeMath from \"./math.js\" ; // to import the other modules // since these modules were not exported as default we have to desctructure import { addTwo , multiply , subtract } from \"./math.js\" ; import * as everything from \"./math.js\" ; // to import everything remaining console . log ( addTwo ( 5 , 5 )); console . log ( doSomeMath . addTwo ( 5 , 5 )); console . log ( everything ); After this, when you see import React from 'react' or import ReactDOM from 'react-dom' you will not be surprised.","title":"Module"},{"location":"react/setting_up/#package","text":"A Package is a module or a collection of modules. For instance, React, ReactDOM are packages.","title":"Package"},{"location":"react/setting_up/#node-package-managernpm","text":"NPM was created in 2010. You do not need to install NPM separately - when you install node you will have also NPM. NPM is a default package manager for Node.js. It allows users to consume and distribute JavaScript modules that are available in the registry. NPM allows to create packages, use packages and distribute packages. NMP also played quite a big role in the growth of JavaScript. Currently, there is more than 350,000 packages in the NPM registry. Let's see the create-react-app on NPM registry. The number of downloads show the popularity of the package.","title":"Node Package Manager(NPM)"},{"location":"react/setting_up/#visual-studio-code","text":"We will use Visual Studio Code as a code editor. Download and install it if you do not have one yet.","title":"Visual Studio Code"},{"location":"react/setting_up/#browser","text":"We will use Firefox","title":"Browser"},{"location":"react/setting_up/#visual-studio-extensions","text":"You may need to install these extensions from Visual Studio Code Prettier ESLint Bracket Pair Colorizer ES7 React/Redux/GraphQL/React-Native snippets","title":"Visual Studio Extensions"},{"location":"react/setting_up/#create-react-app","text":"To create a react project you can use one of the following ways. Let's assume you installed node. Open the command line interface (CLI), git bash or terminal on Mac or Linux. Then run the following command. I am using git bash. $ npx create-react-app name-of-your-project If you do not like to write npx every time you create a project you may install create-react-app package globally in your computer using the following command. $ npm install -g create-react-app After you installed create-react-app, you create a React application as follows: $ create-react-app name-of-project","title":"Create React App"},{"location":"react/setting_up/#your-first-react-app","text":"$ cd Desktop/ $ npx create-react-app react-app $ cd react-app $ yarn start Now your React app should run at localhost 3000. Go to the App.js and modify the content by writing some text, you will see the latest changes on the browser. To stop the server, press Ctr + C in the CLI.","title":"Your first React App"},{"location":"react/setting_up/#react-boilerplate","text":"Let's see the React boilerplate, which has been created by create-react-app. Whenever you create a new project, you run create-react-app and name of the project. In the following React boilerplate, there are three folders: node_modules, public and src. In addition, there are .gitignore, README.md, package.json and yarn.lock. Some of you, instead of yarn.lock, you may have package-lock.json. It is good to know these folders and files. node_modules - stores all the necessary node packages of the React applications. /public index.html - the only HTML file we have in the entire application favicon.ico - an icon file manifest.json - is used to make the application a progressive web app other images - open graph images(open graph images are images which are visible when a link share on social media) robots.txt - information, if the website allows web scraping /src App.css, index.css - are different CSS files index.js - a file which allows to connect all the components with index.html App.js - A file where we usually import most of the presentational components App.test.js - Tests with testing library and jest reportWebVitals.js: is useful to collect Web Vitals information setupTests.js - to write testing cases logo.svg - just a svg file package.json - List of packages the applications uses .gitignore - React boilerplate comes with git initiated, and the .gitingore allows files and folders not to be pushed to GitHub README.md - Markdown file to write documentation yarn.lock or package-lock.json - a means to lock the version of the package index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; import \"./index.css\" ; import App from \"./App\" ; import reportWebVitals from \"./reportWebVitals\" ; const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > < App /> < /React.StrictMode> ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < link rel = \"icon\" href = \"%PUBLIC_URL%/favicon.ico\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < meta name = \"theme-color\" content = \"#000000\" /> < meta name = \"description\" content = \"Web site created using create-react-app\" /> < link rel = \"apple-touch-icon\" href = \"%PUBLIC_URL%/logo192.png\" /> <!-- manifest.json provides metadata used when your web app is installed on a user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/ --> < link rel = \"manifest\" href = \"%PUBLIC_URL%/manifest.json\" /> <!-- Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the `public` folder during the build. Only files inside the `public` folder can be referenced from the HTML. Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will work correctly both with client-side routing and a non-root public URL. Learn how to configure a non-root public URL by running `npm run build`. --> < title > React App </ title > </ head > < body > < noscript > You need to enable JavaScript to run this app. </ noscript > < div id = \"root\" ></ div > <!-- This HTML file is a template. If you open it directly in the browser, you will see an empty page. You can add webfonts, meta tags, or analytics to this file. The build step will place the bundled scripts into the <body> tag. To begin the development, run `npm start` or `yarn start`. To create a production bundle, use `npm run build` or `yarn build`. --> </ body > </ html >","title":"React Boilerplate"},{"location":"react/setting_up/#injecting-data-to-jsx-elements","text":"index.js import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; const welcome = \"Welcome to Webengineering\" ; const title = \"Getting Started React\" ; const subtitle = \"JavaScript Library\" ; const author = { firstName : \"Michael\" , lastName : \"Bykovski\" , }; const date = \"18. August 2022\" ; // JSX element, header const header = ( < header > < div > < h1 > { welcome } < /h1> < h2 > { title } < /h2> < h3 > { subtitle } < /h3> < p > Instructor : { author . firstName } { author . lastName } < /p> < small > Date : { date } < /small> < /div> < /header> ); const numOne = 3 ; const numTwo = 2 ; const result = ( < p > { numOne } + { numTwo } = { numOne + numTwo } < /p> ); const yearBorn = 1994 ; const currentYear = new Date (). getFullYear (); const age = currentYear - yearBorn ; const personAge = ( < p > { author . firstName } { author . lastName } is { age } years old < /p> ); // JSX element, main const techs = [ \"HTML\" , \"CSS\" , \"JavaScript\" ]; const techsFormatted = techs . map (( tech ) => < li > { tech } < /li>); // JSX element, main const main = ( < main > < div > < p > Prerequisite to get started { \" \" } < strong > < em > react . js < /em> < /strong> : < /p> < ul > { techsFormatted } < /ul> { result } { personAge } < /div> < /main> ); const copyRight = \"Copyright 2022\" ; // JSX element, footer const footer = ( < footer > < div > < p > { copyRight } < /p> < /div> < /footer> ); // JSX element, app const app = ( < div > { header } { main } { footer } < /div> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > { app } < /React.StrictMode>);","title":"Injecting data to JSX elements"},{"location":"react/setting_up/#importing-media-objects-in-react","text":"How do we import images, video and audio in React? Let's see how we import images first. Create images folder in the src folder and save an image inside. For instance let's save react.jpg image and let's import this image to index.js. After importing we will inject it to a JSX expression, user. See the code below. // index.js import React from \"react\" ; import ReactDOM from \"react-dom\" ; import reactJPG from \"./images/react.jpg\" ; const app = ( < div > < img src = { reactJPG } alt = \"react\" /> < /div> ); const root = ReactDOM . createRoot ( document . getElementById ( \"root\" )); root . render ( < React . StrictMode > { app } < /React.StrictMode>); See more possibilities in the documentation of create-react-app","title":"Importing Media Objects in React"}]}